/**@generated
 * WARNING ï¿½ Changes you make to this file may be lost.
 *           File is generated and may be re-generated without warning.
 * @RPT-Core-generated Version 8.6
 */
/******************************************************************
* Licensed Materials - Property of IBM and/or HCL
* Copyright IBM Corporation 2013, 2017. All Rights Reserved.
* Copyright HCL Technologies Ltd. 2017, 2020.  All Rights Reserved.
* 
* U.S. Government Users Restricted Rights - Use, duplication or 
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
******************************************************************/
/* TestScript.template - Suitable for collaborative code generation */
package test;

import com.ibm.rational.test.lt.datacorrelation.execution.action.VariableAction;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.DataCorrelationVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.DataHarvester;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.DataVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDCArray;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDCCoreVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDataCorrelationVar;
import com.ibm.rational.test.lt.datacorrelation.execution.harvest.IDataHarvester;
import com.ibm.rational.test.lt.datacorrelation.execution.proto.ProtoAdapterHandler;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.DataSub;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.IDataSub;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.ISubRule;
import com.ibm.rational.test.lt.datacorrelation.execution.sub.SubRule;
import com.ibm.rational.test.lt.datatransform.adapters.DataTransformAction;
import com.ibm.rational.test.lt.datatransform.adapters.IDataTransform;
import com.ibm.rational.test.lt.execution.core.impl.LTTestScript;
import com.ibm.rational.test.lt.execution.core.impl.MetaString;
import com.ibm.rational.test.lt.execution.core.impl.ZipEntryProxy;
import com.ibm.rational.test.lt.execution.http.IBasicAuthentication;
import com.ibm.rational.test.lt.execution.http.IConnectionRecord;
import com.ibm.rational.test.lt.execution.http.IHTTPRequest;
import com.ibm.rational.test.lt.execution.http.IHTTPSessionTypes;
import com.ibm.rational.test.lt.execution.http.INtlmAuthenticationContext;
import com.ibm.rational.test.lt.execution.http.ISSLInfo;
import com.ibm.rational.test.lt.execution.http.connection.IConnectionLimitsAlgorithm;
import com.ibm.rational.test.lt.execution.http.impl.ConfigConnection;
import com.ibm.rational.test.lt.execution.http.impl.DynamicHTTPRequestsContainer;
import com.ibm.rational.test.lt.execution.http.impl.DynamicRequestContainer;
import com.ibm.rational.test.lt.execution.http.impl.HTTPAction;
import com.ibm.rational.test.lt.execution.http.impl.HTTPPage;
import com.ibm.rational.test.lt.execution.http.impl.HTTPParallel;
import com.ibm.rational.test.lt.execution.http.impl.HTTPPostData;
import com.ibm.rational.test.lt.execution.http.impl.HTTPPostDataChunk;
import com.ibm.rational.test.lt.execution.http.impl.HTTPRequest;
import com.ibm.rational.test.lt.execution.http.impl.HTTPThink;
import com.ibm.rational.test.lt.execution.http.impl.INextActionGenerator;
import com.ibm.rational.test.lt.execution.http.impl.PerHostPortConnectionAlgorithm;
import com.ibm.rational.test.lt.execution.http.impl.RequestHeaderData;
import com.ibm.rational.test.lt.execution.http.impl.SSLInfo;
import com.ibm.rational.test.lt.execution.http.tes.*;
import com.ibm.rational.test.lt.execution.http.util.ConnectionRecordFactory;
import com.ibm.rational.test.lt.execution.http.util.CookieCacheUtil;
import com.ibm.rational.test.lt.execution.http.util.HTTPDataArea;
import com.ibm.rational.test.lt.execution.http.util.PageCacheUtil;
import com.ibm.rational.test.lt.execution.protocol.IProxyServerInfo;
import com.ibm.rational.test.lt.execution.protocol.impl.HTTPTestScriptHelper;
import com.ibm.rational.test.lt.kernel.IDataArea;
import com.ibm.rational.test.lt.kernel.action.IContainer;
import com.ibm.rational.test.lt.kernel.action.IKAction;
import com.ibm.rational.test.lt.kernel.action.IKTimeoutControl;
import com.ibm.rational.test.lt.kernel.action.impl.KAction;
import com.ibm.rational.test.lt.kernel.action.impl.KThrow;
import com.ibm.rational.test.lt.kernel.services.*;
import com.ibm.rational.test.lt.kernel.services.ITestExecutionServices;
import com.ibm.rational.test.lt.kernel.services.RPTEventStructure;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("all")
public class Simplehttptest_Test_A1ECF7ADE8F3FDF0C9BBE33261613362 extends LTTestScript  {

    static ProtoAdapterHandler pa = new ProtoAdapterHandler();
    static {           
        pa.addPA("com.ibm.rational.test.lt.datacorrelation.execution.protocol.core.CoreProtoAdapter", "coreAdapter");
pa.addPA("com.ibm.rational.test.lt.datacorrelation.execution.http.HTTPActionAdapter", "com.ibm.rational.test.lt.execution.http.impl.HTTPPostDataChunk");
pa.addPA("com.ibm.rational.test.lt.datacorrelation.execution.http.HTTPActionAdapter", "com.ibm.rational.test.lt.execution.http.impl.HTTPAction");
    }
	private IDataCorrelationVar[] dcVars = DataCorrelationVar.getArrayDCVars(204);
	private DataVar[] vars = new DataVar[12];
	
    
    
private HTTPTestScriptHelper httpTestScriptHelper;

	private HTTPTestScriptHelper getHTTPTest() {
		return httpTestScriptHelper;
	}

	
	public Simplehttptest_Test_A1ECF7ADE8F3FDF0C9BBE33261613362(IContainer container, String invocationId) {
		super(container, "simplehttptest", invocationId, "A1ECF7ADE8F3FDF0C9BBE33261613362");
		setArmEnabled(false);
		stopAtYourConvenience=false;
		this.httpTestScriptHelper = new HTTPTestScriptHelper(this);
        setTimeoutDuration(240000);
        setTimeoutScheme(IKTimeoutControl.CONTINUE);

	}

    public void execute() {
    	try {
				CookieCacheUtil.clearCookieCache((ITestExecutionServices)this);
	PageCacheUtil.clearPageCache((ITestExecutionServices)this);
	PageCacheUtil.setCacheEmulation((ITestExecutionServices)this, true);

	    		if (!isScheduleRun()) setThinkMax(2000);
	this.addEventBehavior(new RPTEventStructure(new RPTReferenceEvent(), new RPTContinueEvent("Failed to extract reference"), 2, "Failed to extract reference"));
	this.addEventBehavior(new RPTEventStructure(new RPTSubstitutionEvent(), new RPTContinueEvent("Substitution failed"), 2, "Substitution failed"));
	
	if (!isScheduleRun()){
this.addEventBehavior(new RPTEventStructure(new HTTPPageTitleVPEvent(), new RPTContinueEvent("Page title verification failed"), 1, "Page title verification failed"));
	this.addEventBehavior(new RPTEventStructure(new HTTPResponseCodeVPEvent(), new RPTContinueEvent("Response code verification failed"), 1, "Response code verification failed"));
	this.addEventBehavior(new RPTEventStructure(new HTTPResponseSizeVPEvent(), new RPTContinueEvent("Response size verification failed"), 1, "Response size verification failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTFailVPEvent(), new RPTContinueEvent("Content Verification Point failed"), 1, "Content Verification Point failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTConnectEvent(), new RPTContinueEvent("Connection failed"), 1, "Connection failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTAuthenticationEvent(), new RPTContinueEvent("Authentication failed"), 1, "Authentication failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTDataPoolEOFEvent(), new RPTStopUserEvent("End of dataset reached"), 1, "End of dataset reached"));
	this.addEventBehavior(new RPTEventStructure(new RPTReferenceEvent(), new RPTContinueEvent("Failed to extract reference"), 1, "Failed to extract reference"));
	this.addEventBehavior(new RPTEventStructure(new RPTSubstitutionEvent(), new RPTContinueEvent("Substitution failed"), 1, "Substitution failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTServerTimeoutEvent(), new RPTContinueEvent("Timeout"), 1, "Timeout"));
	this.addEventBehavior(new RPTEventStructure(new RPTCustomCodeVPFailureEvent(), new RPTContinueEvent("Custom Verification Point failed"), 1, "Custom Verification Point failed"));
	this.addEventBehavior(new RPTEventStructure(new RPTCustomCodeAlertEvent(), new RPTContinueEvent("Custom Code reported an Alert"), 0, "Custom Code reported an Alert"));
	this.addEventBehavior(new RPTEventStructure(new RPTCustomCodeExceptionEvent(), new RPTStopUserEvent("Custom Code reported an unhandled exception"), 1, "Custom Code reported an unhandled exception"));
	}
	
	
	        	this.add(dataTransform(this));
	this.add(varAction_1(this));
	this.add(confCon_1(this));
	this.add(confCon_2(this));
	this.add(confCon_3(this));
	this.add(confCon_4(this));
	this.add(confCon_5(this));
	this.add(confCon_6(this));
	this.add(confCon_7(this));
	this.add(page_1(this));
	this.add(page_2(this));
	this.add(page_3(this));
	this.add(page_4(this));
	this.add(page_5(this));
	this.add(page_6(this));
	this.add(page_7(this));
	this.add(page_8(this));
	this.add(page_9(this));
	this.add(page_10(this));
	this.add(page_11(this));
	this.add(page_12(this));
	this.add(page_13(this));
			this.httpTestScriptHelper.executeHelper();

	    } catch (Throwable e) {
		     log("Test Execution: Simplehttptest_Test_A1ECF7ADE8F3FDF0C9BBE33261613362 ",e);
	    } finally {
	        super.execute();
		}	    
    }
    
	public void preFinish() {
		this.httpTestScriptHelper.preFinishHelper();

		super.preFinish();
	}
	
	public void stop() {
		
		super.stop();
	}	
	
	private KAction dataTransform(IContainer parent) {
		DataTransformAction action = 
			new DataTransformAction(parent, "Data Transform Action");

		action.setMapFile("A1ECF7ADE8F3FDF0C9BBE33261613362");

		// Control file contains transforms 
		// com.ibm.rational.test.lt.datatransform.adapters.impl.XMLAdapterVERSION_0
		// com.ibm.rational.test.lt.datatransform.adapters.impl.JsonAdapterVERSION_0

		return action;
	}
private VariableAction varAction_1(final IContainer parent) {

	VariableAction vc = new VariableAction(parent, "", "A1ECF7ADE8F4251AC9BBE33261613362");	
			vars[0] = new DataVar("simplehttptest_Host", "media.officedepot.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[1] = new DataVar("simplehttptest_Host_1", "www.officedepot.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[2] = new DataVar("simplehttptest_Host_2", "ma.officedepot.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[3] = new DataVar("simplehttptest_Host_3", "api.officedepot.io", IDataArea.TEST, "IGNORE", false, false);

	
		vars[4] = new DataVar("simplehttptest_Host_4", "officedepot.com", IDataArea.TEST, "IGNORE", false, false);

	
		vars[5] = new DataVar("simplehttptest_Host_3_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[6] = new DataVar("simplehttptest_Host_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[7] = new DataVar("simplehttptest_Host_2_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[8] = new DataVar("simplehttptest_Host_1_Port", "443", IDataArea.TEST, "IGNORE", false, false);

	
		vars[9] = new DataVar("simplehttptest_Host_1_Port_1", "80", IDataArea.TEST, "IGNORE", false, false);

	
		vars[10] = new DataVar("simplehttptest_Host_4_Port", "80", IDataArea.TEST, "IGNORE", false, false);

	
		vars[11] = new DataVar("simplehttptest_Host_4_Port_1", "443", IDataArea.TEST, "IGNORE", false, false);

		
	vc.add(vars);
	return vc;
	
}

	private IKAction confCon_1(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_1",
					(String)(vars[4].getValue()== null?"officedepot.com": (String)vars[4].getValue()),  // host name
					Integer.parseInt((String)(vars[11].getValue()== null?"443": (String)vars[11].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"officedepot.com",  // unsubstituted host name
					Integer.parseInt((String)("443")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_2(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = null;
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_2",
					(String)(vars[4].getValue()== null?"officedepot.com": (String)vars[4].getValue()),  // host name
					Integer.parseInt((String)(vars[10].getValue()== null?"80": (String)vars[10].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"officedepot.com",  // unsubstituted host name
					Integer.parseInt((String)("80")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_3(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = null;
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_3",
					(String)(vars[1].getValue()== null?"www.officedepot.com": (String)vars[1].getValue()),  // host name
					Integer.parseInt((String)(vars[9].getValue()== null?"80": (String)vars[9].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"www.officedepot.com",  // unsubstituted host name
					Integer.parseInt((String)("80")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_4(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_4",
					(String)(vars[1].getValue()== null?"www.officedepot.com": (String)vars[1].getValue()),  // host name
					Integer.parseInt((String)(vars[8].getValue()== null?"443": (String)vars[8].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"www.officedepot.com",  // unsubstituted host name
					Integer.parseInt((String)("443")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_5(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_5",
					(String)(vars[2].getValue()== null?"ma.officedepot.com": (String)vars[2].getValue()),  // host name
					Integer.parseInt((String)(vars[7].getValue()== null?"443": (String)vars[7].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"ma.officedepot.com",  // unsubstituted host name
					Integer.parseInt((String)("443")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_6(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_6",
					(String)(vars[0].getValue()== null?"media.officedepot.com": (String)vars[0].getValue()),  // host name
					Integer.parseInt((String)(vars[6].getValue()== null?"443": (String)vars[6].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"media.officedepot.com",  // unsubstituted host name
					Integer.parseInt((String)("443")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}


	private IKAction confCon_7(final IContainer parent) {
		IKAction action = new KAction(parent) {
			@Override
			public void execute() {
				ISSLInfo sslInfo = new SSLInfo("TLSv1.2", "ON", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
				IProxyServerInfo proxyServerInfo = null;
				
				
				ConfigConnection conn = new ConfigConnection(
					parent,
					"Config_7",
					(String)(vars[3].getValue()== null?"api.officedepot.io": (String)vars[3].getValue()),  // host name
					Integer.parseInt((String)(vars[5].getValue()== null?"443": (String)vars[5].getValue())), 
					sslInfo,  // SSL info
					null,  // NTLM info
					proxyServerInfo,  // proxy server info
					"api.officedepot.io",  // unsubstituted host name
					Integer.parseInt((String)("443")) 
				);
				ConfigConnection.storeConfigConnection(this, conn);
				finish();
			}
		};
		return action;		
	}

private HTTPPage page_1(final IContainer parent) {
			HTTPThink think = new HTTPThink(0, 1, parent, parent, "A1ECF7ADEA937D27C9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Office Depot OfficeMax | Official Online Store", "A1ECF7ADEA937D27C9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(17, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_1(this, true, "A1ECF7ADEA92E0E0C9BBE33261613362", true, false,
						"Config_1", "/",	"/", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_2(this, false, "A1ECF7ADEA9726A0C9BBE33261613362", true, false,
						"Config_2", "/",	"/", true, false), 1783, 69, "A1ECF7ADEA946787C9BBE33261613362", 3);
				httpParallel.addRequest(2, request_3(this, false, "A1ECF7ADEA979BD1C9BBE33261613362", true, false,
						"Config_3", "/",	"/", true, false), 4, 69, "A1ECF7ADEA9726A8C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_4(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, true,
						"Config_4", "/",	"/", true, false), 4, 69, "A1ECF7ADEA979BD9C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_5(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/styles/od/master.min.5c50de2a13.css",	"/styles/od/master.min.5c50de2a13.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_6(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/styles/od/master_integration.min.9fff906f06.css",	"/styles/od/master_integration.min.9fff906f06.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_7(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/styles/od/home.min.29c4974d9e.css",	"/styles/od/home.min.29c4974d9e.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_8(this, false, "A1ECF7ADEAB69580C9BBE33261613362", false, false,
						"Config_4", "/styles/od/promoCouponOffer.min.f052d92eba.css",	"/styles/od/promoCouponOffer.min.f052d92eba.css", true, false), 115, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_9(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", false, false,
						"Config_4", "/styles/od/catalog.min.5a99e51adb.css",	"/styles/od/catalog.min.5a99e51adb.css", true, false), 113, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(6, request_10(this, false, "A1ECF7ADEAB84330C9BBE33261613362", false, false,
						"Config_4", "/styles/od/promo.min.944a7319eb.css",	"/styles/od/promo.min.944a7319eb.css", true, false), 113, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(3, request_11(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/resource/css/5752/b373928af1d699ec7ecd59634738a191/officedepot.css",	"/resource/css/5752/b373928af1d699ec7ecd59634738a191/officedepot.css", true, false), 699, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_12(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/styles/od/product.min.107359d744.css",	"/styles/od/product.min.107359d744.css", true, false), 117, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_13(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/styles/global_header.min.43bdc2f4ab72509b3666.css",	"/styles/global_header.min.43bdc2f4ab72509b3666.css", true, false), 118, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(4, request_14(this, false, "A1ECF7ADEAB69580C9BBE33261613362", false, false,
						"Config_4", "/styles/global_header_persistent_ad_banner.min.572b4edcb5a3ca106554.css",	"/styles/global_header_persistent_ad_banner.min.572b4edcb5a3ca106554.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_15(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", false, false,
						"Config_4", "/js/vendor.min.03c9568d477777bf48bc68a05179b80c.js",	"/js/vendor.min.03c9568d477777bf48bc68a05179b80c.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_16(this, false, "A1ECF7ADEAB84330C9BBE33261613362", false, false,
						"Config_4", "/js/od/polyfills.min.65154f27d7.js",	"/js/od/polyfills.min.65154f27d7.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_17(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/js/od/master.min.5207ac93c9.js",	"/js/od/master.min.5207ac93c9.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_18(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/resource/js/5752/ccee5184099bcbed20d3836cb8acfd3/officedepot.js",	"/resource/js/5752/ccee5184099bcbed20d3836cb8acfd3/officedepot.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_19(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/js/react.min.808706b2a48846c498f2c78838ef1de8.js",	"/js/react.min.808706b2a48846c498f2c78838ef1de8.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_20(this, false, "A1ECF7ADEACB5603C9BBE33261613362", false, false,
						"Config_5", "/header/static/css/main.css",	"/header/static/css/main.css", true, false), 128, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(10, request_21(this, false, "A1ECF7ADEACC407BC9BBE33261613362", false, false,
						"Config_5", "/analytics-utils/static/js/main.js",	"/analytics-utils/static/js/main.js", true, false), 128, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_22(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", false, false,
						"Config_4", "/js/global_vars.min.15b120702102e07d268b.js",	"/js/global_vars.min.15b120702102e07d268b.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_23(this, false, "A1ECF7ADEAB69580C9BBE33261613362", false, false,
						"Config_4", "/js/global_header_persistent_ad_banner.min.840d16a3865b853e3444.js",	"/js/global_header_persistent_ad_banner.min.840d16a3865b853e3444.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_24(this, false, "A1ECF7ADEAB84330C9BBE33261613362", false, false,
						"Config_4", "/js/global_header.min.162716bfb3fc61f47538.js",	"/js/global_header.min.162716bfb3fc61f47538.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_25(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/styles/global_footer.min.7e2a206d5effc90b09d9.css",	"/styles/global_footer.min.7e2a206d5effc90b09d9.css", true, false), 1427, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(9, request_26(this, false, "A1ECF7ADEACB5603C9BBE33261613362", false, false,
						"Config_5", "/footer/static/css/main.css",	"/footer/static/css/main.css", true, false), 1429, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_27(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/js/od/promoCouponOffer.min.a64674e9ef.js",	"/js/od/promoCouponOffer.min.a64674e9ef.js", true, false), 1432, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(6, request_28(this, false, "A1ECF7ADEAB84330C9BBE33261613362", false, false,
						"Config_4", "/js/od/pagebuilder.min.89d2e75f46.js",	"/js/od/pagebuilder.min.89d2e75f46.js", true, false), 1432, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(3, request_29(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/styles/business_select.min.4957f754587baf40831a.css",	"/styles/business_select.min.4957f754587baf40831a.css", true, false), 1437, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(4, request_30(this, false, "A1ECF7ADEAB69580C9BBE33261613362", false, false,
						"Config_4", "/js/od/product.min.4b742f299b.js",	"/js/od/product.min.4b742f299b.js", true, false), 1437, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_31(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", false, false,
						"Config_4", "/styles/products_rail.min.059bce0908eec301bc6c.css",	"/styles/products_rail.min.059bce0908eec301bc6c.css", true, false), 1438, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_32(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/js/products_rail.min.4cf72b10c23be0bce58a.js",	"/js/products_rail.min.4cf72b10c23be0bce58a.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_33(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_34(this, false, "A1ECF7ADEA983816C9BBE33261613362", false, false,
						"Config_4", "/js/cm_ga_conversion.min.af481c4d1f9e60f10569.js",	"/js/cm_ga_conversion.min.af481c4d1f9e60f10569.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_35(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", false, false,
						"Config_4", "/akam/13/93e9ec4",	"/akam/13/93e9ec4", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_36(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112582/assets/350x191_hp.png",	"/image/upload/v1614112582/assets/350x191_hp.png", true, false), 285, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(4, request_37(this, false, "A1ECF7ADEAB69580C9BBE33261613362", true, false,
						"Config_4", "/fm/files/od/inktoner_v2/new_brand_tiles/350x191_epson.png",	"/fm/files/od/inktoner_v2/new_brand_tiles/350x191_epson.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_38(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112675/assets/350x191_brother.png",	"/image/upload/v1614112675/assets/350x191_brother.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_39(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112718/assets/350x191_canon.png",	"/image/upload/v1614112718/assets/350x191_canon.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_40(this, false, "A1ECF7ADEAB84330C9BBE33261613362", false, false,
						"Config_4", "/resource/blob/52/180e82018d1c6ea639900946dd899732/loader-big-gif-data.gif",	"/resource/blob/52/180e82018d1c6ea639900946dd899732/loader-big-gif-data.gif", true, false), 858, 69, "A1ECF7ADEAB92DB7C9BBE33261613362", 2);
				httpParallel.addRequest(11, request_41(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1589898212/content/od/tiles/2020/week_21/truck_2020_15_new6.png",	"/image/upload/v1589898212/content/od/tiles/2020/week_21/truck_2020_15_new6.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_42(this, false, "A1ECF7ADEACB5603C9BBE33261613362", true, false,
						"Config_5", "/header/static/js/main.js",	"/header/static/js/main.js", true, false), 1715, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_43(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", false, false,
						"Config_4", "/js/analytics_monetate.min.1cd6c20f821df6414488.js",	"/js/analytics_monetate.min.1cd6c20f821df6414488.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(10, request_44(this, false, "A1ECF7ADEACC407BC9BBE33261613362", true, false,
						"Config_5", "/footer/static/js/main.js",	"/footer/static/js/main.js", true, false), 1744, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_45(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/js/print.min.d48100ea4f05518488a1.js",	"/js/print.min.d48100ea4f05518488a1.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_46(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427464/a6c7cf69f0ca902119b4740e52ecaf5f/2722-hmpg-slider-1920x468-furn-seating--3--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427464/a6c7cf69f0ca902119b4740e52ecaf5f/2722-hmpg-slider-1920x468-furn-seating--3--data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_47(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/js/business_select.min.302846b0b19233a6511e.js",	"/js/business_select.min.302846b0b19233a6511e.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_48(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1589898210/content/od/tiles/2020/week_21/clock_2020_15_new3.png",	"/image/upload/v1589898210/content/od/tiles/2020/week_21/clock_2020_15_new3.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_49(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/426996/8e6e5d11088fe960e68af0a0782b0ad0/2722-hmpg-slider-1920x468-printer-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/426996/8e6e5d11088fe960e68af0a0782b0ad0/2722-hmpg-slider-1920x468-printer-data.jpg", true, false), 1595, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_50(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/js/remove_sw.min.d0cd10b0f20ea453eab8.js",	"/js/remove_sw.min.d0cd10b0f20ea453eab8.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_51(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1589898214/content/od/tiles/2020/week_21/bag_2020_15_new3.png",	"/image/upload/v1589898214/content/od/tiles/2020/week_21/bag_2020_15_new3.png", true, false), 1628, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(11, request_52(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427834/4addb073d7ea996b9c6e243fcb16e720/2722-hmpg-slider-1920x468-bonus-rwds-ink-toner--2--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427834/4addb073d7ea996b9c6e243fcb16e720/2722-hmpg-slider-1920x468-bonus-rwds-ink-toner--2--data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_53(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427718/0973f14443b35b6f06326573ad2e56b7/2722-hmpg-slider-1920x468-tech--4--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427718/0973f14443b35b6f06326573ad2e56b7/2722-hmpg-slider-1920x468-tech--4--data.jpg", true, false), 1678, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(15, request_54(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112760/assets/350x191_samsung.png",	"/image/upload/v1614112760/assets/350x191_samsung.png", true, false), 1673, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(16, request_55(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/assets/350x191_xerox.png",	"/assets/350x191_xerox.png", true, false), 1675, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(13, request_56(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112807/assets/lexmark_logo.jpg",	"/image/upload/v1614112807/assets/lexmark_logo.jpg", true, false), 2002, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(11, request_57(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112826/assets/350x191_dell.png",	"/image/upload/v1614112826/assets/350x191_dell.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_58(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112848/assets/350x191_oki.png",	"/image/upload/v1614112848/assets/350x191_oki.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_59(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112874/assets/ricoh_new_logo.jpg",	"/image/upload/v1614112874/assets/ricoh_new_logo.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_60(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1614112907/assets/350x191_od.png",	"/image/upload/v1614112907/assets/350x191_od.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_61(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/t_medium,f_auto/assets/deals.jpg",	"/t_medium,f_auto/assets/deals.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_62(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/t_medium,f_auto/assets/coupons.jpg",	"/t_medium,f_auto/assets/coupons.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_63(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/t_medium,f_auto/assets/reward-offers.jpg",	"/t_medium,f_auto/assets/reward-offers.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_64(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/t_medium,f_auto/assets/clearance.jpg",	"/t_medium,f_auto/assets/clearance.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_65(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427738/b0aa74e94957c2ef467028faf986105e/2722-hmpg-4col-716x418-supplies--2--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427738/b0aa74e94957c2ef467028faf986105e/2722-hmpg-4col-716x418-supplies--2--data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_66(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7303226/hp-envy-inspire-7255e-wireless-color",	"/images/t_medium,f_auto/products/7303226/hp-envy-inspire-7255e-wireless-color", true, false), 2079, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(11, request_67(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7090695/ihealth-covid-19-at-home-antigen",	"/images/t_medium,f_auto/products/7090695/ihealth-covid-19-at-home-antigen", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_68(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/6788887/asus-vivobook-15-slim-f1502za-os34",	"/images/t_medium,f_auto/products/6788887/asus-vivobook-15-slim-f1502za-os34", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_69(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427740/8fadac11c198ea7a00c788b752f9a70f/2722-hmpg-4col-716x418-cbs--2--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427740/8fadac11c198ea7a00c788b752f9a70f/2722-hmpg-4col-716x418-cbs--2--data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_70(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427734/6fe17bb44b2428ad48b172413b8ec637/2722-hmpg-4col-716x418-paper-redtop-4999--1--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427734/6fe17bb44b2428ad48b172413b8ec637/2722-hmpg-4col-716x418-paper-redtop-4999--1--data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_71(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/744074/realspace-cressfield-bonded-leather-high-back",	"/images/t_medium,f_auto/products/744074/realspace-cressfield-bonded-leather-high-back", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_72(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/696386/clorox-disinfecting-wipes-7-x-8",	"/images/t_medium,f_auto/products/696386/clorox-disinfecting-wipes-7-x-8", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_73(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427742/aa259017bef9a71a2ad346a67de904d6/2722-hmpg-4col-716x418-furniture-deals-under-150--2--data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427742/aa259017bef9a71a2ad346a67de904d6/2722-hmpg-4col-716x418-furniture-deals-under-150--2--data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_74(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/348037/office-depot-brand-multi-use-print",	"/images/t_medium,f_auto/products/348037/office-depot-brand-multi-use-print", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_75(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/t_medium,f_auto/assets/weekly-ad.jpg",	"/t_medium,f_auto/assets/weekly-ad.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_76(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/6601298/element-em2fpab27b-27-1080p-frameless-lcd",	"/images/t_medium,f_auto/products/6601298/element-em2fpab27b-27-1080p-frameless-lcd", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_77(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/8255504/rubbermaid-cleverstore-storage-tote-with-latching",	"/images/t_medium,f_auto/products/8255504/rubbermaid-cleverstore-storage-tote-with-latching", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_78(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/787781/realspace-magellan-pneumatic-height-adjustable-standing",	"/images/t_medium,f_auto/products/787781/realspace-magellan-pneumatic-height-adjustable-standing", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_79(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/4459552/hp-slim-s01-af0026b-desktop-pc",	"/images/t_medium,f_auto/products/4459552/hp-slim-s01-af0026b-desktop-pc", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_80(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/161444/brenton-studio-ruzzi-mid-back-managers",	"/images/t_medium,f_auto/products/161444/brenton-studio-ruzzi-mid-back-managers", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_81(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/8571850/hp-envy-inspire-7955e-wireless-color",	"/images/t_medium,f_auto/products/8571850/hp-envy-inspire-7955e-wireless-color", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_82(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/576868/sauder-heritage-hill-65-w-double",	"/images/t_medium,f_auto/products/576868/sauder-heritage-hill-65-w-double", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_83(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/305824/office-depot-brand-stellar-poly-notebook",	"/images/t_medium,f_auto/products/305824/office-depot-brand-stellar-poly-notebook", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_84(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/392222/28e4613d53126f6fa10eee8bca7f3dc3/trending-categories-print---copy-canva-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/392222/28e4613d53126f6fa10eee8bca7f3dc3/trending-categories-print---copy-canva-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_85(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/273620/69ba120bc584dac1b847fe2d2e00e7a6/calendars---planners-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/273620/69ba120bc584dac1b847fe2d2e00e7a6/calendars---planners-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_86(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/400888/acbd5cb223a201867e656a722f40211a/what-s-new-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/400888/acbd5cb223a201867e656a722f40211a/what-s-new-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_87(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259350/3fbaa18b463e6511832e8c541b8d2b22/2419-www-hptest-category-breakroom-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259350/3fbaa18b463e6511832e8c541b8d2b22/2419-www-hptest-category-breakroom-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_88(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259356/7f4e1e8c4b19064c64ce999057b59350/office-supplies-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259356/7f4e1e8c4b19064c64ce999057b59350/office-supplies-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_89(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/308758/1c1315e531bd1e4d13ba154f62746ed4/printers-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/308758/1c1315e531bd1e4d13ba154f62746ed4/printers-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_90(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/361488/4562b26652af59383c93bfc76ee976dd/computers-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/361488/4562b26652af59383c93bfc76ee976dd/computers-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_91(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259262/fb56ccfd7061daa105366a04044248cc/furniture-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259262/fb56ccfd7061daa105366a04044248cc/furniture-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_92(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/361484/f0e76e562c7aea91da5be47678d0aa80/computer-accessories-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/361484/f0e76e562c7aea91da5be47678d0aa80/computer-accessories-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_93(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259326/e97808faa551d31586583e9fb702ffb2/school-supplies-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259326/e97808faa551d31586583e9fb702ffb2/school-supplies-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_94(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259264/39d9b264dd8695c5e8ae8e22d34c2e7b/paper-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259264/39d9b264dd8695c5e8ae8e22d34c2e7b/paper-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_95(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259252/ad452f5a4460409b2d70505c9263c674/2419-www-hptest-category-cleaning-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259252/ad452f5a4460409b2d70505c9263c674/2419-www-hptest-category-cleaning-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_96(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/352390/b0e727c6683029fef0709e3e3da88663/ppe-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/352390/b0e727c6683029fef0709e3e3da88663/ppe-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_97(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/259294/67a33250cde3190fdc5006265530843c/electronics-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/259294/67a33250cde3190fdc5006265530843c/electronics-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_98(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/375938/27959a0c7977724e8872ee4fa541b38f/exclusive-brands-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/375938/27959a0c7977724e8872ee4fa541b38f/exclusive-brands-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_99(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/361502/46ae68ac82521ab5d046e381dfa100d8/deal-center-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/361502/46ae68ac82521ab5d046e381dfa100d8/deal-center-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_100(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/361498/6a7446fecf41ecf76d75778c6ec7561f/coupons-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/361498/6a7446fecf41ecf76d75778c6ec7561f/coupons-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_101(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/361508/64a808e4a5511d07ac2618cdb35c161e/rewards-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/361508/64a808e4a5511d07ac2618cdb35c161e/rewards-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_102(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/361500/8e13087ecd0f031afc1bcbb02ba2a1de/clearance-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/361500/8e13087ecd0f031afc1bcbb02ba2a1de/clearance-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_103(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/372260/835246adb48bf4788ea1e91f1eceba6d/deals-of-the-day-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/372260/835246adb48bf4788ea1e91f1eceba6d/deals-of-the-day-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_104(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/426798/4e9576a2532d2fe0608d590f967347eb/1384x1150-main-tile-desktop-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/426798/4e9576a2532d2fe0608d590f967347eb/1384x1150-main-tile-desktop-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_105(this, false, "A1ECF7ADEB197643C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/426800/b3d6429f8c9b77fa7c56a038073036a7/1332-x-1040-tile-1-desktop-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/426800/b3d6429f8c9b77fa7c56a038073036a7/1332-x-1040-tile-1-desktop-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_106(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/426802/f05a7766d2d17d08e3cab3529fd2a54b/1332-x-1040-tile-2-desktop-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/426802/f05a7766d2d17d08e3cab3529fd2a54b/1332-x-1040-tile-2-desktop-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_107(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/426804/82248443b7192424b56b55b0b5234787/1332-x-1040-tile-3-desktop-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/426804/82248443b7192424b56b55b0b5234787/1332-x-1040-tile-3-desktop-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(15, request_108(this, false, "A1ECF7ADEB1F4263C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/426806/012a5c94a1bfe7c042988a69b058575b/1332-x-1040-tile-4-desktop-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/426806/012a5c94a1bfe7c042988a69b058575b/1332-x-1040-tile-4-desktop-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_109(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427082/4ee2acdcd77104581285f3067b113420/2722-610x814-branding-zone-cpd-color-n-bw-printing-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427082/4ee2acdcd77104581285f3067b113420/2722-610x814-branding-zone-cpd-color-n-bw-printing-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(14, request_110(this, false, "A1ECF7ADEB1DE2D3C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/424670/b8bb0e85ab6e9ebd69c1f034db79377e/web2022-610x814-article-brand-zone-data.png",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/424670/b8bb0e85ab6e9ebd69c1f034db79377e/web2022-610x814-article-brand-zone-data.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_111(this, false, "A1ECF7ADEAEB1303C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/427352/2fc9b6df755cc38bd1f99dd46bbba47b/2722-610x814-branding-zone-bizselect-membership-promo-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/427352/2fc9b6df755cc38bd1f99dd46bbba47b/2722-610x814-branding-zone-bizselect-membership-promo-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_112(this, false, "A1ECF7ADEB1B23B3C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/coremedia/resource/blob/369432/a8d562abfbb6ab63618465979c4ca7af/1821-610x814-od-hiring-data.jpg",	"/image/upload/f_auto,q_auto/coremedia/resource/blob/369432/a8d562abfbb6ab63618465979c4ca7af/1821-610x814-od-hiring-data.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_113(this, false, "A1ECF7ADEB197643C9BBE33261613362", true, false,
						"Config_6", "/assets/playstore.png",	"/assets/playstore.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_114(this, false, "A1ECF7ADEB1F90C3C9BBE33261613362", true, false,
						"Config_6", "/assets/appstore.png",	"/assets/appstore.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_115(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 3342, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_116(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/styles/print.min.b06979a8c55fd07eb565.css",	"/styles/print.min.b06979a8c55fd07eb565.css", true, false), 3351, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_117(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/resource/blob/38220/d58e2bf1f66bc015371d6d466fe464e8/carousel-btn-sprites-png-data.png",	"/resource/blob/38220/d58e2bf1f66bc015371d6d466fe464e8/carousel-btn-sprites-png-data.png", true, false), 2943, 69, "A1ECF7ADEAB92DB7C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_118(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 4021, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_119(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", false, false,
						"Config_4", "/akam/13/pixel_93e9ec4",	"/akam/13/pixel_93e9ec4", true, false), 4106, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_120(this, false, "A1ECF7ADEABA8D23C9BBE33261613362", true, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=1&cachebuster=1235841369",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=1&cachebuster=1235841369", true, false), 6243, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_121(this, false, "A1ECF7ADEABBC5B0C9BBE33261613362", true, false,
						"Config_4", "/proxy/mczbf/tags/11024/tag.js",	"/proxy/mczbf/tags/11024/tag.js", true, false), 6468, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_122(this, false, "A1ECF7ADEAB758D7C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 7829, 69, "A1ECF7ADEA985F20C9BBE33261613362", 2);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_1(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEA946787C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "none", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_1 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_1);

	harvestContainer_1.addHarvestInstruction ("resp_hdr_Location_1", dcVars[0], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location", null, 0, false);
	IDataSub subContainer_1 = new DataSub();
	reqAction.addDataSub(subContainer_1);

		ISubRule sub_0 = new SubRule("req_hdr_Host_1", 0, 15, false, (IDCCoreVar)vars[4], false, "Host_372", null, 0, false);
	subContainer_1.addSubInstruction(sub_0);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEA94B5A0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(301);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_2(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEA9726A8C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_2 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_2);

	harvestContainer_2.addHarvestInstruction ("resp_hdr_Location_1", dcVars[1], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_2", null, 0, false);
	IDataSub subContainer_2 = new DataSub();
	reqAction.addDataSub(subContainer_2);

		ISubRule sub_1 = new SubRule("req_uri", 0, 1, false, (IDCCoreVar)dcVars[0], false, "Office Depot OfficeM_url_101", null, 0, false);
	subContainer_2.addSubInstruction(sub_1);
		ISubRule sub_2 = new SubRule("req_hdr_Host_1", 0, 15, false, (IDCCoreVar)vars[4], false, "Host_371", null, 0, false);
	subContainer_2.addSubInstruction(sub_2);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA946787C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEA974DB0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(301);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("http://");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_3(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEA979BD9C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(7);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_3 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_3);

	harvestContainer_3.addHarvestInstruction ("resp_hdr_Location_1", dcVars[2], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_3", null, 0, false);
	IDataSub subContainer_3 = new DataSub();
	reqAction.addDataSub(subContainer_3);

		ISubRule sub_3 = new SubRule("req_uri", 0, 1, false, (IDCCoreVar)dcVars[1], false, "Office Depot OfficeM_url_100", null, 0, false);
	subContainer_3.addSubInstruction(sub_3);
		ISubRule sub_4 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_370", null, 0, false);
	subContainer_3.addSubInstruction(sub_4);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA9726A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA9726A8C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEA979BDCC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(301);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("http://");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_4(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEA985F20C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "none", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_4 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_4);

	harvestContainer_4.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[3], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[4], "\\?v=(.*?)\"", 1, 1, 0, 0, false, "v_2", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[5], " href=\"(.*?)\"", 20, 19, 0, 0, false, "href_12", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[6], " href=\"(.*?)\"", 21, 1, 0, 0, false, "href_11", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[7], " href=\"(.*?)\"", 22, 1, 0, 0, false, "href_10", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[8], " href=\"(.*?)\"", 23, 1, 0, 0, false, "href_9", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[9], " href=\"(.*?)\"", 24, 1, 0, 0, false, "href_8", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[10], " href=\"(.*?)\"", 25, 1, 0, 0, false, "href_6", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[11], " href=\"(.*?)\"", 26, 1, 0, 0, false, "href_7", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[12], " src=\"(.*?)\"", 1, 1, 0, 0, false, "src_18", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[13], " src=\"(.*?)\"", 2, 1, 0, 0, false, "src_17", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[14], " src=\"(.*?)\"", 3, 1, 0, 0, false, "src_16", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[15], " src=\"(.*?)\"", 4, 1, 0, 0, false, "src_7", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[16], "/www\\.officedepot\\.com(.*?)\"", 10, 1, 0, 0, false, "www.officedepot.com_4", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[17], "/www\\.officedepot\\.com(.*?)\"", 11, 1, 0, 0, false, "www.officedepot.com_3", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[18], " src=\"(.*?)\"", 6, 1, 0, 0, false, "src_15", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[19], "/www\\.officedepot\\.com(.*?)\"", 14, 1, 0, 0, false, "www.officedepot.com_2", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[20], " src=\"(.*?)\"", 21, 13, 0, 0, false, "src_14", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[21], " href=\"(.*?)\"", 56, 1, 0, 0, false, "href_5", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[22], " href=\"(.*?)\"", 57, 1, 0, 0, false, "href_4", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[23], " src=\"(.*?)\"", 22, 1, 0, 0, false, "src_13", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[24], " src=\"(.*?)\"", 23, 1, 0, 0, false, "src_12", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[25], "/media\\.officedepot\\.com(.*?)\"", 10, 1, 0, 0, false, "media.officedepot.com_57", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[26], "/media\\.officedepot\\.com(.*?)\"", 11, 1, 0, 0, false, "media.officedepot.com_56", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[27], "/media\\.officedepot\\.com(.*?)\"", 12, 1, 0, 0, false, "media.officedepot.com_55", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[28], " src=\"(.*?)\"", 41, 14, 0, 0, false, "src_6", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[29], "/media\\.officedepot\\.com(.*?)\"", 25, 1, 0, 0, false, "media.officedepot.com_53", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[30], "/media\\.officedepot\\.com(.*?)\"", 26, 1, 0, 0, false, "media.officedepot.com_48", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[31], "/media\\.officedepot\\.com(.*?)\"", 27, 1, 0, 0, false, "media.officedepot.com_49", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[32], "/media\\.officedepot\\.com(.*?)\"", 28, 1, 0, 0, false, "media.officedepot.com_51", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[33], "/media\\.officedepot\\.com(.*?)\"", 29, 1, 0, 0, false, "media.officedepot.com_50", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[34], "/media\\.officedepot\\.com(.*?)\"", 30, 1, 0, 0, false, "media.officedepot.com_54", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[35], "/media\\.officedepot\\.com(.*?)\"", 31, 1, 0, 0, false, "media.officedepot.com_52", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[36], "/media\\.officedepot\\.com(.*?)\"", 32, 1, 0, 0, false, "media.officedepot.com_42", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[37], "/media\\.officedepot\\.com(.*?)\"", 33, 1, 0, 0, false, "media.officedepot.com_43", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[38], "/media\\.officedepot\\.com(.*?)\"", 34, 1, 0, 0, false, "media.officedepot.com_47", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[39], "/media\\.officedepot\\.com(.*?)\"", 35, 1, 0, 0, false, "media.officedepot.com_39", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[40], "/media\\.officedepot\\.com(.*?)\"", 36, 1, 0, 0, false, "media.officedepot.com_38", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[41], "/media\\.officedepot\\.com(.*?)\"", 37, 1, 0, 0, false, "media.officedepot.com_44", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[42], "/media\\.officedepot\\.com(.*?)\"", 38, 1, 0, 0, false, "media.officedepot.com_45", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[43], "/media\\.officedepot\\.com(.*?)\"", 39, 1, 0, 0, false, "media.officedepot.com_41", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[44], "/media\\.officedepot\\.com(.*?)\"", 40, 1, 0, 0, false, "media.officedepot.com_40", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[45], "/media\\.officedepot\\.com(.*?)\"", 41, 1, 0, 0, false, "media.officedepot.com_46", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[46], "/media\\.officedepot\\.com(.*?)\"", 42, 1, 0, 0, false, "media.officedepot.com_37", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[47], "/media\\.officedepot\\.com(.*?)\"", 43, 1, 0, 0, false, "media.officedepot.com_36", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[48], "/media\\.officedepot\\.com(.*?)\"", 44, 1, 0, 0, false, "media.officedepot.com_35", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[49], "/media\\.officedepot\\.com(.*?)\"", 45, 1, 0, 0, false, "media.officedepot.com_34", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[50], "/media\\.officedepot\\.com(.*?)\"", 46, 1, 0, 0, false, "media.officedepot.com_33", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[51], "/media\\.officedepot\\.com(.*?)\"", 47, 1, 0, 0, false, "media.officedepot.com_32", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[52], "/media\\.officedepot\\.com(.*?)\"", 48, 1, 0, 0, false, "media.officedepot.com_31", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[53], "/media\\.officedepot\\.com(.*?)\"", 49, 1, 0, 0, false, "media.officedepot.com_30", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[54], "/media\\.officedepot\\.com(.*?)\"", 50, 1, 0, 0, false, "media.officedepot.com_29", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[55], "/media\\.officedepot\\.com(.*?)\"", 51, 1, 0, 0, false, "media.officedepot.com_28", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[56], "/media\\.officedepot\\.com(.*?)\"", 52, 1, 0, 0, false, "media.officedepot.com_27", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[57], "/media\\.officedepot\\.com(.*?)\"", 53, 1, 0, 0, false, "media.officedepot.com_26", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[58], "/media\\.officedepot\\.com(.*?)\"", 54, 1, 0, 0, false, "media.officedepot.com_25", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[59], "/media\\.officedepot\\.com(.*?)\"", 55, 1, 0, 0, false, "media.officedepot.com_24", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[60], "/media\\.officedepot\\.com(.*?)\"", 56, 1, 0, 0, false, "media.officedepot.com_23", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[61], "/media\\.officedepot\\.com(.*?)\"", 57, 1, 0, 0, false, "media.officedepot.com_22", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[62], "/media\\.officedepot\\.com(.*?)\"", 58, 1, 0, 0, false, "media.officedepot.com_21", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[63], "/media\\.officedepot\\.com(.*?)\"", 59, 1, 0, 0, false, "media.officedepot.com_20", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[64], "/media\\.officedepot\\.com(.*?)\"", 60, 1, 0, 0, false, "media.officedepot.com_19", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[65], "/media\\.officedepot\\.com(.*?)\"", 61, 1, 0, 0, false, "media.officedepot.com_18", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[66], "/media\\.officedepot\\.com(.*?)\"", 62, 1, 0, 0, false, "media.officedepot.com_17", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[67], "/media\\.officedepot\\.com(.*?)\"", 63, 1, 0, 0, false, "media.officedepot.com_16", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[68], "/media\\.officedepot\\.com(.*?)\"", 64, 1, 0, 0, false, "media.officedepot.com_15", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[69], "/media\\.officedepot\\.com(.*?)\"", 65, 1, 0, 0, false, "media.officedepot.com_14", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[70], "/media\\.officedepot\\.com(.*?)\"", 66, 1, 0, 0, false, "media.officedepot.com_13", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[71], "/media\\.officedepot\\.com(.*?)\"", 67, 1, 0, 0, false, "media.officedepot.com_12", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[72], "/media\\.officedepot\\.com(.*?)\"", 68, 1, 0, 0, false, "media.officedepot.com_11", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[73], "/media\\.officedepot\\.com(.*?)\"", 69, 1, 0, 0, false, "media.officedepot.com_10", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[74], "/media\\.officedepot\\.com(.*?)\"", 70, 1, 0, 0, false, "media.officedepot.com_9", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[75], "/media\\.officedepot\\.com(.*?)\"", 71, 1, 0, 0, false, "media.officedepot.com_8", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[76], "/media\\.officedepot\\.com(.*?)\"", 72, 1, 0, 0, false, "media.officedepot.com_7", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[77], "/media\\.officedepot\\.com(.*?)\"", 73, 1, 0, 0, false, "media.officedepot.com_6", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[78], "/media\\.officedepot\\.com(.*?)\"", 74, 1, 0, 0, false, "media.officedepot.com_5", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[79], "/media\\.officedepot\\.com(.*?)\"", 75, 1, 0, 0, false, "media.officedepot.com_4", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[80], "/media\\.officedepot\\.com(.*?)\"", 76, 1, 0, 0, false, "media.officedepot.com_3", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[81], "/media\\.officedepot\\.com(.*?)\"", 77, 1, 0, 0, false, "media.officedepot.com_2", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[82], "/media\\.officedepot\\.com(.*?)\"", 78, 1, 0, 0, false, "media.officedepot.com", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[83], " href=\"(.*?)\"", 657, 2, 0, 0, false, "href_3", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[84], " src=\"(.*?)\"", 100, 5, 0, 0, false, "src_11", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[85], " src=\"(.*?)\"", 101, 1, 0, 0, false, "src_10", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[86], " src=\"(.*?)\"", 102, 1, 0, 0, false, "src_9", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[87], " window\\.printStyle = '(.*?)'", 1, 1, 0, 0, false, "window.printStyle", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[88], " src=\"(.*?)\"", 105, 1, 0, 0, false, "src_5", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[89], " src=\"(.*?)\"", 106, 1, 0, 0, false, "src_4", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[90], " href=\"(.*?)\"", 758, 1, 0, 0, false, "href_2", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[91], " src=\"(.*?)\"", 108, 2, 0, 0, false, "src_3", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[92], " href=\"(.*?)\"", 760, 1, 0, 0, false, "href", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[93], " src=\"(.*?)\"", 109, 1, 0, 0, false, "src_8", null, 0, false);
	harvestContainer_4.addHarvestInstruction ("resp_content", dcVars[94], "/www\\.officedepot\\.com(.*?)\\?", 12, 1, 0, 0, false, "www.officedepot.com", null, 0, false);
	IDataSub subContainer_4 = new DataSub();
	reqAction.addDataSub(subContainer_4);

		ISubRule sub_5 = new SubRule("req_uri", 0, 1, false, (IDCCoreVar)dcVars[2], false, "Office Depot OfficeM_url_99", null, 0, false);
	subContainer_4.addSubInstruction(sub_5);
		ISubRule sub_6 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_369", null, 0, false);
	subContainer_4.addSubInstruction(sub_6);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEA985F23C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_5(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEA9B9370C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_5 = new DataSub();
	reqAction.addDataSub(subContainer_5);

		ISubRule sub_7 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_366", null, 0, false);
	subContainer_5.addSubInstruction(sub_7);
		ISubRule sub_8 = new SubRule("req_uri", 0, 36, false, (IDCCoreVar)dcVars[5], false, "Office Depot OfficeM_url_98", null, 0, false);
	subContainer_5.addSubInstruction(sub_8);
		ISubRule sub_9 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_368", null, 0, false);
	subContainer_5.addSubInstruction(sub_9);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEA9B9373C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_6(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAB4C0C0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_6 = new DataSub();
	reqAction.addDataSub(subContainer_6);

		ISubRule sub_10 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_365", null, 0, false);
	subContainer_6.addSubInstruction(sub_10);
		ISubRule sub_11 = new SubRule("req_uri", 0, 48, false, (IDCCoreVar)dcVars[6], false, "Office Depot OfficeM_url_97", null, 0, false);
	subContainer_6.addSubInstruction(sub_11);
		ISubRule sub_12 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_367", null, 0, false);
	subContainer_6.addSubInstruction(sub_12);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAB4C0C3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_7(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAB58410C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_7 = new DataSub();
	reqAction.addDataSub(subContainer_7);

		ISubRule sub_13 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_364", null, 0, false);
	subContainer_7.addSubInstruction(sub_13);
		ISubRule sub_14 = new SubRule("req_uri", 0, 34, false, (IDCCoreVar)dcVars[7], false, "Office Depot OfficeM_url_96", null, 0, false);
	subContainer_7.addSubInstruction(sub_14);
		ISubRule sub_15 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_366", null, 0, false);
	subContainer_7.addSubInstruction(sub_15);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAB58413C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_8(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAB6958EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_8 = new DataSub();
	reqAction.addDataSub(subContainer_8);

		ISubRule sub_16 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_363", null, 0, false);
	subContainer_8.addSubInstruction(sub_16);
		ISubRule sub_17 = new SubRule("req_uri", 0, 46, false, (IDCCoreVar)dcVars[8], false, "Office Depot OfficeM_url_95", null, 0, false);
	subContainer_8.addSubInstruction(sub_17);
		ISubRule sub_18 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_365", null, 0, false);
	subContainer_8.addSubInstruction(sub_18);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAB69591C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_9(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAB758E5C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_9 = new DataSub();
	reqAction.addDataSub(subContainer_9);

		ISubRule sub_19 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_362", null, 0, false);
	subContainer_9.addSubInstruction(sub_19);
		ISubRule sub_20 = new SubRule("req_uri", 0, 37, false, (IDCCoreVar)dcVars[9], false, "Office Depot OfficeM_url_94", null, 0, false);
	subContainer_9.addSubInstruction(sub_20);
		ISubRule sub_21 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_364", null, 0, false);
	subContainer_9.addSubInstruction(sub_21);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAB758E8C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_10(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAB8433EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_10 = new DataSub();
	reqAction.addDataSub(subContainer_10);

		ISubRule sub_22 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_361", null, 0, false);
	subContainer_10.addSubInstruction(sub_22);
		ISubRule sub_23 = new SubRule("req_uri", 0, 35, false, (IDCCoreVar)dcVars[11], false, "Office Depot OfficeM_url_93", null, 0, false);
	subContainer_10.addSubInstruction(sub_23);
		ISubRule sub_24 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_363", null, 0, false);
	subContainer_10.addSubInstruction(sub_24);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAB84341C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_11(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAB92DB7C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_5 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_5);

	harvestContainer_5.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[95], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_2", null, 0, false);
	harvestContainer_5.addHarvestInstruction ("resp_content", dcVars[96], " url\\((.*?)\\)", 3, 3, 0, 0, false, "url(_2", null, 0, false);
	harvestContainer_5.addHarvestInstruction ("resp_content", dcVars[97], ":url\\((.*?)\\)", 35, 19, 0, 0, false, "url(", null, 0, false);
	IDataSub subContainer_11 = new DataSub();
	reqAction.addDataSub(subContainer_11);

		ISubRule sub_25 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_360", null, 0, false);
	subContainer_11.addSubInstruction(sub_25);
		ISubRule sub_26 = new SubRule("req_uri", 0, 67, false, (IDCCoreVar)dcVars[16], false, "Office Depot OfficeM_url_92", null, 0, false);
	subContainer_11.addSubInstruction(sub_26);
		ISubRule sub_27 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_362", null, 0, false);
	subContainer_11.addSubInstruction(sub_27);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAB92DBAC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css;charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_12(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEABA8D31C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_12 = new DataSub();
	reqAction.addDataSub(subContainer_12);

		ISubRule sub_28 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_359", null, 0, false);
	subContainer_12.addSubInstruction(sub_28);
		ISubRule sub_29 = new SubRule("req_uri", 0, 37, false, (IDCCoreVar)dcVars[10], false, "Office Depot OfficeM_url_91", null, 0, false);
	subContainer_12.addSubInstruction(sub_29);
		ISubRule sub_30 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_361", null, 0, false);
	subContainer_12.addSubInstruction(sub_30);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEABA8D34C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_13(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEABBC5BEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_13 = new DataSub();
	reqAction.addDataSub(subContainer_13);

		ISubRule sub_31 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_358", null, 0, false);
	subContainer_13.addSubInstruction(sub_31);
		ISubRule sub_32 = new SubRule("req_uri", 0, 50, false, (IDCCoreVar)dcVars[21], false, "Office Depot OfficeM_url_90", null, 0, false);
	subContainer_13.addSubInstruction(sub_32);
		ISubRule sub_33 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_360", null, 0, false);
	subContainer_13.addSubInstruction(sub_33);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEABBC5C1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_14(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEABC620FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_14 = new DataSub();
	reqAction.addDataSub(subContainer_14);

		ISubRule sub_34 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_357", null, 0, false);
	subContainer_14.addSubInstruction(sub_34);
		ISubRule sub_35 = new SubRule("req_uri", 0, 71, false, (IDCCoreVar)dcVars[22], false, "Office Depot OfficeM_url_89", null, 0, false);
	subContainer_14.addSubInstruction(sub_35);
		ISubRule sub_36 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_359", null, 0, false);
	subContainer_14.addSubInstruction(sub_36);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEABC6212C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_15(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEABCFE37C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_15 = new DataSub();
	reqAction.addDataSub(subContainer_15);

		ISubRule sub_37 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_356", null, 0, false);
	subContainer_15.addSubInstruction(sub_37);
		ISubRule sub_38 = new SubRule("req_uri", 0, 50, false, (IDCCoreVar)dcVars[12], false, "Office Depot OfficeM_url_88", null, 0, false);
	subContainer_15.addSubInstruction(sub_38);
		ISubRule sub_39 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_358", null, 0, false);
	subContainer_15.addSubInstruction(sub_39);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEABCFE3AC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_16(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEABDC1A7C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_16 = new DataSub();
	reqAction.addDataSub(subContainer_16);

		ISubRule sub_40 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_355", null, 0, false);
	subContainer_16.addSubInstruction(sub_40);
		ISubRule sub_41 = new SubRule("req_uri", 0, 34, false, (IDCCoreVar)dcVars[13], false, "Office Depot OfficeM_url_87", null, 0, false);
	subContainer_16.addSubInstruction(sub_41);
		ISubRule sub_42 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_357", null, 0, false);
	subContainer_16.addSubInstruction(sub_42);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEABDC1AAC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_17(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEABEABD0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_17 = new DataSub();
	reqAction.addDataSub(subContainer_17);

		ISubRule sub_43 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_354", null, 0, false);
	subContainer_17.addSubInstruction(sub_43);
		ISubRule sub_44 = new SubRule("req_uri", 0, 31, false, (IDCCoreVar)dcVars[14], false, "Office Depot OfficeM_url_86", null, 0, false);
	subContainer_17.addSubInstruction(sub_44);
		ISubRule sub_45 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_356", null, 0, false);
	subContainer_17.addSubInstruction(sub_45);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEABEABD3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_18(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAC7AC83C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_18 = new DataSub();
	reqAction.addDataSub(subContainer_18);

		ISubRule sub_46 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_353", null, 0, false);
	subContainer_18.addSubInstruction(sub_46);
		ISubRule sub_47 = new SubRule("req_uri", 0, 64, false, (IDCCoreVar)dcVars[17], false, "Office Depot OfficeM_url_85", null, 0, false);
	subContainer_18.addSubInstruction(sub_47);
		ISubRule sub_48 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_355", null, 0, false);
	subContainer_18.addSubInstruction(sub_48);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAC7AC86C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/javascript;charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_19(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAC9A853C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_19 = new DataSub();
	reqAction.addDataSub(subContainer_19);

		ISubRule sub_49 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_352", null, 0, false);
	subContainer_19.addSubInstruction(sub_49);
		ISubRule sub_50 = new SubRule("req_uri", 0, 49, false, (IDCCoreVar)dcVars[18], false, "Office Depot OfficeM_url_84", null, 0, false);
	subContainer_19.addSubInstruction(sub_50);
		ISubRule sub_51 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_354", null, 0, false);
	subContainer_19.addSubInstruction(sub_51);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAC9A856C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_20(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEACB5611C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_20 = new DataSub();
	reqAction.addDataSub(subContainer_20);

		ISubRule sub_52 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_351", null, 0, false);
	subContainer_20.addSubInstruction(sub_52);
		ISubRule sub_53 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_353", null, 0, false);
	subContainer_20.addSubInstruction(sub_53);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEACB5614C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_21(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEACC4089C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_21 = new DataSub();
	reqAction.addDataSub(subContainer_21);

		ISubRule sub_54 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_350", null, 0, false);
	subContainer_21.addSubInstruction(sub_54);
		ISubRule sub_55 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_352", null, 0, false);
	subContainer_21.addSubInstruction(sub_55);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEACC408CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_22(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEACDEE13C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_22 = new DataSub();
	reqAction.addDataSub(subContainer_22);

		ISubRule sub_56 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_349", null, 0, false);
	subContainer_22.addSubInstruction(sub_56);
		ISubRule sub_57 = new SubRule("req_uri", 0, 43, false, (IDCCoreVar)dcVars[20], false, "Office Depot OfficeM_url_83", null, 0, false);
	subContainer_22.addSubInstruction(sub_57);
		ISubRule sub_58 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_351", null, 0, false);
	subContainer_22.addSubInstruction(sub_58);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEACDEE16C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_23(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEACF4DA3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_23 = new DataSub();
	reqAction.addDataSub(subContainer_23);

		ISubRule sub_59 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_348", null, 0, false);
	subContainer_23.addSubInstruction(sub_59);
		ISubRule sub_60 = new SubRule("req_uri", 0, 66, false, (IDCCoreVar)dcVars[23], false, "Office Depot OfficeM_url_82", null, 0, false);
	subContainer_23.addSubInstruction(sub_60);
		ISubRule sub_61 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_350", null, 0, false);
	subContainer_23.addSubInstruction(sub_61);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEACF4DA6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_24(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEACFE9E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_24 = new DataSub();
	reqAction.addDataSub(subContainer_24);

		ISubRule sub_62 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_347", null, 0, false);
	subContainer_24.addSubInstruction(sub_62);
		ISubRule sub_63 = new SubRule("req_uri", 0, 45, false, (IDCCoreVar)dcVars[24], false, "Office Depot OfficeM_url_81", null, 0, false);
	subContainer_24.addSubInstruction(sub_63);
		ISubRule sub_64 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_349", null, 0, false);
	subContainer_24.addSubInstruction(sub_64);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEACFE9E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_25(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD0864BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_25 = new DataSub();
	reqAction.addDataSub(subContainer_25);

		ISubRule sub_65 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_346", null, 0, false);
	subContainer_25.addSubInstruction(sub_65);
		ISubRule sub_66 = new SubRule("req_uri", 0, 50, false, (IDCCoreVar)dcVars[83], false, "Office Depot OfficeM_url_80", null, 0, false);
	subContainer_25.addSubInstruction(sub_66);
		ISubRule sub_67 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_348", null, 0, false);
	subContainer_25.addSubInstruction(sub_67);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD0864EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_26(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD0FBA3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_26 = new DataSub();
	reqAction.addDataSub(subContainer_26);

		ISubRule sub_68 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_345", null, 0, false);
	subContainer_26.addSubInstruction(sub_68);
		ISubRule sub_69 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_347", null, 0, false);
	subContainer_26.addSubInstruction(sub_69);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD0FBA6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_27(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD19790C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_27 = new DataSub();
	reqAction.addDataSub(subContainer_27);

		ISubRule sub_70 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_344", null, 0, false);
	subContainer_27.addSubInstruction(sub_70);
		ISubRule sub_71 = new SubRule("req_uri", 0, 41, false, (IDCCoreVar)dcVars[84], false, "Office Depot OfficeM_url_79", null, 0, false);
	subContainer_27.addSubInstruction(sub_71);
		ISubRule sub_72 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_346", null, 0, false);
	subContainer_27.addSubInstruction(sub_72);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD19793C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_28(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD20CC0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_28 = new DataSub();
	reqAction.addDataSub(subContainer_28);

		ISubRule sub_73 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_343", null, 0, false);
	subContainer_28.addSubInstruction(sub_73);
		ISubRule sub_74 = new SubRule("req_uri", 0, 36, false, (IDCCoreVar)dcVars[85], false, "Office Depot OfficeM_url_78", null, 0, false);
	subContainer_28.addSubInstruction(sub_74);
		ISubRule sub_75 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_345", null, 0, false);
	subContainer_28.addSubInstruction(sub_75);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD20CC3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_29(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD28243C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_29 = new DataSub();
	reqAction.addDataSub(subContainer_29);

		ISubRule sub_76 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_342", null, 0, false);
	subContainer_29.addSubInstruction(sub_76);
		ISubRule sub_77 = new SubRule("req_uri", 0, 52, false, (IDCCoreVar)dcVars[90], false, "Office Depot OfficeM_url_77", null, 0, false);
	subContainer_29.addSubInstruction(sub_77);
		ISubRule sub_78 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_344", null, 0, false);
	subContainer_29.addSubInstruction(sub_78);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD2A900C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_30(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD39360C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_30 = new DataSub();
	reqAction.addDataSub(subContainer_30);

		ISubRule sub_79 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_341", null, 0, false);
	subContainer_30.addSubInstruction(sub_79);
		ISubRule sub_80 = new SubRule("req_uri", 0, 32, false, (IDCCoreVar)dcVars[86], false, "Office Depot OfficeM_url_76", null, 0, false);
	subContainer_30.addSubInstruction(sub_80);
		ISubRule sub_81 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_343", null, 0, false);
	subContainer_30.addSubInstruction(sub_81);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD39363C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_31(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD4A4D3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_31 = new DataSub();
	reqAction.addDataSub(subContainer_31);

		ISubRule sub_82 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_340", null, 0, false);
	subContainer_31.addSubInstruction(sub_82);
		ISubRule sub_83 = new SubRule("req_uri", 0, 50, false, (IDCCoreVar)dcVars[92], false, "Office Depot OfficeM_url_75", null, 0, false);
	subContainer_31.addSubInstruction(sub_83);
		ISubRule sub_84 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_342", null, 0, false);
	subContainer_31.addSubInstruction(sub_84);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD4A4D6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_32(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAD51A00C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_32 = new DataSub();
	reqAction.addDataSub(subContainer_32);

		ISubRule sub_85 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_339", null, 0, false);
	subContainer_32.addSubInstruction(sub_85);
		ISubRule sub_86 = new SubRule("req_uri", 0, 45, false, (IDCCoreVar)dcVars[93], false, "Office Depot OfficeM_url_74", null, 0, false);
	subContainer_32.addSubInstruction(sub_86);
		ISubRule sub_87 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_341", null, 0, false);
	subContainer_32.addSubInstruction(sub_87);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAD51A03C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_33(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAE93E40C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_33 = new DataSub();
	reqAction.addDataSub(subContainer_33);

		ISubRule sub_88 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_338", null, 0, false);
	subContainer_33.addSubInstruction(sub_88);
		ISubRule sub_89 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_340", null, 0, false);
	subContainer_33.addSubInstruction(sub_89);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAE93E43C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_34(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAE9DA83C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_34 = new DataSub();
	reqAction.addDataSub(subContainer_34);

		ISubRule sub_90 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_337", null, 0, false);
	subContainer_34.addSubInstruction(sub_90);
		ISubRule sub_91 = new SubRule("req_uri", 0, 48, false, (IDCCoreVar)dcVars[15], false, "Office Depot OfficeM_url_73", null, 0, false);
	subContainer_34.addSubInstruction(sub_91);
		ISubRule sub_92 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_339", null, 0, false);
	subContainer_34.addSubInstruction(sub_92);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAE9DA86C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_35(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAEA9DD3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_35 = new DataSub();
	reqAction.addDataSub(subContainer_35);

		ISubRule sub_93 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_336", null, 0, false);
	subContainer_35.addSubInstruction(sub_93);
		ISubRule sub_94 = new SubRule("req_uri", 0, 16, false, (IDCCoreVar)dcVars[19], false, "Office Depot OfficeM_url_72", null, 0, false);
	subContainer_35.addSubInstruction(sub_94);
		ISubRule sub_95 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_338", null, 0, false);
	subContainer_35.addSubInstruction(sub_95);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAEA9DD6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_36(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEAEB1311C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_36 = new DataSub();
	reqAction.addDataSub(subContainer_36);

		ISubRule sub_96 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_335", null, 0, false);
	subContainer_36.addSubInstruction(sub_96);
		ISubRule sub_97 = new SubRule("req_uri", 0, 47, false, (IDCCoreVar)dcVars[25], false, "Office Depot OfficeM_url_71", null, 0, false);
	subContainer_36.addSubInstruction(sub_97);
		ISubRule sub_98 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_337", null, 0, false);
	subContainer_36.addSubInstruction(sub_98);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEAEB1314C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_37(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB088610C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_37 = new DataSub();
	reqAction.addDataSub(subContainer_37);

		ISubRule sub_99 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_334", null, 0, false);
	subContainer_37.addSubInstruction(sub_99);
		ISubRule sub_100 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_336", null, 0, false);
	subContainer_37.addSubInstruction(sub_100);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB088613C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_38(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB08D47BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_38 = new DataSub();
	reqAction.addDataSub(subContainer_38);

		ISubRule sub_101 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_333", null, 0, false);
	subContainer_38.addSubInstruction(sub_101);
		ISubRule sub_102 = new SubRule("req_uri", 0, 52, false, (IDCCoreVar)dcVars[26], false, "Office Depot OfficeM_url_70", null, 0, false);
	subContainer_38.addSubInstruction(sub_102);
		ISubRule sub_103 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_335", null, 0, false);
	subContainer_38.addSubInstruction(sub_103);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB08D47EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_39(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB094960C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_39 = new DataSub();
	reqAction.addDataSub(subContainer_39);

		ISubRule sub_104 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_332", null, 0, false);
	subContainer_39.addSubInstruction(sub_104);
		ISubRule sub_105 = new SubRule("req_uri", 0, 50, false, (IDCCoreVar)dcVars[27], false, "Office Depot OfficeM_url_69", null, 0, false);
	subContainer_39.addSubInstruction(sub_105);
		ISubRule sub_106 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_334", null, 0, false);
	subContainer_39.addSubInstruction(sub_106);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB094963C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_40(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB099780C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/resource/css/5752/b373928af1d699ec7ecd59634738a191/officedepot.css", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_40 = new DataSub();
	reqAction.addDataSub(subContainer_40);

		ISubRule sub_107 = new SubRule("req_hdr_Referer_1", 0, 94, false, (IDCCoreVar)dcVars[95], false, "Referer_331", null, 0, false);
	subContainer_40.addSubInstruction(sub_107);
		ISubRule sub_108 = new SubRule("req_uri", 0, 74, false, (IDCCoreVar)dcVars[96], false, "Office Depot OfficeM_url_68", null, 0, false);
	subContainer_40.addSubInstruction(sub_108);
		ISubRule sub_109 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_333", null, 0, false);
	subContainer_40.addSubInstruction(sub_109);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAB92DB7C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAB92DB7C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB099783C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif;charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_41(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB09E5A3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_41 = new DataSub();
	reqAction.addDataSub(subContainer_41);

		ISubRule sub_110 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_330", null, 0, false);
	subContainer_41.addSubInstruction(sub_110);
		ISubRule sub_111 = new SubRule("req_uri", 0, 78, false, (IDCCoreVar)dcVars[34], false, "Office Depot OfficeM_url_67", null, 0, false);
	subContainer_41.addSubInstruction(sub_111);
		ISubRule sub_112 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_332", null, 0, false);
	subContainer_41.addSubInstruction(sub_112);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB09E5A6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_42(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB0A3403C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_6 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_6);

	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[98], "&mapBySkuId=(.*?)&", 1, 1, 0, 0, false, "mapBySkuId_8", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[99], "/media\\.officedepot\\.com(.*?)\"", 12, 10, 0, 0, false, "media.officedepot.com_63", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[100], "/media\\.officedepot\\.com(.*?)\"", 14, 2, 0, 0, false, "media.officedepot.com_62", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[101], "/media\\.officedepot\\.com(.*?)\"", 15, 1, 0, 0, false, "media.officedepot.com_61", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[102], "/media\\.officedepot\\.com(.*?)\"", 16, 1, 0, 0, false, "media.officedepot.com_60", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[103], "/media\\.officedepot\\.com(.*?)\"", 17, 1, 0, 0, false, "media.officedepot.com_59", null, 0, false);
	harvestContainer_6.addHarvestInstruction ("resp_content", dcVars[104], "/media\\.officedepot\\.com(.*?)\"", 18, 1, 0, 0, false, "media.officedepot.com_58", null, 0, false);
	IDataSub subContainer_42 = new DataSub();
	reqAction.addDataSub(subContainer_42);

		ISubRule sub_113 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_329", null, 0, false);
	subContainer_42.addSubInstruction(sub_113);
		ISubRule sub_114 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_331", null, 0, false);
	subContainer_42.addSubInstruction(sub_114);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB0A5AD0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_43(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB115FB3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_43 = new DataSub();
	reqAction.addDataSub(subContainer_43);

		ISubRule sub_115 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_328", null, 0, false);
	subContainer_43.addSubInstruction(sub_115);
		ISubRule sub_116 = new SubRule("req_uri", 0, 50, false, (IDCCoreVar)dcVars[28], false, "Office Depot OfficeM_url_66", null, 0, false);
	subContainer_43.addSubInstruction(sub_116);
		ISubRule sub_117 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_330", null, 0, false);
	subContainer_43.addSubInstruction(sub_117);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB115FB6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_44(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB12BF43C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_44 = new DataSub();
	reqAction.addDataSub(subContainer_44);

		ISubRule sub_118 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_327", null, 0, false);
	subContainer_44.addSubInstruction(sub_118);
		ISubRule sub_119 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_329", null, 0, false);
	subContainer_44.addSubInstruction(sub_119);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB12BF46C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_45(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB157E60C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_45 = new DataSub();
	reqAction.addDataSub(subContainer_45);

		ISubRule sub_120 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_326", null, 0, false);
	subContainer_45.addSubInstruction(sub_120);
		ISubRule sub_121 = new SubRule("req_uri", 0, 37, false, (IDCCoreVar)dcVars[88], false, "Office Depot OfficeM_url_65", null, 0, false);
	subContainer_45.addSubInstruction(sub_121);
		ISubRule sub_122 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_328", null, 0, false);
	subContainer_45.addSubInstruction(sub_122);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB157E63C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_46(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB161AD0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_46 = new DataSub();
	reqAction.addDataSub(subContainer_46);

		ISubRule sub_123 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_325", null, 0, false);
	subContainer_46.addSubInstruction(sub_123);
		ISubRule sub_124 = new SubRule("req_uri", 0, 143, false, (IDCCoreVar)dcVars[29], false, "Office Depot OfficeM_url_64", null, 0, false);
	subContainer_46.addSubInstruction(sub_124);
		ISubRule sub_125 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_327", null, 0, false);
	subContainer_46.addSubInstruction(sub_125);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB161AD3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_47(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB17EF63C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_47 = new DataSub();
	reqAction.addDataSub(subContainer_47);

		ISubRule sub_126 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_324", null, 0, false);
	subContainer_47.addSubInstruction(sub_126);
		ISubRule sub_127 = new SubRule("req_uri", 0, 47, false, (IDCCoreVar)dcVars[89], false, "Office Depot OfficeM_url_63", null, 0, false);
	subContainer_47.addSubInstruction(sub_127);
		ISubRule sub_128 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_326", null, 0, false);
	subContainer_47.addSubInstruction(sub_128);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB17EF66C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_48(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1900D3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_48 = new DataSub();
	reqAction.addDataSub(subContainer_48);

		ISubRule sub_129 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_323", null, 0, false);
	subContainer_48.addSubInstruction(sub_129);
		ISubRule sub_130 = new SubRule("req_uri", 0, 78, false, (IDCCoreVar)dcVars[35], false, "Office Depot OfficeM_url_62", null, 0, false);
	subContainer_48.addSubInstruction(sub_130);
		ISubRule sub_131 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_325", null, 0, false);
	subContainer_48.addSubInstruction(sub_131);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1900D6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_49(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB197651C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_49 = new DataSub();
	reqAction.addDataSub(subContainer_49);

		ISubRule sub_132 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_322", null, 0, false);
	subContainer_49.addSubInstruction(sub_132);
		ISubRule sub_133 = new SubRule("req_uri", 0, 134, false, (IDCCoreVar)dcVars[32], false, "Office Depot OfficeM_url_61", null, 0, false);
	subContainer_49.addSubInstruction(sub_133);
		ISubRule sub_134 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_324", null, 0, false);
	subContainer_49.addSubInstruction(sub_134);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB197654C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_50(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1A8773C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_50 = new DataSub();
	reqAction.addDataSub(subContainer_50);

		ISubRule sub_135 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_321", null, 0, false);
	subContainer_50.addSubInstruction(sub_135);
		ISubRule sub_136 = new SubRule("req_uri", 0, 41, false, (IDCCoreVar)dcVars[91], false, "Office Depot OfficeM_url_60", null, 0, false);
	subContainer_50.addSubInstruction(sub_136);
		ISubRule sub_137 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_323", null, 0, false);
	subContainer_50.addSubInstruction(sub_137);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1A8776C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_51(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1B23C1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_51 = new DataSub();
	reqAction.addDataSub(subContainer_51);

		ISubRule sub_138 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_320", null, 0, false);
	subContainer_51.addSubInstruction(sub_138);
		ISubRule sub_139 = new SubRule("req_uri", 0, 76, false, (IDCCoreVar)dcVars[33], false, "Office Depot OfficeM_url_59", null, 0, false);
	subContainer_51.addSubInstruction(sub_139);
		ISubRule sub_140 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_322", null, 0, false);
	subContainer_51.addSubInstruction(sub_140);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1B23C4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_52(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1B98E3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_52 = new DataSub();
	reqAction.addDataSub(subContainer_52);

		ISubRule sub_141 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_319", null, 0, false);
	subContainer_52.addSubInstruction(sub_141);
		ISubRule sub_142 = new SubRule("req_uri", 0, 151, false, (IDCCoreVar)dcVars[31], false, "Office Depot OfficeM_url_58", null, 0, false);
	subContainer_52.addSubInstruction(sub_142);
		ISubRule sub_143 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_321", null, 0, false);
	subContainer_52.addSubInstruction(sub_143);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1B98E6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_53(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1DE2E1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_53 = new DataSub();
	reqAction.addDataSub(subContainer_53);

		ISubRule sub_144 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_318", null, 0, false);
	subContainer_53.addSubInstruction(sub_144);
		ISubRule sub_145 = new SubRule("req_uri", 0, 135, false, (IDCCoreVar)dcVars[30], false, "Office Depot OfficeM_url_57", null, 0, false);
	subContainer_53.addSubInstruction(sub_145);
		ISubRule sub_146 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_320", null, 0, false);
	subContainer_53.addSubInstruction(sub_146);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1DE2E4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_54(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1F4271C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_54 = new DataSub();
	reqAction.addDataSub(subContainer_54);

		ISubRule sub_147 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_317", null, 0, false);
	subContainer_54.addSubInstruction(sub_147);
		ISubRule sub_148 = new SubRule("req_uri", 0, 52, false, (IDCCoreVar)dcVars[99], false, "Office Depot OfficeM_url_56", null, 0, false);
	subContainer_54.addSubInstruction(sub_148);
		ISubRule sub_149 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_319", null, 0, false);
	subContainer_54.addSubInstruction(sub_149);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB0A3403C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1F4274C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_55(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1FB795C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_55 = new DataSub();
	reqAction.addDataSub(subContainer_55);

		ISubRule sub_150 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_316", null, 0, false);
	subContainer_55.addSubInstruction(sub_150);
		ISubRule sub_151 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_318", null, 0, false);
	subContainer_55.addSubInstruction(sub_151);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1FB798C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_56(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB1FDEE3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_56 = new DataSub();
	reqAction.addDataSub(subContainer_56);

		ISubRule sub_152 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_315", null, 0, false);
	subContainer_56.addSubInstruction(sub_152);
		ISubRule sub_153 = new SubRule("req_uri", 0, 49, false, (IDCCoreVar)dcVars[100], false, "Office Depot OfficeM_url_55", null, 0, false);
	subContainer_56.addSubInstruction(sub_153);
		ISubRule sub_154 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_317", null, 0, false);
	subContainer_56.addSubInstruction(sub_154);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB0A3403C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB1FDEE6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_57(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2005F3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_57 = new DataSub();
	reqAction.addDataSub(subContainer_57);

		ISubRule sub_155 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_314", null, 0, false);
	subContainer_57.addSubInstruction(sub_155);
		ISubRule sub_156 = new SubRule("req_uri", 0, 49, false, (IDCCoreVar)dcVars[101], false, "Office Depot OfficeM_url_54", null, 0, false);
	subContainer_57.addSubInstruction(sub_156);
		ISubRule sub_157 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_316", null, 0, false);
	subContainer_57.addSubInstruction(sub_157);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB0A3403C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB202CC0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_58(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB205413C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_58 = new DataSub();
	reqAction.addDataSub(subContainer_58);

		ISubRule sub_158 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_313", null, 0, false);
	subContainer_58.addSubInstruction(sub_158);
		ISubRule sub_159 = new SubRule("req_uri", 0, 48, false, (IDCCoreVar)dcVars[102], false, "Office Depot OfficeM_url_53", null, 0, false);
	subContainer_58.addSubInstruction(sub_159);
		ISubRule sub_160 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_315", null, 0, false);
	subContainer_58.addSubInstruction(sub_160);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB0A3403C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB205416C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_59(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB20A233C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_59 = new DataSub();
	reqAction.addDataSub(subContainer_59);

		ISubRule sub_161 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_312", null, 0, false);
	subContainer_59.addSubInstruction(sub_161);
		ISubRule sub_162 = new SubRule("req_uri", 0, 51, false, (IDCCoreVar)dcVars[103], false, "Office Depot OfficeM_url_52", null, 0, false);
	subContainer_59.addSubInstruction(sub_162);
		ISubRule sub_163 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_314", null, 0, false);
	subContainer_59.addSubInstruction(sub_163);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB0A3403C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB20C900C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_60(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB211720C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_60 = new DataSub();
	reqAction.addDataSub(subContainer_60);

		ISubRule sub_164 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_311", null, 0, false);
	subContainer_60.addSubInstruction(sub_164);
		ISubRule sub_165 = new SubRule("req_uri", 0, 47, false, (IDCCoreVar)dcVars[104], false, "Office Depot OfficeM_url_51", null, 0, false);
	subContainer_60.addSubInstruction(sub_165);
		ISubRule sub_166 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_313", null, 0, false);
	subContainer_60.addSubInstruction(sub_166);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB0A3403C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB211723C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_61(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB216577C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_61 = new DataSub();
	reqAction.addDataSub(subContainer_61);

		ISubRule sub_167 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_310", null, 0, false);
	subContainer_61.addSubInstruction(sub_167);
		ISubRule sub_168 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_312", null, 0, false);
	subContainer_61.addSubInstruction(sub_168);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB21657AC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_62(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB21B393C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_62 = new DataSub();
	reqAction.addDataSub(subContainer_62);

		ISubRule sub_169 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_309", null, 0, false);
	subContainer_62.addSubInstruction(sub_169);
		ISubRule sub_170 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_311", null, 0, false);
	subContainer_62.addSubInstruction(sub_170);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB21B396C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_63(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2201CBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_63 = new DataSub();
	reqAction.addDataSub(subContainer_63);

		ISubRule sub_171 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_308", null, 0, false);
	subContainer_63.addSubInstruction(sub_171);
		ISubRule sub_172 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_310", null, 0, false);
	subContainer_63.addSubInstruction(sub_172);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2201CEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_64(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB224FE9C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_64 = new DataSub();
	reqAction.addDataSub(subContainer_64);

		ISubRule sub_173 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_307", null, 0, false);
	subContainer_64.addSubInstruction(sub_173);
		ISubRule sub_174 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_309", null, 0, false);
	subContainer_64.addSubInstruction(sub_174);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB224FECC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_65(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB229DD3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_65 = new DataSub();
	reqAction.addDataSub(subContainer_65);

		ISubRule sub_175 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_306", null, 0, false);
	subContainer_65.addSubInstruction(sub_175);
		ISubRule sub_176 = new SubRule("req_uri", 0, 136, false, (IDCCoreVar)dcVars[38], false, "Office Depot OfficeM_url_50", null, 0, false);
	subContainer_65.addSubInstruction(sub_176);
		ISubRule sub_177 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_308", null, 0, false);
	subContainer_65.addSubInstruction(sub_177);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB229DD6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_66(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB22EBFBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_66 = new DataSub();
	reqAction.addDataSub(subContainer_66);

		ISubRule sub_178 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_305", null, 0, false);
	subContainer_66.addSubInstruction(sub_178);
		ISubRule sub_179 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[45], false, "Office Depot OfficeM_url_49", null, 0, false);
	subContainer_66.addSubInstruction(sub_179);
		ISubRule sub_180 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_307", null, 0, false);
	subContainer_66.addSubInstruction(sub_180);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB22EBFEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_67(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB233A4BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_67 = new DataSub();
	reqAction.addDataSub(subContainer_67);

		ISubRule sub_181 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_304", null, 0, false);
	subContainer_67.addSubInstruction(sub_181);
		ISubRule sub_182 = new SubRule("req_uri", 0, 73, false, (IDCCoreVar)dcVars[42], false, "Office Depot OfficeM_url_48", null, 0, false);
	subContainer_67.addSubInstruction(sub_182);
		ISubRule sub_183 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_306", null, 0, false);
	subContainer_67.addSubInstruction(sub_183);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB233A4EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_68(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB23886BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_68 = new DataSub();
	reqAction.addDataSub(subContainer_68);

		ISubRule sub_184 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_303", null, 0, false);
	subContainer_68.addSubInstruction(sub_184);
		ISubRule sub_185 = new SubRule("req_uri", 0, 75, false, (IDCCoreVar)dcVars[41], false, "Office Depot OfficeM_url_47", null, 0, false);
	subContainer_68.addSubInstruction(sub_185);
		ISubRule sub_186 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_305", null, 0, false);
	subContainer_68.addSubInstruction(sub_186);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB23886EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_69(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB24246BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_69 = new DataSub();
	reqAction.addDataSub(subContainer_69);

		ISubRule sub_187 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_302", null, 0, false);
	subContainer_69.addSubInstruction(sub_187);
		ISubRule sub_188 = new SubRule("req_uri", 0, 131, false, (IDCCoreVar)dcVars[37], false, "Office Depot OfficeM_url_46", null, 0, false);
	subContainer_69.addSubInstruction(sub_188);
		ISubRule sub_189 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_304", null, 0, false);
	subContainer_69.addSubInstruction(sub_189);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB24246EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_70(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2535D0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_70 = new DataSub();
	reqAction.addDataSub(subContainer_70);

		ISubRule sub_190 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_301", null, 0, false);
	subContainer_70.addSubInstruction(sub_190);
		ISubRule sub_191 = new SubRule("req_uri", 0, 145, false, (IDCCoreVar)dcVars[36], false, "Office Depot OfficeM_url_45", null, 0, false);
	subContainer_70.addSubInstruction(sub_191);
		ISubRule sub_192 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_303", null, 0, false);
	subContainer_70.addSubInstruction(sub_192);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2535D3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_71(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB25AB03C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_71 = new DataSub();
	reqAction.addDataSub(subContainer_71);

		ISubRule sub_193 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_300", null, 0, false);
	subContainer_71.addSubInstruction(sub_193);
		ISubRule sub_194 = new SubRule("req_uri", 0, 85, false, (IDCCoreVar)dcVars[43], false, "Office Depot OfficeM_url_44", null, 0, false);
	subContainer_71.addSubInstruction(sub_194);
		ISubRule sub_195 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_302", null, 0, false);
	subContainer_71.addSubInstruction(sub_195);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB25AB06C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_72(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB25D25BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_72 = new DataSub();
	reqAction.addDataSub(subContainer_72);

		ISubRule sub_196 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_299", null, 0, false);
	subContainer_72.addSubInstruction(sub_196);
		ISubRule sub_197 = new SubRule("req_uri", 0, 71, false, (IDCCoreVar)dcVars[44], false, "Office Depot OfficeM_url_43", null, 0, false);
	subContainer_72.addSubInstruction(sub_197);
		ISubRule sub_198 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_301", null, 0, false);
	subContainer_72.addSubInstruction(sub_198);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB25D25EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_73(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB262033C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_73 = new DataSub();
	reqAction.addDataSub(subContainer_73);

		ISubRule sub_199 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_298", null, 0, false);
	subContainer_73.addSubInstruction(sub_199);
		ISubRule sub_200 = new SubRule("req_uri", 0, 153, false, (IDCCoreVar)dcVars[39], false, "Office Depot OfficeM_url_42", null, 0, false);
	subContainer_73.addSubInstruction(sub_200);
		ISubRule sub_201 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_300", null, 0, false);
	subContainer_73.addSubInstruction(sub_201);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB262036C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_74(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB269560C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_74 = new DataSub();
	reqAction.addDataSub(subContainer_74);

		ISubRule sub_202 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_297", null, 0, false);
	subContainer_74.addSubInstruction(sub_202);
		ISubRule sub_203 = new SubRule("req_uri", 0, 74, false, (IDCCoreVar)dcVars[40], false, "Office Depot OfficeM_url_41", null, 0, false);
	subContainer_74.addSubInstruction(sub_203);
		ISubRule sub_204 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_299", null, 0, false);
	subContainer_74.addSubInstruction(sub_204);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB269563C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_75(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB26E383C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_75 = new DataSub();
	reqAction.addDataSub(subContainer_75);

		ISubRule sub_205 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_296", null, 0, false);
	subContainer_75.addSubInstruction(sub_205);
		ISubRule sub_206 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_298", null, 0, false);
	subContainer_75.addSubInstruction(sub_206);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB26E386C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_76(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2731A0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_76 = new DataSub();
	reqAction.addDataSub(subContainer_76);

		ISubRule sub_207 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_295", null, 0, false);
	subContainer_76.addSubInstruction(sub_207);
		ISubRule sub_208 = new SubRule("req_uri", 0, 82, false, (IDCCoreVar)dcVars[46], false, "Office Depot OfficeM_url_40", null, 0, false);
	subContainer_76.addSubInstruction(sub_208);
		ISubRule sub_209 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_297", null, 0, false);
	subContainer_76.addSubInstruction(sub_209);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2731A3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_77(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2758FBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_77 = new DataSub();
	reqAction.addDataSub(subContainer_77);

		ISubRule sub_210 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_294", null, 0, false);
	subContainer_77.addSubInstruction(sub_210);
		ISubRule sub_211 = new SubRule("req_uri", 0, 90, false, (IDCCoreVar)dcVars[47], false, "Office Depot OfficeM_url_39", null, 0, false);
	subContainer_77.addSubInstruction(sub_211);
		ISubRule sub_212 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_296", null, 0, false);
	subContainer_77.addSubInstruction(sub_212);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB277FC0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_78(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB27A71BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_78 = new DataSub();
	reqAction.addDataSub(subContainer_78);

		ISubRule sub_213 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_293", null, 0, false);
	subContainer_78.addSubInstruction(sub_213);
		ISubRule sub_214 = new SubRule("req_uri", 0, 95, false, (IDCCoreVar)dcVars[48], false, "Office Depot OfficeM_url_38", null, 0, false);
	subContainer_78.addSubInstruction(sub_214);
		ISubRule sub_215 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_295", null, 0, false);
	subContainer_78.addSubInstruction(sub_215);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB27A71EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_79(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB27F4F5C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_79 = new DataSub();
	reqAction.addDataSub(subContainer_79);

		ISubRule sub_216 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_292", null, 0, false);
	subContainer_79.addSubInstruction(sub_216);
		ISubRule sub_217 = new SubRule("req_uri", 0, 71, false, (IDCCoreVar)dcVars[49], false, "Office Depot OfficeM_url_37", null, 0, false);
	subContainer_79.addSubInstruction(sub_217);
		ISubRule sub_218 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_294", null, 0, false);
	subContainer_79.addSubInstruction(sub_218);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB27F4F8C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_80(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB284310C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_80 = new DataSub();
	reqAction.addDataSub(subContainer_80);

		ISubRule sub_219 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_291", null, 0, false);
	subContainer_80.addSubInstruction(sub_219);
		ISubRule sub_220 = new SubRule("req_uri", 0, 78, false, (IDCCoreVar)dcVars[50], false, "Office Depot OfficeM_url_36", null, 0, false);
	subContainer_80.addSubInstruction(sub_220);
		ISubRule sub_221 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_293", null, 0, false);
	subContainer_80.addSubInstruction(sub_221);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB284313C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_81(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB286A6BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_81 = new DataSub();
	reqAction.addDataSub(subContainer_81);

		ISubRule sub_222 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_290", null, 0, false);
	subContainer_81.addSubInstruction(sub_222);
		ISubRule sub_223 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[51], false, "Office Depot OfficeM_url_35", null, 0, false);
	subContainer_81.addSubInstruction(sub_223);
		ISubRule sub_224 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_292", null, 0, false);
	subContainer_81.addSubInstruction(sub_224);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB286A6EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_82(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB28B88BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_82 = new DataSub();
	reqAction.addDataSub(subContainer_82);

		ISubRule sub_225 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_289", null, 0, false);
	subContainer_82.addSubInstruction(sub_225);
		ISubRule sub_226 = new SubRule("req_uri", 0, 72, false, (IDCCoreVar)dcVars[52], false, "Office Depot OfficeM_url_34", null, 0, false);
	subContainer_82.addSubInstruction(sub_226);
		ISubRule sub_227 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_291", null, 0, false);
	subContainer_82.addSubInstruction(sub_227);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB28B88EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_83(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2906ABC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_83 = new DataSub();
	reqAction.addDataSub(subContainer_83);

		ISubRule sub_228 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_288", null, 0, false);
	subContainer_83.addSubInstruction(sub_228);
		ISubRule sub_229 = new SubRule("req_uri", 0, 80, false, (IDCCoreVar)dcVars[53], false, "Office Depot OfficeM_url_33", null, 0, false);
	subContainer_83.addSubInstruction(sub_229);
		ISubRule sub_230 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_290", null, 0, false);
	subContainer_83.addSubInstruction(sub_230);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2906AEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_84(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2954C7C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_84 = new DataSub();
	reqAction.addDataSub(subContainer_84);

		ISubRule sub_231 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_287", null, 0, false);
	subContainer_84.addSubInstruction(sub_231);
		ISubRule sub_232 = new SubRule("req_uri", 0, 139, false, (IDCCoreVar)dcVars[54], false, "Office Depot OfficeM_url_32", null, 0, false);
	subContainer_84.addSubInstruction(sub_232);
		ISubRule sub_233 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_289", null, 0, false);
	subContainer_84.addSubInstruction(sub_233);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2954CAC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_85(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB29C9B0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_85 = new DataSub();
	reqAction.addDataSub(subContainer_85);

		ISubRule sub_234 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_286", null, 0, false);
	subContainer_85.addSubInstruction(sub_234);
		ISubRule sub_235 = new SubRule("req_uri", 0, 121, false, (IDCCoreVar)dcVars[55], false, "Office Depot OfficeM_url_31", null, 0, false);
	subContainer_85.addSubInstruction(sub_235);
		ISubRule sub_236 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_288", null, 0, false);
	subContainer_85.addSubInstruction(sub_236);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB29C9B3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_86(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2A17D0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_86 = new DataSub();
	reqAction.addDataSub(subContainer_86);

		ISubRule sub_237 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_285", null, 0, false);
	subContainer_86.addSubInstruction(sub_237);
		ISubRule sub_238 = new SubRule("req_uri", 0, 111, false, (IDCCoreVar)dcVars[56], false, "Office Depot OfficeM_url_30", null, 0, false);
	subContainer_86.addSubInstruction(sub_238);
		ISubRule sub_239 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_287", null, 0, false);
	subContainer_86.addSubInstruction(sub_239);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2A17D3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_87(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2AB410C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_87 = new DataSub();
	reqAction.addDataSub(subContainer_87);

		ISubRule sub_240 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_284", null, 0, false);
	subContainer_87.addSubInstruction(sub_240);
		ISubRule sub_241 = new SubRule("req_uri", 0, 135, false, (IDCCoreVar)dcVars[57], false, "Office Depot OfficeM_url_29", null, 0, false);
	subContainer_87.addSubInstruction(sub_241);
		ISubRule sub_242 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_286", null, 0, false);
	subContainer_87.addSubInstruction(sub_242);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2AB413C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_88(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2B5050C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_88 = new DataSub();
	reqAction.addDataSub(subContainer_88);

		ISubRule sub_243 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_283", null, 0, false);
	subContainer_88.addSubInstruction(sub_243);
		ISubRule sub_244 = new SubRule("req_uri", 0, 116, false, (IDCCoreVar)dcVars[58], false, "Office Depot OfficeM_url_28", null, 0, false);
	subContainer_88.addSubInstruction(sub_244);
		ISubRule sub_245 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_285", null, 0, false);
	subContainer_88.addSubInstruction(sub_245);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2B5053C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_89(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2BC583C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_89 = new DataSub();
	reqAction.addDataSub(subContainer_89);

		ISubRule sub_246 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_282", null, 0, false);
	subContainer_89.addSubInstruction(sub_246);
		ISubRule sub_247 = new SubRule("req_uri", 0, 109, false, (IDCCoreVar)dcVars[59], false, "Office Depot OfficeM_url_27", null, 0, false);
	subContainer_89.addSubInstruction(sub_247);
		ISubRule sub_248 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_284", null, 0, false);
	subContainer_89.addSubInstruction(sub_248);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2BC586C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_90(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2C13EBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_90 = new DataSub();
	reqAction.addDataSub(subContainer_90);

		ISubRule sub_249 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_281", null, 0, false);
	subContainer_90.addSubInstruction(sub_249);
		ISubRule sub_250 = new SubRule("req_uri", 0, 110, false, (IDCCoreVar)dcVars[60], false, "Office Depot OfficeM_url_26", null, 0, false);
	subContainer_90.addSubInstruction(sub_250);
		ISubRule sub_251 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_283", null, 0, false);
	subContainer_90.addSubInstruction(sub_251);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2C13EEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_91(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2C620BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_91 = new DataSub();
	reqAction.addDataSub(subContainer_91);

		ISubRule sub_252 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_280", null, 0, false);
	subContainer_91.addSubInstruction(sub_252);
		ISubRule sub_253 = new SubRule("req_uri", 0, 110, false, (IDCCoreVar)dcVars[61], false, "Office Depot OfficeM_url_25", null, 0, false);
	subContainer_91.addSubInstruction(sub_253);
		ISubRule sub_254 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_282", null, 0, false);
	subContainer_91.addSubInstruction(sub_254);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2C620EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_92(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2CB02BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_92 = new DataSub();
	reqAction.addDataSub(subContainer_92);

		ISubRule sub_255 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_279", null, 0, false);
	subContainer_92.addSubInstruction(sub_255);
		ISubRule sub_256 = new SubRule("req_uri", 0, 121, false, (IDCCoreVar)dcVars[62], false, "Office Depot OfficeM_url_24", null, 0, false);
	subContainer_92.addSubInstruction(sub_256);
		ISubRule sub_257 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_281", null, 0, false);
	subContainer_92.addSubInstruction(sub_257);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2CB02EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_93(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2D9A40C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_93 = new DataSub();
	reqAction.addDataSub(subContainer_93);

		ISubRule sub_258 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_278", null, 0, false);
	subContainer_93.addSubInstruction(sub_258);
		ISubRule sub_259 = new SubRule("req_uri", 0, 116, false, (IDCCoreVar)dcVars[63], false, "Office Depot OfficeM_url_23", null, 0, false);
	subContainer_93.addSubInstruction(sub_259);
		ISubRule sub_260 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_280", null, 0, false);
	subContainer_93.addSubInstruction(sub_260);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2D9A43C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_94(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2DE887C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_94 = new DataSub();
	reqAction.addDataSub(subContainer_94);

		ISubRule sub_261 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_277", null, 0, false);
	subContainer_94.addSubInstruction(sub_261);
		ISubRule sub_262 = new SubRule("req_uri", 0, 106, false, (IDCCoreVar)dcVars[64], false, "Office Depot OfficeM_url_22", null, 0, false);
	subContainer_94.addSubInstruction(sub_262);
		ISubRule sub_263 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_279", null, 0, false);
	subContainer_94.addSubInstruction(sub_263);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2DE88AC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_95(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2E5D90C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_95 = new DataSub();
	reqAction.addDataSub(subContainer_95);

		ISubRule sub_264 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_276", null, 0, false);
	subContainer_95.addSubInstruction(sub_264);
		ISubRule sub_265 = new SubRule("req_uri", 0, 134, false, (IDCCoreVar)dcVars[65], false, "Office Depot OfficeM_url_21", null, 0, false);
	subContainer_95.addSubInstruction(sub_265);
		ISubRule sub_266 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_278", null, 0, false);
	subContainer_95.addSubInstruction(sub_266);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2E5D93C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_96(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2EABB3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_96 = new DataSub();
	reqAction.addDataSub(subContainer_96);

		ISubRule sub_267 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_275", null, 0, false);
	subContainer_96.addSubInstruction(sub_267);
		ISubRule sub_268 = new SubRule("req_uri", 0, 104, false, (IDCCoreVar)dcVars[66], false, "Office Depot OfficeM_url_20", null, 0, false);
	subContainer_96.addSubInstruction(sub_268);
		ISubRule sub_269 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_277", null, 0, false);
	subContainer_96.addSubInstruction(sub_269);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2EABB6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_97(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2EF9D3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_97 = new DataSub();
	reqAction.addDataSub(subContainer_97);

		ISubRule sub_270 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_274", null, 0, false);
	subContainer_97.addSubInstruction(sub_270);
		ISubRule sub_271 = new SubRule("req_uri", 0, 112, false, (IDCCoreVar)dcVars[67], false, "Office Depot OfficeM_url_19", null, 0, false);
	subContainer_97.addSubInstruction(sub_271);
		ISubRule sub_272 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_276", null, 0, false);
	subContainer_97.addSubInstruction(sub_272);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2EF9D6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_98(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2F47F3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_98 = new DataSub();
	reqAction.addDataSub(subContainer_98);

		ISubRule sub_273 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_273", null, 0, false);
	subContainer_98.addSubInstruction(sub_273);
		ISubRule sub_274 = new SubRule("req_uri", 0, 117, false, (IDCCoreVar)dcVars[68], false, "Office Depot OfficeM_url_18", null, 0, false);
	subContainer_98.addSubInstruction(sub_274);
		ISubRule sub_275 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_275", null, 0, false);
	subContainer_98.addSubInstruction(sub_275);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2F47F6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_99(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2F9613C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_99 = new DataSub();
	reqAction.addDataSub(subContainer_99);

		ISubRule sub_276 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_272", null, 0, false);
	subContainer_99.addSubInstruction(sub_276);
		ISubRule sub_277 = new SubRule("req_uri", 0, 112, false, (IDCCoreVar)dcVars[69], false, "Office Depot OfficeM_url_17", null, 0, false);
	subContainer_99.addSubInstruction(sub_277);
		ISubRule sub_278 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_274", null, 0, false);
	subContainer_99.addSubInstruction(sub_278);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2F9616C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_100(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB2FE473C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_100 = new DataSub();
	reqAction.addDataSub(subContainer_100);

		ISubRule sub_279 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_271", null, 0, false);
	subContainer_100.addSubInstruction(sub_279);
		ISubRule sub_280 = new SubRule("req_uri", 0, 108, false, (IDCCoreVar)dcVars[70], false, "Office Depot OfficeM_url_16", null, 0, false);
	subContainer_100.addSubInstruction(sub_280);
		ISubRule sub_281 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_273", null, 0, false);
	subContainer_100.addSubInstruction(sub_281);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB2FE476C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_101(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB30329BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_101 = new DataSub();
	reqAction.addDataSub(subContainer_101);

		ISubRule sub_282 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_270", null, 0, false);
	subContainer_101.addSubInstruction(sub_282);
		ISubRule sub_283 = new SubRule("req_uri", 0, 108, false, (IDCCoreVar)dcVars[71], false, "Office Depot OfficeM_url_15", null, 0, false);
	subContainer_101.addSubInstruction(sub_283);
		ISubRule sub_284 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_272", null, 0, false);
	subContainer_101.addSubInstruction(sub_284);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB30329EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_102(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB30CE90C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_102 = new DataSub();
	reqAction.addDataSub(subContainer_102);

		ISubRule sub_285 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_269", null, 0, false);
	subContainer_102.addSubInstruction(sub_285);
		ISubRule sub_286 = new SubRule("req_uri", 0, 110, false, (IDCCoreVar)dcVars[72], false, "Office Depot OfficeM_url_14", null, 0, false);
	subContainer_102.addSubInstruction(sub_286);
		ISubRule sub_287 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_271", null, 0, false);
	subContainer_102.addSubInstruction(sub_287);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB30CE93C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_103(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB311CB3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_103 = new DataSub();
	reqAction.addDataSub(subContainer_103);

		ISubRule sub_288 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_268", null, 0, false);
	subContainer_103.addSubInstruction(sub_288);
		ISubRule sub_289 = new SubRule("req_uri", 0, 117, false, (IDCCoreVar)dcVars[73], false, "Office Depot OfficeM_url_13", null, 0, false);
	subContainer_103.addSubInstruction(sub_289);
		ISubRule sub_290 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_270", null, 0, false);
	subContainer_103.addSubInstruction(sub_290);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB311CB6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_104(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB316AD3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_104 = new DataSub();
	reqAction.addDataSub(subContainer_104);

		ISubRule sub_291 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_267", null, 0, false);
	subContainer_104.addSubInstruction(sub_291);
		ISubRule sub_292 = new SubRule("req_uri", 0, 128, false, (IDCCoreVar)dcVars[74], false, "Office Depot OfficeM_url_12", null, 0, false);
	subContainer_104.addSubInstruction(sub_292);
		ISubRule sub_293 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_269", null, 0, false);
	subContainer_104.addSubInstruction(sub_293);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB316AD6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_105(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB32A350C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_105 = new DataSub();
	reqAction.addDataSub(subContainer_105);

		ISubRule sub_294 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_266", null, 0, false);
	subContainer_105.addSubInstruction(sub_294);
		ISubRule sub_295 = new SubRule("req_uri", 0, 127, false, (IDCCoreVar)dcVars[75], false, "Office Depot OfficeM_url_11", null, 0, false);
	subContainer_105.addSubInstruction(sub_295);
		ISubRule sub_296 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_268", null, 0, false);
	subContainer_105.addSubInstruction(sub_296);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB32A353C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_106(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3366A3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_106 = new DataSub();
	reqAction.addDataSub(subContainer_106);

		ISubRule sub_297 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_265", null, 0, false);
	subContainer_106.addSubInstruction(sub_297);
		ISubRule sub_298 = new SubRule("req_uri", 0, 127, false, (IDCCoreVar)dcVars[76], false, "Office Depot OfficeM_url_10", null, 0, false);
	subContainer_106.addSubInstruction(sub_298);
		ISubRule sub_299 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_267", null, 0, false);
	subContainer_106.addSubInstruction(sub_299);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3366A6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_107(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB347813C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_107 = new DataSub();
	reqAction.addDataSub(subContainer_107);

		ISubRule sub_300 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_264", null, 0, false);
	subContainer_107.addSubInstruction(sub_300);
		ISubRule sub_301 = new SubRule("req_uri", 0, 127, false, (IDCCoreVar)dcVars[77], false, "Office Depot OfficeM_url_9", null, 0, false);
	subContainer_107.addSubInstruction(sub_301);
		ISubRule sub_302 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_266", null, 0, false);
	subContainer_107.addSubInstruction(sub_302);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB347816C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_108(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB351453C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_108 = new DataSub();
	reqAction.addDataSub(subContainer_108);

		ISubRule sub_303 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_263", null, 0, false);
	subContainer_108.addSubInstruction(sub_303);
		ISubRule sub_304 = new SubRule("req_uri", 0, 127, false, (IDCCoreVar)dcVars[78], false, "Office Depot OfficeM_url_8", null, 0, false);
	subContainer_108.addSubInstruction(sub_304);
		ISubRule sub_305 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_265", null, 0, false);
	subContainer_108.addSubInstruction(sub_305);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB351456C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_109(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB371023C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_109 = new DataSub();
	reqAction.addDataSub(subContainer_109);

		ISubRule sub_306 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_262", null, 0, false);
	subContainer_109.addSubInstruction(sub_306);
		ISubRule sub_307 = new SubRule("req_uri", 0, 151, false, (IDCCoreVar)dcVars[79], false, "Office Depot OfficeM_url_7", null, 0, false);
	subContainer_109.addSubInstruction(sub_307);
		ISubRule sub_308 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_264", null, 0, false);
	subContainer_109.addSubInstruction(sub_308);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB371026C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_110(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB378553C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_110 = new DataSub();
	reqAction.addDataSub(subContainer_110);

		ISubRule sub_309 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_261", null, 0, false);
	subContainer_110.addSubInstruction(sub_309);
		ISubRule sub_310 = new SubRule("req_uri", 0, 135, false, (IDCCoreVar)dcVars[80], false, "Office Depot OfficeM_url_6", null, 0, false);
	subContainer_110.addSubInstruction(sub_310);
		ISubRule sub_311 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_263", null, 0, false);
	subContainer_110.addSubInstruction(sub_311);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB378556C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_111(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB37FA83C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_111 = new DataSub();
	reqAction.addDataSub(subContainer_111);

		ISubRule sub_312 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_260", null, 0, false);
	subContainer_111.addSubInstruction(sub_312);
		ISubRule sub_313 = new SubRule("req_uri", 0, 154, false, (IDCCoreVar)dcVars[81], false, "Office Depot OfficeM_url_5", null, 0, false);
	subContainer_111.addSubInstruction(sub_313);
		ISubRule sub_314 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_262", null, 0, false);
	subContainer_111.addSubInstruction(sub_314);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB37FA86C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_112(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3896C3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_112 = new DataSub();
	reqAction.addDataSub(subContainer_112);

		ISubRule sub_315 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_259", null, 0, false);
	subContainer_112.addSubInstruction(sub_315);
		ISubRule sub_316 = new SubRule("req_uri", 0, 123, false, (IDCCoreVar)dcVars[82], false, "Office Depot OfficeM_url_4", null, 0, false);
	subContainer_112.addSubInstruction(sub_316);
		ISubRule sub_317 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_261", null, 0, false);
	subContainer_112.addSubInstruction(sub_317);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3896C6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_113(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB395A10C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_113 = new DataSub();
	reqAction.addDataSub(subContainer_113);

		ISubRule sub_318 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_258", null, 0, false);
	subContainer_113.addSubInstruction(sub_318);
		ISubRule sub_319 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_260", null, 0, false);
	subContainer_113.addSubInstruction(sub_319);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB395A13C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_114(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB398163C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;mt.v=5.1444192317.1656508501726", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_114 = new DataSub();
	reqAction.addDataSub(subContainer_114);

		ISubRule sub_320 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_257", null, 0, false);
	subContainer_114.addSubInstruction(sub_320);
		ISubRule sub_321 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_259", null, 0, false);
	subContainer_114.addSubInstruction(sub_321);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB398166C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_115(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB39CF40C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1504", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_1(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_115 = new DataSub();
	reqAction.addDataSub(subContainer_115);

		ISubRule sub_322 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_256", null, 0, false);
	subContainer_115.addSubInstruction(sub_322);
		ISubRule sub_323 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_258", null, 0, false);
	subContainer_115.addSubInstruction(sub_323);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB39CF43C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_1(HTTPPostData postData) {
				StringBuffer strBuf_1 = new StringBuffer();
strBuf_1.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_1.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_1.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_1.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8505385,1920,1040,19");
strBuf_1.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_1.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.02520556");
strBuf_1.append("112,828254252692.5,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,d");
strBuf_1.append("m_en,t_en-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0");
strBuf_1.append(",0,0,0,-1,310,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101");
strBuf_1.append(",-1,0;0,0,0,0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,");
strBuf_1.append("-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103");
strBuf_1.append(",-1,2,-94,-112,https://www.officedepot.com/-1,2,-94,-115,1,3");
strBuf_1.append("2,32,0,0,0,0,2,0,1656508505385,-999999,17720,0,0,2953,0,0,4,");
strBuf_1.append("0,0,7475C20621AC05998EB5C2E913770E6D~-1~YAAQP8jZFwCmBq2BAQAA");
strBuf_1.append("oNaZrwhkkAgHpP4nxS9fU7cITtiO64TNLJ+MdEtbn4/rHprGXeWdhbzqU5uX");
strBuf_1.append("SqrzATIWGQARWNfbrh7+pPlPsV1XgHHQu56XyYK/xFVmSFMxZTXXy6ZLOLtb");
strBuf_1.append("FXDnaGdr4CH9Yp99T6Zc4cN+zSFHYKP13OcE6CDVn3oAxe5QY7FL6DP+pmWn");
strBuf_1.append("S+sBZu9XLNixE1OvvEHLcMMS9mA36XiLwJ5vWWs022DeqEHyTh7Wf2BD2TGx");
strBuf_1.append("AfxiYzn26rMvUu669Lz3q1FzSGjefMMj9HN9vYckTYt0NIZYtoZSDmjpR+ya");
strBuf_1.append("rFhjOgmU7z9doryBKvvP4LaB/L7wun1skA5w14jwPWrVwOH7ih6z6OZJWzLV");
strBuf_1.append("YZpHOaGQX4Sjbo9SWM3YFn2C~-1~-1~-1,37169,-1,-1,30261693,PiZtE");
strBuf_1.append(",97511,39,14,true-1,2,-94,-106,0,0-1,2,-94,-119,-1-1,2,-94,-");
strBuf_1.append("122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-");
strBuf_1.append("1,2,-94,-127,8-1,2,-94,-70,-1-1,2,-94,-80,94-1,2,-94,-116,22");
strBuf_1.append("9645563-1,2,-94,-118,89333-1,2,-94,-129,-1,2,-94,-121,;10;-1");
strBuf_1.append(";0\"}");
String requestData_1 = strBuf_1.toString();
			
	HTTPPostDataChunk pdc_0 = new HTTPPostDataChunk("A1ECF7ADEB3AB9A0C9BBE33261613362", postData, requestData_1, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_0);

	}

	public HTTPAction request_116(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3AE100C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_116 = new DataSub();
	reqAction.addDataSub(subContainer_116);

		ISubRule sub_324 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_255", null, 0, false);
	subContainer_116.addSubInstruction(sub_324);
		ISubRule sub_325 = new SubRule("req_uri", 0, 42, false, (IDCCoreVar)dcVars[87], false, "Office Depot OfficeM_url_3", null, 0, false);
	subContainer_116.addSubInstruction(sub_325);
		ISubRule sub_326 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_257", null, 0, false);
	subContainer_116.addSubInstruction(sub_326);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAE93E40C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3AE103C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_117(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3B7CF1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/resource/css/5752/b373928af1d699ec7ecd59634738a191/officedepot.css", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_117 = new DataSub();
	reqAction.addDataSub(subContainer_117);

		ISubRule sub_327 = new SubRule("req_hdr_Referer_1", 0, 94, false, (IDCCoreVar)dcVars[95], false, "Referer_254", null, 0, false);
	subContainer_117.addSubInstruction(sub_327);
		ISubRule sub_328 = new SubRule("req_uri", 0, 87, false, (IDCCoreVar)dcVars[97], false, "Office Depot OfficeM_url_2", null, 0, false);
	subContainer_117.addSubInstruction(sub_328);
		ISubRule sub_329 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_256", null, 0, false);
	subContainer_117.addSubInstruction(sub_329);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAB92DB7C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB39CF40C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAB92DB7C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3B7CF4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png;charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_118(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3BCB10C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1748", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_2(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_118 = new DataSub();
	reqAction.addDataSub(subContainer_118);

		ISubRule sub_330 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_253", null, 0, false);
	subContainer_118.addSubInstruction(sub_330);
		ISubRule sub_331 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_255", null, 0, false);
	subContainer_118.addSubInstruction(sub_331);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB39CF40C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3BCB13C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_2(HTTPPostData postData) {
				StringBuffer strBuf_2 = new StringBuffer();
strBuf_2.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_2.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_2.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_2.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8505385,1920,1040,19");
strBuf_2.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_2.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.41223099");
strBuf_2.append("4206,828254252692.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_2.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_2.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_2.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_2.append(",310,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0");
strBuf_2.append(",0,0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2");
strBuf_2.append(",-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94");
strBuf_2.append(",-112,https://www.officedepot.com/-1,2,-94,-115,1,32,32,0,0,");
strBuf_2.append("0,0,690,0,1656508505385,130,17720,0,0,2953,0,0,691,0,0,7475C");
strBuf_2.append("20621AC05998EB5C2E913770E6D~-1~YAAQP8jZF1ymBq2BAQAAAN6Zrwi2K");
strBuf_2.append("hD4aAMgd3/ednQe4XKABphVTmB0njvU4IxUnzffEJW6UwxkCxztI5Dib0vkM");
strBuf_2.append("mRE96ewaNZkll7lnqwRX2sca9uqbnfKKneBbRMWA3B2xCwcnyoHCrbV0fddL");
strBuf_2.append("kpLBIyqxgriq38xpBuQfZYjw9wyers2djiqZRXwtIrVxYQp5LfrvW/5ZGiGh");
strBuf_2.append("adN9dgtFQhL1hYU0OmpDUVJxyBDuyDUdxxfWeZix5oPtwikZDYF4+OpEpSbS");
strBuf_2.append("7Hbd1+TaRyf1MZR+0WfmSmKP2syNYx5QDK087iSLJVnlbkmRjBn1rxbtDN4h");
strBuf_2.append("W1oyRK2WW59yDT99N5mq59I3AdCpVePbrFfJqAUmZnCP+BgiNOcPZQan4zSz");
strBuf_2.append("Qmv7UiueTHye482~-1~||1-WnlWrqSWsL-1-10-1000-2||~-1,40395,528");
strBuf_2.append(",2087268304,30261693,PiZtE,34043,85,14,true-1,2,-94,-106,9,1");
strBuf_2.append("-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,");
strBuf_2.append("2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,21321144241322243122-");
strBuf_2.append("1,2,-94,-70,273720021;-851345892;dis;,7;true;true;true;-60;t");
strBuf_2.append("rue;24;24;true;false;-1-1,2,-94,-80,5372-1,2,-94,-116,229645");
strBuf_2.append("563-1,2,-94,-118,101971-1,2,-94,-129,,,0,,,,0-1,2,-94,-121,;");
strBuf_2.append("2;14;0\"}");
String requestData_2 = strBuf_2.toString();
			
	HTTPPostDataChunk pdc_1 = new HTTPPostDataChunk("A1ECF7ADEB3BF220C9BBE33261613362", postData, requestData_2, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_1);

	}

	public HTTPAction request_119(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3C1941C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3621", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.mbsh=%7B%221656508504421%22%3A%7B%7D%7D;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\"", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_3(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_119 = new DataSub();
	reqAction.addDataSub(subContainer_119);

		ISubRule sub_332 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_252", null, 0, false);
	subContainer_119.addSubInstruction(sub_332);
		ISubRule sub_333 = new SubRule("req_uri", 0, 22, false, (IDCCoreVar)dcVars[94], false, "Office Depot OfficeM_url", null, 0, false);
	subContainer_119.addSubInstruction(sub_333);
		ISubRule sub_334 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_254", null, 0, false);
	subContainer_119.addSubInstruction(sub_334);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB39CF40C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEAEA9DD3C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3C1944C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_3(HTTPPostData postData) {
				StringBuffer strBuf_3 = new StringBuffer();
strBuf_3.append("ap=true&bt=%7B%22charging%22%3Atrue%2C%22chargingTime%22%3A%");
strBuf_3.append("22Infinity%22%2C%22dischargingTime%22%3A%22Infinity%22%2C%22");
strBuf_3.append("level%22%3A0.97%2C%22onchargingchange%22%3Anull%2C%22oncharg");
strBuf_3.append("ingtimechange%22%3Anull%2C%22ondischargingtimechange%22%3Anu");
strBuf_3.append("ll%2C%22onlevelchange%22%3Anull%7D&fonts=null&fh=null&timing");
strBuf_3.append("=%7B%221%22%3A117%2C%222%22%3A410%2C%223%22%3A659%2C%22profi");
strBuf_3.append("le%22%3A%7B%22bp%22%3A2%2C%22sr%22%3A0%2C%22dp%22%3A0%2C%22l");
strBuf_3.append("t%22%3A0%2C%22ps%22%3A2%2C%22cv%22%3A82%2C%22fp%22%3A0%2C%22");
strBuf_3.append("sp%22%3A4%2C%22br%22%3A0%2C%22ieps%22%3A0%2C%22av%22%3A0%2C%");
strBuf_3.append("22z1%22%3A23%2C%22jsv%22%3A1%2C%22nav%22%3A1%2C%22nap%22%3A1");
strBuf_3.append("%2C%22crc%22%3A0%2C%22z2%22%3A1%2C%22z3%22%3A0%7D%2C%22main%");
strBuf_3.append("22%3A3441%2C%22compute%22%3A117%2C%22send%22%3A660%7D&bp=208");
strBuf_3.append("7755996%2C1953464915%2C591862434%2C325835597%2C1068473606%2C");
strBuf_3.append("-1382186647%2C-365096851%2C-1979186206%2C-108039040%2C-19068");
strBuf_3.append("52049&sr=%7B%22inner%22%3A%5B1238%2C889%5D%2C%22outer%22%3A%");
strBuf_3.append("5B1254%2C1022%5D%2C%22screen%22%3A%5B10%2C10%5D%2C%22pageOff");
strBuf_3.append("set%22%3A%5B0%2C0%5D%2C%22avail%22%3A%5B1920%2C1040%5D%2C%22");
strBuf_3.append("size%22%3A%5B1920%2C1080%5D%2C%22client%22%3A%5B1221%2C6614%");
strBuf_3.append("5D%2C%22colorDepth%22%3A24%2C%22pixelDepth%22%3A24%7D&dp=%7B");
strBuf_3.append("%22XDomainRequest%22%3A0%2C%22createPopup%22%3A0%2C%22remove");
strBuf_3.append("EventListener%22%3A1%2C%22globalStorage%22%3A0%2C%22openData");
strBuf_3.append("base%22%3A1%2C%22indexedDB%22%3A1%2C%22attachEvent%22%3A0%2C");
strBuf_3.append("%22ActiveXObject%22%3A0%2C%22dispatchEvent%22%3A1%2C%22addBe");
strBuf_3.append("havior%22%3A0%2C%22addEventListener%22%3A1%2C%22detachEvent%");
strBuf_3.append("22%3A0%2C%22fireEvent%22%3A0%2C%22MutationObserver%22%3A1%2C");
strBuf_3.append("%22HTMLMenuItemElement%22%3A0%2C%22Int8Array%22%3A1%2C%22pos");
strBuf_3.append("tMessage%22%3A1%2C%22querySelector%22%3A1%2C%22getElementsBy");
strBuf_3.append("ClassName%22%3A1%2C%22images%22%3A1%2C%22compatMode%22%3A%22");
strBuf_3.append("CSS1Compat%22%2C%22documentMode%22%3A0%2C%22all%22%3A1%2C%22");
strBuf_3.append("now%22%3A1%2C%22contextMenu%22%3A0%7D&lt=1656508505505%2B1&p");
strBuf_3.append("s=true%2Ctrue&cv=257625ef7abc3cc6026bfa2db36e13f0313cb2ca&fp");
strBuf_3.append("=false&sp=false&br=Chrome&ieps=false&av=false&z=%7B%22a%22%3");
strBuf_3.append("A155098570%2C%22b%22%3A1%2C%22c%22%3A1%7D&zh=&jsv=1.7&nav=%7");
strBuf_3.append("B%22userAgent%22%3A%22Mozilla%2F5.0%20(Windows%20NT%2010.0%3");
strBuf_3.append("B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20lik");
strBuf_3.append("e%20Gecko)%20Chrome%2F102.0.5005.63%20Safari%2F537.36%22%2C%");
strBuf_3.append("22appName%22%3A%22Netscape%22%2C%22appCodeName%22%3A%22Mozil");
strBuf_3.append("la%22%2C%22appVersion%22%3A%225.0%20(Windows%20NT%2010.0%3B%");
strBuf_3.append("20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%");
strBuf_3.append("20Gecko)%20Chrome%2F102.0.5005.63%20Safari%2F537.36%22%2C%22");
strBuf_3.append("appMinorVersion%22%3A0%2C%22product%22%3A%22Gecko%22%2C%22pr");
strBuf_3.append("oductSub%22%3A%2220030107%22%2C%22vendor%22%3A%22Google%20In");
strBuf_3.append("c.%22%2C%22vendorSub%22%3A%22%22%2C%22buildID%22%3A0%2C%22pl");
strBuf_3.append("atform%22%3A%22Win32%22%2C%22oscpu%22%3A0%2C%22hardwareConcu");
strBuf_3.append("rrency%22%3A12%2C%22language%22%3A%22en-GB%22%2C%22languages");
strBuf_3.append("%22%3A%5B%22en-GB%22%2C%22en-US%22%2C%22en%22%5D%2C%22system");
strBuf_3.append("Language%22%3A0%2C%22userLanguage%22%3A0%2C%22doNotTrack%22%");
strBuf_3.append("3Anull%2C%22msDoNotTrack%22%3A0%2C%22cookieEnabled%22%3Atrue");
strBuf_3.append("%2C%22geolocation%22%3A1%2C%22vibrate%22%3A1%2C%22maxTouchPo");
strBuf_3.append("ints%22%3A0%2C%22webdriver%22%3Atrue%2C%22plugins%22%3A%5B%2");
strBuf_3.append("2PDF%20Viewer%22%2C%22Chrome%20PDF%20Viewer%22%2C%22Chromium");
strBuf_3.append("%20PDF%20Viewer%22%2C%22Microsoft%20Edge%20PDF%20Viewer%22%2");
strBuf_3.append("C%22WebKit%20built-in%20PDF%22%5D%7D&crc=%7B%22window.chrome");
strBuf_3.append("%22%3A%7B%22app%22%3A%7B%22isInstalled%22%3Afalse%2C%22Insta");
strBuf_3.append("llState%22%3A%7B%22DISABLED%22%3A%22disabled%22%2C%22INSTALL");
strBuf_3.append("ED%22%3A%22installed%22%2C%22NOT_INSTALLED%22%3A%22not_insta");
strBuf_3.append("lled%22%7D%2C%22RunningState%22%3A%7B%22CANNOT_RUN%22%3A%22c");
strBuf_3.append("annot_run%22%2C%22READY_TO_RUN%22%3A%22ready_to_run%22%2C%22");
strBuf_3.append("RUNNING%22%3A%22running%22%7D%7D%7D%7D&t=7f2365eedfc9c7cda59");
strBuf_3.append("e852d71aef7213ec972d3&u=3993ee998ac55a9b81a0268c217ef03c&nap");
strBuf_3.append("=21321144241322243122");
String requestData_3 = strBuf_3.toString();
			
	HTTPPostDataChunk pdc_2 = new HTTPPostDataChunk("A1ECF7ADEB3C4054C9BBE33261613362", postData, requestData_3, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_2);

	}

	public HTTPAction request_120(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB3C8E62C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_120 = new DataSub();
	reqAction.addDataSub(subContainer_120);

		ISubRule sub_335 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_251", null, 0, false);
	subContainer_120.addSubInstruction(sub_335);
		ISubRule sub_336 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_253", null, 0, false);
	subContainer_120.addSubInstruction(sub_336);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB3BCB10C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB3C1941C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB3C8E65C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_121(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB462B52C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_121 = new DataSub();
	reqAction.addDataSub(subContainer_121);

		ISubRule sub_337 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_250", null, 0, false);
	subContainer_121.addSubInstruction(sub_337);
		ISubRule sub_338 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_252", null, 0, false);
	subContainer_121.addSubInstruction(sub_338);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB3BCB10C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB3C1941C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB462B55C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_122(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEB46A083C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1910", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_ga=GA1.2.565524517.1656508508;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_4(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_122 = new DataSub();
	reqAction.addDataSub(subContainer_122);

		ISubRule sub_339 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_249", null, 0, false);
	subContainer_122.addSubInstruction(sub_339);
		ISubRule sub_340 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_251", null, 0, false);
	subContainer_122.addSubInstruction(sub_340);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA985F20C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEA979BD9C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB3BCB10C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEB3C1941C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEB46A086C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_4(HTTPPostData postData) {
				StringBuffer strBuf_4 = new StringBuffer();
strBuf_4.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_4.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_4.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_4.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8505385,1920,1040,19");
strBuf_4.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_4.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.58675689");
strBuf_4.append("4293,828254252692.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_4.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_4.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_4.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_4.append(",310,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0");
strBuf_4.append(",0,0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,0,1,3026,579,90;1,");
strBuf_4.append("3,4497,579,90,310;-1,2,-94,-117,-1,2,-94,-111,0,695,-1,-1,-1");
strBuf_4.append(";-1,2,-94,-109,0,695,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-11");
strBuf_4.append("4,-1,2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/-1");
strBuf_4.append(",2,-94,-115,1,8898,32,695,695,0,10256,4497,0,1656508505385,1");
strBuf_4.append("30,17720,0,2,2953,1,0,4498,8913,0,7475C20621AC05998EB5C2E913");
strBuf_4.append("770E6D~-1~YAAQP8jZF3imBq2BAQAAiuCZrwgyJ1KL7FJ/oCaZ1c+sWOWIck");
strBuf_4.append("9gw9E+kRu5MFFcCQOkiWdcGrQdMc9D3LBc4Y8nvIuSthRlcGTyrI7XbywQKL");
strBuf_4.append("k8hcIVHlWO/qbaT4s2jmy7qHpk03SnhX641cPF/nBm9cV04mMt8krQmEodMG");
strBuf_4.append("cqRoTYFy//RsEiC8+LHQ+GZPsWysDucCr7oiJgekkiMREEELuNsFhrYGkAvQ");
strBuf_4.append("6E4uuwKSGdOdOc9YYiPnVYVE1AOyDQ73mMGeWkOH2KUSP9UJ5Ip0nvQSYSk7");
strBuf_4.append("YtTB8Usn4bAF6bMYIo+W0D/rSVNIEATDNYOKdYBeGgezxwPg69NcA1j5bMJf");
strBuf_4.append("62CyjhXdG3rq43XblNADnLBYiYR02cCiZqaNd6OCPDg4SqdGPrZFnn~-1~||");
strBuf_4.append("1-WnlWrqSWsL-1-10-1000-2||~-1,38921,528,2087268304,30261693,");
strBuf_4.append("PiZtE,74938,40,14,true-1,2,-94,-106,1,2-1,2,-94,-119,-1-1,2,");
strBuf_4.append("-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-");
strBuf_4.append("126,-1,2,-94,-127,21321144241322243122-1,2,-94,-70,273720021");
strBuf_4.append(";-851345892;dis;,7;true;true;true;-60;true;24;24;true;false;");
strBuf_4.append("-1-1,2,-94,-80,5372-1,2,-94,-116,229645563-1,2,-94,-118,1054");
strBuf_4.append("46-1,2,-94,-129,,,769baa1e58c97f68e09ccec638eeebbd00639644b5");
strBuf_4.append("049f8a3ec95a8672a5b0cb,,,,0-1,2,-94,-121,;3;14;0\"}");
String requestData_4 = strBuf_4.toString();
			
	HTTPPostDataChunk pdc_3 = new HTTPPostDataChunk("A1ECF7ADEB46EEA0C9BBE33261613362", postData, requestData_4, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_3);

	}
private HTTPPage page_2(final IContainer parent) {
			HTTPThink think = new HTTPThink(56, 1, parent, parent, "A1ECF7ADEC3AC480C9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "HQFje_jFRalo", "A1ECF7ADEC3AC480C9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(16, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_123(this, true, "A1ECF7ADEAB84330C9BBE33261613362", true, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do?items=348037,101095,8597554,7607950,959569,907932,7049485,7476425,196517,751724,576868,219491,6129456,7613146,161444,8944121,7049036,6785666,956652,285674,333465,281901,6217486,7808444,633410",	"/mobile/getAjaxPriceListFromService.do?items=348037,101095,8597554,7607950,959569,907932,7049485,7476425,196517,751724,576868,219491,6129456,7613146,161444,8944121,7049036,6785666,956652,285674,333465,281901,6217486,7808444,633410", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_124(this, false, "A1ECF7ADEA983816C9BBE33261613362", true, true,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_125(this, false, "A1ECF7ADEC3BAEE1C9BBE33261613362", true, false,
						"Config_7", "/services/splunkjslogger/beacon.gif?src=GRAPHQL%20API%20call%20for%20Persistent%20Banner%20failed.&severity=error&msg=%7B%20error%3A%20TypeError%3A%20Cannot%20read%20properties%20of%20null%20(reading%20%27simplecardByPath%27)%2C%20msg%3A%20%27GRAPHQL%20API%20to%20retrieve%20response%20for%20for%20Persistent%20Banner%20in%20Header%20App%20failed.%27%7D&pageUrl=undefined&isClient=true&glassboxUrl=undefined",	"/services/splunkjslogger/beacon.gif?src=GRAPHQL%20API%20call%20for%20Persistent%20Banner%20failed.&severity=error&msg=%7B%20error%3A%20TypeError%3A%20Cannot%20read%20properties%20of%20null%20(reading%20%27simplecardByPath%27)%2C%20msg%3A%20%27GRAPHQL%20API%20to%20retrieve%20response%20for%20for%20Persistent%20Banner%20in%20Header%20App%20failed.%27%7D&pageUrl=undefined&isClient=true&glassboxUrl=undefined", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_126(this, false, "A1ECF7ADEC3BFD00C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/348037/Office-Depot-Brand-Multi-Use-Print",	"/images/t_medium,f_auto/products/348037/Office-Depot-Brand-Multi-Use-Print", true, false), 9, 69, "A1ECF7ADEC3BAEEFC9BBE33261613362", 3);
				httpParallel.addRequest(3, request_127(this, false, "A1ECF7ADEC3BFD00C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/101095/Realspace-Magellan-59-W-L-Shape",	"/images/t_medium,f_auto/products/101095/Realspace-Magellan-59-W-L-Shape", true, false), 367, 69, "A1ECF7ADEC3BFD0EC9BBE33261613362", 3);
				httpParallel.addRequest(4, request_128(this, false, "A1ECF7ADEC4A54E0C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/8597554/Tide-Simply-Clean-Fresh-Liquid-Laundry",	"/images/t_medium,f_auto/products/8597554/Tide-Simply-Clean-Fresh-Liquid-Laundry", true, false), 193, 69, "A1ECF7ADEC3BAEEFC9BBE33261613362", 3);
				httpParallel.addRequest(5, request_129(this, false, "A1ECF7ADEC4AA34BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7607950/Tervis-Tumbler-Plastic-Drinking-Glass-Set",	"/images/t_medium,f_auto/products/7607950/Tervis-Tumbler-Plastic-Drinking-Glass-Set", true, false), 194, 69, "A1ECF7ADEC3BAEEFC9BBE33261613362", 3);
				httpParallel.addRequest(6, request_130(this, false, "A1ECF7ADEC4ACA6FC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/959569/Paper-Mate-Clearpoint-Mechanical-Pencil-07mm",	"/images/t_medium,f_auto/products/959569/Paper-Mate-Clearpoint-Mechanical-Pencil-07mm", true, false), 265, 69, "A1ECF7ADEC3BAEEFC9BBE33261613362", 3);
				httpParallel.addRequest(7, request_131(this, false, "A1ECF7ADEC4B187BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/907932/Realspace-Modern-Comfort-Winsley-Bonded-Leather",	"/images/t_medium,f_auto/products/907932/Realspace-Modern-Comfort-Winsley-Bonded-Leather", true, false), 264, 69, "A1ECF7ADEC3BAEEFC9BBE33261613362", 3);
				httpParallel.addRequest(4, request_132(this, false, "A1ECF7ADEC4A54E0C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7049485/Epson-EcoTank-ET-2800-All-in",	"/images/t_medium,f_auto/products/7049485/Epson-EcoTank-ET-2800-All-in", true, false), 258, 69, "A1ECF7ADEC4B1889C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_133(this, false, "A1ECF7ADEC4B187BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7476425/Epson-EcoTank-ET-15000-Supertank-Wide",	"/images/t_medium,f_auto/products/7476425/Epson-EcoTank-ET-15000-Supertank-Wide", true, false), 232, 69, "A1ECF7ADEC5662D0C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_134(this, false, "A1ECF7ADEC3BFD00C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/196517/Boise-X-9-Multi-Use-Print",	"/images/t_medium,f_auto/products/196517/Boise-X-9-Multi-Use-Print", true, false), 233, 69, "A1ECF7ADEC5662D0C9BBE33261613362", 3);
				httpParallel.addRequest(6, request_135(this, false, "A1ECF7ADEC4ACA6FC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/751724/Realspace-Magellan-59-W-Managers-Desk",	"/images/t_medium,f_auto/products/751724/Realspace-Magellan-59-W-Managers-Desk", true, false), 233, 69, "A1ECF7ADEC5662D0C9BBE33261613362", 3);
				httpParallel.addRequest(5, request_136(this, false, "A1ECF7ADEC4AA34BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/576868/Sauder-Heritage-Hill-65-W-Double",	"/images/t_medium,f_auto/products/576868/Sauder-Heritage-Hill-65-W-Double", true, false), 234, 69, "A1ECF7ADEC5662D0C9BBE33261613362", 3);
				httpParallel.addRequest(4, request_137(this, false, "A1ECF7ADEC4A54E0C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/219491/Realspace-Hurston-Bonded-Leather-High-Back",	"/images/t_medium,f_auto/products/219491/Realspace-Hurston-Bonded-Leather-High-Back", true, false), 246, 69, "A1ECF7ADEC5662D0C9BBE33261613362", 3);
				httpParallel.addRequest(8, request_138(this, false, "A1ECF7ADEC677A1BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/6129456/Brother-MFC-L3770CDW-Wireless-Color-Laser",	"/images/t_medium,f_auto/products/6129456/Brother-MFC-L3770CDW-Wireless-Color-Laser", true, false), 348, 69, "A1ECF7ADEC3BFD0EC9BBE33261613362", 3);
				httpParallel.addRequest(3, request_139(this, false, "A1ECF7ADEC3BFD00C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7613146/HP-15-gw0123od-Laptop-156-Screen",	"/images/t_medium,f_auto/products/7613146/HP-15-gw0123od-Laptop-156-Screen", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_140(this, false, "A1ECF7ADEC4B187BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/161444/Brenton-Studio-Ruzzi-Mid-Back-Managers",	"/images/t_medium,f_auto/products/161444/Brenton-Studio-Ruzzi-Mid-Back-Managers", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_141(this, false, "A1ECF7ADEC4AA34BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/8944121/Brother-MFC-J1170DW-Wireless-Color-Inkjet",	"/images/t_medium,f_auto/products/8944121/Brother-MFC-J1170DW-Wireless-Color-Inkjet", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_142(this, false, "A1ECF7ADEC677A1BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/7049036/Epson-EcoTank-ET-2800-All-in",	"/images/t_medium,f_auto/products/7049036/Epson-EcoTank-ET-2800-All-in", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_143(this, false, "A1ECF7ADEC3BFD00C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/6785666/Realspace-Jaxby-MeshFabric-Mid-Back-Task",	"/images/t_medium,f_auto/products/6785666/Realspace-Jaxby-MeshFabric-Mid-Back-Task", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_144(this, false, "A1ECF7ADEC4ACA6FC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/956652/Realspace-Magellan-Performance-71-W-L",	"/images/t_medium,f_auto/products/956652/Realspace-Magellan-Performance-71-W-L", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_145(this, false, "A1ECF7ADEC4A54E0C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/285674/Brother-MFC-MFC-L2710DW-Wireless-Laser",	"/images/t_medium,f_auto/products/285674/Brother-MFC-MFC-L2710DW-Wireless-Laser", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_146(this, false, "A1ECF7ADEC4B187BC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/333465/HP-Office-Multi-Use-Print-Copy",	"/images/t_medium,f_auto/products/333465/HP-Office-Multi-Use-Print-Copy", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_147(this, false, "A1ECF7ADEC677A1BC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/281901/Realspace-Magellan-59-W-Managers-Desk",	"/images/t_medium,f_auto/products/281901/Realspace-Magellan-59-W-Managers-Desk", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_148(this, false, "A1ECF7ADEC4AA34BC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/6217486/Realspace-Lenzer-Mesh-High-Back-Task",	"/images/t_medium,f_auto/products/6217486/Realspace-Lenzer-Mesh-High-Back-Task", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_149(this, false, "A1ECF7ADEC3BFD00C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/7808444/HP-LaserJet-Pro-MFP-M479fdw-Wireless",	"/images/t_medium,f_auto/products/7808444/HP-LaserJet-Pro-MFP-M479fdw-Wireless", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_150(this, false, "A1ECF7ADEC4A54E0C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/carousel-btn-sprites.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/carousel-btn-sprites.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_151(this, false, "A1ECF7ADEC4ACA6FC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/633410/Realspace-Fennington-Bonded-Leather-High-Back",	"/images/t_medium,f_auto/products/633410/Realspace-Fennington-Bonded-Leather-High-Back", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_152(this, false, "A1ECF7ADED24FD70C9BBE33261613362", false, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 238, 69, "A1ECF7ADEC8673BBC9BBE33261613362", 3);
				httpParallel.addRequest(10, request_153(this, false, "A1ECF7ADED254B90C9BBE33261613362", true, false,
						"Config_4", "/akam-sw.js",	"/akam-sw.js", true, false), 278, 69, "A1ECF7ADEC8673BBC9BBE33261613362", 3);
				httpParallel.addRequest(11, request_154(this, false, "A1ECF7ADED2599B3C9BBE33261613362", true, false,
						"Config_7", "/services/predictsearch-service/api/2/?searchTerm=paper",	"/services/predictsearch-service/api/2/?searchTerm=paper", true, false), 793, 69, "A1ECF7ADEC8673BBC9BBE33261613362", 3);
				httpParallel.addRequest(12, request_155(this, false, "A1ECF7ADED25E7D0C9BBE33261613362", true, false,
						"Config_3", "/en_US_od_business_accelerator_search.xml",	"/en_US_od_business_accelerator_search.xml", true, false), 2289, 69, "A1ECF7ADED2599C1C9BBE33261613362", 3);
				httpParallel.addRequest(13, request_156(this, false, "A1ECF7ADED2635F1C9BBE33261613362", false, false,
						"Config_4", "/favicon.ico?v=1.1",	"/favicon.ico?v=1.1", true, false), 2311, 69, "A1ECF7ADED2599C1C9BBE33261613362", 3);
				httpParallel.addRequest(14, request_157(this, false, "A1ECF7ADED268410C9BBE33261613362", true, false,
						"Config_4", "/en_US_od_business_accelerator_search.xml",	"/en_US_od_business_accelerator_search.xml", true, false), 5, 69, "A1ECF7ADED25E7D8C9BBE33261613362", 3);
				httpParallel.addRequest(13, request_158(this, false, "A1ECF7ADED2635F1C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 109, 69, "A1ECF7ADED26841EC9BBE33261613362", 3);
				httpParallel.addRequest(15, request_159(this, false, "A1ECF7ADED2720ABC9BBE33261613362", true, false,
						"Config_6", "/w_32,h_32/od_favicon.png",	"/w_32,h_32/od_favicon.png", true, false), 104, 69, "A1ECF7ADED2635FFC9BBE33261613362", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_123(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC3AC484C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(15);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("X-Requested-With", "XMLHttpRequest", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_ga=GA1.2.565524517.1656508508;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_123 = new DataSub();
	reqAction.addDataSub(subContainer_123);

		ISubRule sub_341 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_248", null, 0, false);
	subContainer_123.addSubInstruction(sub_341);
		ISubRule sub_342 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_250", null, 0, false);
	subContainer_123.addSubInstruction(sub_342);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADEC3AC487C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_124(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC3B3A08C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "2508", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_ga=GA1.1.565524517.1656508508;_mibhv=anon-1656508510268-7729214690_5124", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_5(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_124 = new DataSub();
	reqAction.addDataSub(subContainer_124);

		ISubRule sub_343 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_247", null, 0, false);
	subContainer_124.addSubInstruction(sub_343);
		ISubRule sub_344 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_249", null, 0, false);
	subContainer_124.addSubInstruction(sub_344);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADEC3B3A0BC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_5(HTTPPostData postData) {
				StringBuffer strBuf_5 = new StringBuffer();
strBuf_5.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_5.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_5.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_5.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8505385,1920,1040,19");
strBuf_5.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_5.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.74003117");
strBuf_5.append("7370,828254252692.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_5.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_5.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_5.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_5.append(",310,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0");
strBuf_5.append(",0,0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,0,1,3026,579,90;1,");
strBuf_5.append("3,4497,579,90,310;2,1,4508,579,90;3,4,4509,579,90,310;4,2,47");
strBuf_5.append("40,579,90,310;-1,2,-94,-117,-1,2,-94,-111,0,695,-1,-1,-1;-1,");
strBuf_5.append("2,-94,-109,0,695,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1");
strBuf_5.append(",2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/-1,2,-");
strBuf_5.append("94,-115,1,24678,32,695,695,0,26036,4943,0,1656508505385,130,");
strBuf_5.append("17720,0,5,2953,2,0,4945,22670,0,7475C20621AC05998EB5C2E91377");
strBuf_5.append("0E6D~-1~YAAQP8jZFzCnBq2BAQAAoO+ZrwiBGldByzwfMJILKPJjtFWWv25D");
strBuf_5.append("X8Q67yTLDLjU28DBq6UMoPNTMrbANz9aYtRpRBLkzE3lc7fHnO9vWMh5Avd9");
strBuf_5.append("gVXo0zhHhPzKX7Mps3sHubyCXGgiXizjsZsmxWah+hPZILOfK8WPLtsiDV60");
strBuf_5.append("FvbC6va+lsm5VhHdPnT8i+eSc0HcpgIscTzwovwvnC/WD6qKi3J3bkTWcwF+");
strBuf_5.append("MFCq0aGN7CgXTixqRvsi/bbutyHXr9mGxYzK4jO+1TUiF6vc39xzu5L99mDb");
strBuf_5.append("+cWmc3pP827QR3FkBSgVEEBaSmeTmPiblonTmmXKdRmLZny6bHJrNIJcdr/j");
strBuf_5.append("I18d+KZkf/o1UOLzNcgwkkl4B+/VX5cvuX/+pZyYYqSjZoDgVZEs~-1~||1-");
strBuf_5.append("WnlWrqSWsL-1-10-1000-2||~-1,39918,528,2087268304,30261693,Pi");
strBuf_5.append("ZtE,15791,55,14,true-1,2,-94,-106,8,3-1,2,-94,-119,-1-1,2,-9");
strBuf_5.append("4,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,0.4ebe6e8122");
strBuf_5.append("f11,0.3b38a0544917b,0.fd32b3cb63f33,0.d48961809bc27,0.ed4223");
strBuf_5.append("f68459d,0.c916114629842,0.158fdb70085a3,0.df0767b0b8af9,0.d3");
strBuf_5.append("ed4d6817e77,0.9b47b372dddb9;2,1,2,1,1,5,5,6,2,1;0,1,3,4,0,13");
strBuf_5.append(",15,8,2,6;7475C20621AC05998EB5C2E913770E6D,1656508505385,Wnl");
strBuf_5.append("WrqSWsL,7475C20621AC05998EB5C2E913770E6D1656508505385WnlWrqS");
strBuf_5.append("WsL,1,1,0.4ebe6e8122f11,7475C20621AC05998EB5C2E913770E6D1656");
strBuf_5.append("508505385WnlWrqSWsL10.4ebe6e8122f11,188,188,79,233,148,107,7");
strBuf_5.append("9,105,253,49,178,201,160,150,154,171,105,106,34,106,9,174,41");
strBuf_5.append(",5,27,55,240,27,245,11,3,30,527,0,1656508510328;-1,2,-94,-12");
strBuf_5.append("6,-1,2,-94,-127,21321144241322243122-1,2,-94,-70,273720021;-");
strBuf_5.append("851345892;dis;,7;true;true;true;-60;true;24;24;true;false;-1");
strBuf_5.append("-1,2,-94,-80,5372-1,2,-94,-116,229645563-1,2,-94,-118,141123");
strBuf_5.append("-1,2,-94,-129,,,769baa1e58c97f68e09ccec638eeebbd00639644b504");
strBuf_5.append("9f8a3ec95a8672a5b0cb,,,,0-1,2,-94,-121,;7;14;0\"}");
String requestData_5 = strBuf_5.toString();
			
	HTTPPostDataChunk pdc_4 = new HTTPPostDataChunk("A1ECF7ADEC3B87D0C9BBE33261613362", postData, requestData_5, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_4);

	}

	public HTTPAction request_125(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC3BAEEFC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_125 = new DataSub();
	reqAction.addDataSub(subContainer_125);

		ISubRule sub_345 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_246", null, 0, false);
	subContainer_125.addSubInstruction(sub_345);
		ISubRule sub_346 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_248", null, 0, false);
	subContainer_125.addSubInstruction(sub_346);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC3BAEF2C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/octet-stream");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_126(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC3BFD0EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_126 = new DataSub();
	reqAction.addDataSub(subContainer_126);

		ISubRule sub_347 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_245", null, 0, false);
	subContainer_126.addSubInstruction(sub_347);
		ISubRule sub_348 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_247", null, 0, false);
	subContainer_126.addSubInstruction(sub_348);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC3BFD11C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_127(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC44FDB0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_127 = new DataSub();
	reqAction.addDataSub(subContainer_127);

		ISubRule sub_349 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_244", null, 0, false);
	subContainer_127.addSubInstruction(sub_349);
		ISubRule sub_350 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_246", null, 0, false);
	subContainer_127.addSubInstruction(sub_350);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC4524C0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_128(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC4A54EEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_128 = new DataSub();
	reqAction.addDataSub(subContainer_128);

		ISubRule sub_351 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_243", null, 0, false);
	subContainer_128.addSubInstruction(sub_351);
		ISubRule sub_352 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_245", null, 0, false);
	subContainer_128.addSubInstruction(sub_352);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC4A54F1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_129(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC4AA359C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_129 = new DataSub();
	reqAction.addDataSub(subContainer_129);

		ISubRule sub_353 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_242", null, 0, false);
	subContainer_129.addSubInstruction(sub_353);
		ISubRule sub_354 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_244", null, 0, false);
	subContainer_129.addSubInstruction(sub_354);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC4AA35CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_130(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC4ACA7DC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_130 = new DataSub();
	reqAction.addDataSub(subContainer_130);

		ISubRule sub_355 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_241", null, 0, false);
	subContainer_130.addSubInstruction(sub_355);
		ISubRule sub_356 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_243", null, 0, false);
	subContainer_130.addSubInstruction(sub_356);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC4ACA80C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_131(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC4B1889C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_131 = new DataSub();
	reqAction.addDataSub(subContainer_131);

		ISubRule sub_357 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_240", null, 0, false);
	subContainer_131.addSubInstruction(sub_357);
		ISubRule sub_358 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_242", null, 0, false);
	subContainer_131.addSubInstruction(sub_358);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC4B188CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_132(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC5662D0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_132 = new DataSub();
	reqAction.addDataSub(subContainer_132);

		ISubRule sub_359 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_239", null, 0, false);
	subContainer_132.addSubInstruction(sub_359);
		ISubRule sub_360 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_241", null, 0, false);
	subContainer_132.addSubInstruction(sub_360);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC5662D3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_133(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC56B139C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_133 = new DataSub();
	reqAction.addDataSub(subContainer_133);

		ISubRule sub_361 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_238", null, 0, false);
	subContainer_133.addSubInstruction(sub_361);
		ISubRule sub_362 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_240", null, 0, false);
	subContainer_133.addSubInstruction(sub_362);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC56B13CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_134(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC61D480C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_134 = new DataSub();
	reqAction.addDataSub(subContainer_134);

		ISubRule sub_363 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_237", null, 0, false);
	subContainer_134.addSubInstruction(sub_363);
		ISubRule sub_364 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_239", null, 0, false);
	subContainer_134.addSubInstruction(sub_364);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC61D483C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_135(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC61FBDBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_135 = new DataSub();
	reqAction.addDataSub(subContainer_135);

		ISubRule sub_365 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_236", null, 0, false);
	subContainer_135.addSubInstruction(sub_365);
		ISubRule sub_366 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_238", null, 0, false);
	subContainer_135.addSubInstruction(sub_366);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC61FBDEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_136(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC66B680C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_136 = new DataSub();
	reqAction.addDataSub(subContainer_136);

		ISubRule sub_367 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_235", null, 0, false);
	subContainer_136.addSubInstruction(sub_367);
		ISubRule sub_368 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_237", null, 0, false);
	subContainer_136.addSubInstruction(sub_368);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC66B683C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_137(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC672BB3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_137 = new DataSub();
	reqAction.addDataSub(subContainer_137);

		ISubRule sub_369 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_234", null, 0, false);
	subContainer_137.addSubInstruction(sub_369);
		ISubRule sub_370 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_236", null, 0, false);
	subContainer_137.addSubInstruction(sub_370);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC672BB6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_138(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC677A29C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_138 = new DataSub();
	reqAction.addDataSub(subContainer_138);

		ISubRule sub_371 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_233", null, 0, false);
	subContainer_138.addSubInstruction(sub_371);
		ISubRule sub_372 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_235", null, 0, false);
	subContainer_138.addSubInstruction(sub_372);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC67A0E1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_139(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC6CA9F0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_139 = new DataSub();
	reqAction.addDataSub(subContainer_139);

		ISubRule sub_373 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_232", null, 0, false);
	subContainer_139.addSubInstruction(sub_373);
		ISubRule sub_374 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_234", null, 0, false);
	subContainer_139.addSubInstruction(sub_374);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC6CA9F3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_140(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC73D5E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_140 = new DataSub();
	reqAction.addDataSub(subContainer_140);

		ISubRule sub_375 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_231", null, 0, false);
	subContainer_140.addSubInstruction(sub_375);
		ISubRule sub_376 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_233", null, 0, false);
	subContainer_140.addSubInstruction(sub_376);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC73D5E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_141(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC747220C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_141 = new DataSub();
	reqAction.addDataSub(subContainer_141);

		ISubRule sub_377 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_230", null, 0, false);
	subContainer_141.addSubInstruction(sub_377);
		ISubRule sub_378 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_232", null, 0, false);
	subContainer_141.addSubInstruction(sub_378);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC747223C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_142(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC78DEF0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_142 = new DataSub();
	reqAction.addDataSub(subContainer_142);

		ISubRule sub_379 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_229", null, 0, false);
	subContainer_142.addSubInstruction(sub_379);
		ISubRule sub_380 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_231", null, 0, false);
	subContainer_142.addSubInstruction(sub_380);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC78DEF3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_143(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC7EF970C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_143 = new DataSub();
	reqAction.addDataSub(subContainer_143);

		ISubRule sub_381 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_228", null, 0, false);
	subContainer_143.addSubInstruction(sub_381);
		ISubRule sub_382 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_230", null, 0, false);
	subContainer_143.addSubInstruction(sub_382);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC7EF973C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_144(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC7F47DBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_144 = new DataSub();
	reqAction.addDataSub(subContainer_144);

		ISubRule sub_383 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_227", null, 0, false);
	subContainer_144.addSubInstruction(sub_383);
		ISubRule sub_384 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_229", null, 0, false);
	subContainer_144.addSubInstruction(sub_384);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC7F47DEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_145(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC7FE3D0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_145 = new DataSub();
	reqAction.addDataSub(subContainer_145);

		ISubRule sub_385 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_226", null, 0, false);
	subContainer_145.addSubInstruction(sub_385);
		ISubRule sub_386 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_228", null, 0, false);
	subContainer_145.addSubInstruction(sub_386);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC7FE3D3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_146(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC805900C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_146 = new DataSub();
	reqAction.addDataSub(subContainer_146);

		ISubRule sub_387 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_225", null, 0, false);
	subContainer_146.addSubInstruction(sub_387);
		ISubRule sub_388 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_227", null, 0, false);
	subContainer_146.addSubInstruction(sub_388);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC805903C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_147(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC808065C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_147 = new DataSub();
	reqAction.addDataSub(subContainer_147);

		ISubRule sub_389 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_224", null, 0, false);
	subContainer_147.addSubInstruction(sub_389);
		ISubRule sub_390 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_226", null, 0, false);
	subContainer_147.addSubInstruction(sub_390);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC808068C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_148(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC822DC0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_148 = new DataSub();
	reqAction.addDataSub(subContainer_148);

		ISubRule sub_391 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_223", null, 0, false);
	subContainer_148.addSubInstruction(sub_391);
		ISubRule sub_392 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_225", null, 0, false);
	subContainer_148.addSubInstruction(sub_392);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC822DC3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_149(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC84ECE0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_149 = new DataSub();
	reqAction.addDataSub(subContainer_149);

		ISubRule sub_393 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_222", null, 0, false);
	subContainer_149.addSubInstruction(sub_393);
		ISubRule sub_394 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_224", null, 0, false);
	subContainer_149.addSubInstruction(sub_394);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC8513F0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_150(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC85D75BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_150 = new DataSub();
	reqAction.addDataSub(subContainer_150);

		ISubRule sub_395 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_221", null, 0, false);
	subContainer_150.addSubInstruction(sub_395);
		ISubRule sub_396 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_223", null, 0, false);
	subContainer_150.addSubInstruction(sub_396);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC85FE51C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_151(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEC8673BBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_151 = new DataSub();
	reqAction.addDataSub(subContainer_151);

		ISubRule sub_397 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_220", null, 0, false);
	subContainer_151.addSubInstruction(sub_397);
		ISubRule sub_398 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_222", null, 0, false);
	subContainer_151.addSubInstruction(sub_398);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEC869A90C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_152(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED24FD7EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Content-Length", "468", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_6(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_152 = new DataSub();
	reqAction.addDataSub(subContainer_152);

		ISubRule sub_399 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_219", null, 0, false);
	subContainer_152.addSubInstruction(sub_399);
		ISubRule sub_400 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_221", null, 0, false);
	subContainer_152.addSubInstruction(sub_400);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADED24FD81C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_6(HTTPPostData postData) {
				StringBuffer strBuf_6 = new StringBuffer();
strBuf_6.append("id=b2accee5-f822-4c9e-a597-18a9105e0444&tagId=11024&fullRefe");
strBuf_6.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2F&payload=%7B%22s");
strBuf_6.append("itePage%22%3A%7B%22enterpriseId%22%3A%221523082%22%2C%22cart");
strBuf_6.append("Subtotal%22%3A%220%22%2C%22trackingSource%22%3A%22gtm%22%2C%");
strBuf_6.append("22pageType%22%3A%22N%2FA%22%2C%22%22%3A%7B%22userId%22%3A%22");
strBuf_6.append("%22%2C%22emailHash%22%3A%22%22%2C%22marketing_channel%22%3A%");
strBuf_6.append("22In%20Progress%22%7D%7D%7D&isDeviceAccessGranted=false&cjUs");
strBuf_6.append("er=00000000-0000-0000-0000-000000000000&cookies=");
String requestData_6 = strBuf_6.toString();
			
	HTTPPostDataChunk pdc_5 = new HTTPPostDataChunk("A1ECF7ADED252480C9BBE33261613362", postData, requestData_6, "ISO-8859-1", 0, 0);
	postData.addDataChunk(pdc_5);

	}

	public HTTPAction request_153(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED254B9EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Service-Worker", "script", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "serviceworker", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme5nw&sl=0&tt=0\";_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_7 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_7);

	harvestContainer_7.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[105], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_3", null, 0, false);
	IDataSub subContainer_153 = new DataSub();
	reqAction.addDataSub(subContainer_153);

		ISubRule sub_401 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_218", null, 0, false);
	subContainer_153.addSubInstruction(sub_401);
		ISubRule sub_402 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_220", null, 0, false);
	subContainer_153.addSubInstruction(sub_402);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"UTF-8",
			"A1ECF7ADED254BA1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_154(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED2599C1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_154 = new DataSub();
	reqAction.addDataSub(subContainer_154);

		ISubRule sub_403 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_217", null, 0, false);
	subContainer_154.addSubInstruction(sub_403);
		ISubRule sub_404 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_219", null, 0, false);
	subContainer_154.addSubInstruction(sub_404);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"UTF-8",
			"A1ECF7ADED2599C4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_155(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED25E7D8C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(5);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_8 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_8);

	harvestContainer_8.addHarvestInstruction ("resp_hdr_Location_1", dcVars[106], "http.{0,1}://.*?(/.*)", 1, 0, 0, 0, false, "Location_4", null, 0, false);
	IDataSub subContainer_155 = new DataSub();
	reqAction.addDataSub(subContainer_155);

		ISubRule sub_405 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_218", null, 0, false);
	subContainer_155.addSubInstruction(sub_405);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"http",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADED25E7DBC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(301);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("http://");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_156(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED2635FFC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2\"", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_156 = new DataSub();
	reqAction.addDataSub(subContainer_156);

		ISubRule sub_406 = new SubRule("req_uri", 15, 3, true, (IDCCoreVar)dcVars[4], false, "v", null, 0, false);
	subContainer_156.addSubInstruction(sub_406);
		ISubRule sub_407 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_216", null, 0, false);
	subContainer_156.addSubInstruction(sub_407);
		ISubRule sub_408 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_217", null, 0, false);
	subContainer_156.addSubInstruction(sub_408);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADED263602C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/x-icon");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_157(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED26841EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(9);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "_mibhv=anon-1656508510268-7729214690_5124;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_157 = new DataSub();
	reqAction.addDataSub(subContainer_157);

		ISubRule sub_409 = new SubRule("req_uri", 0, 41, false, (IDCCoreVar)dcVars[106], false, "HQFje_jFRalo_url", null, 0, false);
	subContainer_157.addSubInstruction(sub_409);
		ISubRule sub_410 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_216", null, 0, false);
	subContainer_157.addSubInstruction(sub_410);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADED25E7D8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADED25E7D8C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"utf-8",
			"A1ECF7ADED268421C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_158(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED26D237C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "2646", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2\";mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_7(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_158 = new DataSub();
	reqAction.addDataSub(subContainer_158);

		ISubRule sub_411 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_215", null, 0, false);
	subContainer_158.addSubInstruction(sub_411);
		ISubRule sub_412 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_215", null, 0, false);
	subContainer_158.addSubInstruction(sub_412);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADED26D23AC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_7(HTTPPostData postData) {
				StringBuffer strBuf_7 = new StringBuffer();
strBuf_7.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_7.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_7.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_7.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8505385,1920,1040,19");
strBuf_7.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_7.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.43518819");
strBuf_7.append("6217,828254252692.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_7.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_7.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_7.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_7.append(",310,0;-1,2,-94,-102,0,0,0,0,-1,310,1;0,-1,0,0,5101,-1,0;0,0");
strBuf_7.append(",0,0,-1,310,1;-1,-1,1,0,-1,317,0;-1,-1,1,0,-1,629,0;-1,-1,1,");
strBuf_7.append("0,-1,622,0;-1,2,-94,-108,0,1,7058,-2,0,0,310;1,3,7679,-2,0,0");
strBuf_7.append(",310;2,2,7688,-2,0,0,310;3,1,7691,-2,0,0,310;4,3,7692,-2,0,0");
strBuf_7.append(",310;5,2,7698,-2,0,0,310;6,1,7700,-2,0,0,310;7,3,7701,-2,0,0");
strBuf_7.append(",310;8,2,7709,-2,0,0,310;9,1,7710,-2,0,0,310;10,3,7712,-2,0,");
strBuf_7.append("0,310;11,2,7719,-2,0,0,310;12,1,7721,-2,0,0,310;13,3,7723,-2");
strBuf_7.append(",0,0,310;14,2,7733,-2,0,0,310;-1,2,-94,-110,0,1,3026,579,90;");
strBuf_7.append("1,3,4497,579,90,310;2,1,4508,579,90;3,4,4509,579,90,310;4,2,");
strBuf_7.append("4740,579,90,310;5,1,10190,752,90;6,1,10200,754,91;7,1,10202,");
strBuf_7.append("754,92;8,1,10407,750,87;9,1,10499,750,86;10,3,12196,750,86,-");
strBuf_7.append("1;-1,2,-94,-117,-1,2,-94,-111,0,695,-1,-1,-1;-1,2,-94,-109,0");
strBuf_7.append(",695,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,");
strBuf_7.append("-1,2,-94,-112,https://www.officedepot.com/-1,2,-94,-115,1196");
strBuf_7.append("90,93467,32,695,695,0,214514,12196,0,1656508505385,130,17720");
strBuf_7.append(",15,11,2953,3,0,12199,201298,0,7475C20621AC05998EB5C2E913770");
strBuf_7.append("E6D~-1~YAAQP8jZF0SnBq2BAQAAOPGZrwjKioUd7d/uO+cwhktOF2cpSYVcZ");
strBuf_7.append("muYj4qPO9rdhFYzUCDKOFJNJ6l+BhM0xxuzp/RbaJvT4VZDDa05nS86e/w4F");
strBuf_7.append("P1jsjbdVsjY4JKdDUYUd3+6m8Jh7hNcT8GQ0Lcu+1jRWMro6Sv3T5zT87tyS");
strBuf_7.append("gecg5CI3OrGS+AsBMgH+y+NlPDMC87wnmdvMfviDjizxrGyT2mcUD6jhyOa2");
strBuf_7.append("6mvSUwm7IkCzZad57f9p1kcSBwjXzvq7KCNsWr5Ee2eNauQSFh0ge776YFxb");
strBuf_7.append("PjJXWymgLL2pZiJEX73u2lRUCE5uWggQqJaUpwNYQ4HS7g7HQ/Kuzfb2fkPO");
strBuf_7.append("XuS2kchT0Q39FjR+lk6gY4IwOvPldZIvN96N4CdXYqe8zW9lFfC~-1~||-1|");
strBuf_7.append("|~-1,37685,528,2087268304,30261693,PiZtE,25332,82,14,true-1,");
strBuf_7.append("2,-94,-106,1,4-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,");
strBuf_7.append("2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,2132114");
strBuf_7.append("4241322243122-1,2,-94,-70,273720021;-851345892;dis;,7;true;t");
strBuf_7.append("rue;true;-60;true;24;24;true;false;-1-1,2,-94,-80,5372-1,2,-");
strBuf_7.append("94,-116,229645563-1,2,-94,-118,130646-1,2,-94,-129,33c6f54e7");
strBuf_7.append("2ed2196a148f981eb3a5bd51bb6639069e41454a91411e89e70f64e,1,76");
strBuf_7.append("9baa1e58c97f68e09ccec638eeebbd00639644b5049f8a3ec95a8672a5b0");
strBuf_7.append("cb,Google Inc. (Intel),ANGLE (Intel, Intel(R) UHD Graphics 6");
strBuf_7.append("30 Direct3D11 vs_5_0 ps_5_0, D3D11),95f5b71fe531f867faa814bd");
strBuf_7.append("d4050dd8057206d53ecec1163523560525884870,33-1,2,-94,-121,;6;");
strBuf_7.append("14;0\"}");
String requestData_7 = strBuf_7.toString();
			
	HTTPPostDataChunk pdc_6 = new HTTPPostDataChunk("A1ECF7ADED272050C9BBE33261613362", postData, requestData_7, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_6);

	}

	public HTTPAction request_159(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADED274760C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2\"", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_159 = new DataSub();
	reqAction.addDataSub(subContainer_159);

		ISubRule sub_413 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_214", null, 0, false);
	subContainer_159.addSubInstruction(sub_413);
		ISubRule sub_414 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_214", null, 0, false);
	subContainer_159.addSubInstruction(sub_414);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEC3B3A08C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADED274763C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_3(final IContainer parent) {
			HTTPThink think = new HTTPThink(525, 1, parent, parent, "A1ECF7ADEE562A7EC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "catalog_search", "A1ECF7ADEE562A7EC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(1, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_160(this, true, "A1ECF7ADEE562A70C9BBE33261613362", false, true,
						"Config_4", "/catalog/search.do?Ntt=paper",	"/catalog/search.do?Ntt=paper", true, false), 0, 69, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_160(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEE562A82C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0\"", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_9 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_9);

	harvestContainer_9.addHarvestInstruction ("resp_hdr_Location_1", dcVars[107], ".*", 1, 0, 0, 0, false, "Location_5", null, 0, false);
	IDataSub subContainer_160 = new DataSub();
	reqAction.addDataSub(subContainer_160);

		ISubRule sub_415 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_213", null, 0, false);
	subContainer_160.addSubInstruction(sub_415);
		ISubRule sub_416 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_213", null, 0, false);
	subContainer_160.addSubInstruction(sub_416);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEE562A85C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(301);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_4(final IContainer parent) {
			HTTPThink think = new HTTPThink(499, 1, parent, parent, "A1ECF7ADEF51C891C9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Paper  - Office Depot", "A1ECF7ADEF51C891C9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(13, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_161(this, true, "A1ECF7ADEF51C880C9BBE33261613362", true, false,
						"Config_4", "/akam-sw-policy.json",	"/akam-sw-policy.json", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_162(this, false, "A1ECF7ADEE562A70C9BBE33261613362", true, true,
						"Config_4", "/a/browse/paper/N=5+530715/?hijack=paper&type=Search",	"/a/browse/paper/N=5+530715/?hijack=paper&type=Search", true, false), 257, 69, "A1ECF7ADEF51C895C9BBE33261613362", 3);
				httpParallel.addRequest(2, request_163(this, false, "A1ECF7ADEF543980C9BBE33261613362", false, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=2&cachebuster=801961095",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=2&cachebuster=801961095", true, false), 40, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(3, request_164(this, false, "A1ECF7ADEF54AEE4C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/305706/Office-Depot-Brand-Perforated-Writing-Pads",	"/images/t_medium,f_auto/products/305706/Office-Depot-Brand-Perforated-Writing-Pads", true, false), 80, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_165(this, false, "A1ECF7ADEF54AEE4C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/653180/Tru-Ray-Construction-Paper-50-Recycled",	"/images/t_medium,f_auto/products/653180/Tru-Ray-Construction-Paper-50-Recycled", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_166(this, false, "A1ECF7ADEF543980C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/storefronts/copy_printer_paper_150x150.png",	"/images/us/od/storefronts/copy_printer_paper_150x150.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_167(this, false, "A1ECF7ADEF54AEE4C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/195560/Alliance-CAD-Bond-Paper-3-Core",	"/images/t_medium,f_auto/products/195560/Alliance-CAD-Bond-Paper-3-Core", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_168(this, false, "A1ECF7ADEF54AEE4C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/254311/Single-Ply-Thermal-Paper-Rolls-3",	"/images/t_medium,f_auto/products/254311/Single-Ply-Thermal-Paper-Rolls-3", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_169(this, false, "A1ECF7ADEF54AEE4C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/553493/DAX-Certificate-Frame-8-12-x",	"/images/t_medium,f_auto/products/553493/DAX-Certificate-Frame-8-12-x", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_170(this, false, "A1ECF7ADEF54AEE4C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/684300/Gartner-Studios-Thank-You-Cards-5",	"/images/t_medium,f_auto/products/684300/Gartner-Studios-Thank-You-Cards-5", true, false), 116, 69, "A1ECF7ADEF568370C9BBE33261613362", 3);
				httpParallel.addRequest(2, request_171(this, false, "A1ECF7ADEF543980C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/storefronts/filler_graph_paper_150x150.png",	"/images/us/od/storefronts/filler_graph_paper_150x150.png", true, false), 1010, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(4, request_172(this, false, "A1ECF7ADEF58CD60C9BBE33261613362", true, false,
						"Config_6", "/image/upload/v1627669067/content/od/searchnav/deals/deals_bubble_150x150.png",	"/image/upload/v1627669067/content/od/searchnav/deals/deals_bubble_150x150.png", true, false), 423, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 3);
				httpParallel.addRequest(5, request_173(this, false, "A1ECF7ADEF594290C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/386151/Post-it-Super-Sticky-Notes-3",	"/images/t_medium,f_auto/products/386151/Post-it-Super-Sticky-Notes-3", true, false), 423, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 3);
				httpParallel.addRequest(6, request_174(this, false, "A1ECF7ADEF7EA4E0C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/arrows.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/arrows.png", true, false), 12, 69, "A1ECF7ADEF54FCEFC9BBE33261613362", 3);
				httpParallel.addRequest(7, request_175(this, false, "A1ECF7ADEF7ECC4FC9BBE33261613362", true, false,
						"Config_4", "/js/od/intersectionObserver.min.2b1f47f53d.js",	"/js/od/intersectionObserver.min.2b1f47f53d.js", true, false), 631, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(2, request_176(this, false, "A1ECF7ADEF543980C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_177(this, false, "A1ECF7ADEF7FB650C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/storefronts/photo-presentation_paper_storefront.png",	"/images/us/od/storefronts/photo-presentation_paper_storefront.png", true, false), 696, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(9, request_178(this, false, "A1ECF7ADED24FD70C9BBE33261613362", false, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 1846, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_179(this, false, "A1ECF7ADEF7FB650C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 2655, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(10, request_180(this, false, "A1ECF7ADF00BA2F3C9BBE33261613362", true, false,
						"Config_7", "/services/predictsearch-service/api/2/;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?searchTerm=paper",	"/services/predictsearch-service/api/2/;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?searchTerm=paper", true, false), 232, 69, "A1ECF7ADF00ADF50C9BBE33261613362", 3);
				httpParallel.addRequest(8, request_181(this, false, "A1ECF7ADEF7FB650C9BBE33261613362", false, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?items=580450,984690,916585,916577&mapBySkuId=true&pr=",	"/mobile/getAjaxPriceListFromService.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?items=580450,984690,916585,916577&mapBySkuId=true&pr=", true, false), 2949, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(8, request_182(this, false, "A1ECF7ADEF7FB650C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 3314, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
				httpParallel.addRequest(11, request_183(this, false, "A1ECF7ADF00C65F3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/580450/Avery-Laser-Post-Cards-4-14",	"/images/t_search,f_auto/products/580450/Avery-Laser-Post-Cards-4-14", true, false), 304, 69, "A1ECF7ADF00BCA1CC9BBE33261613362", 3);
				httpParallel.addRequest(11, request_184(this, false, "A1ECF7ADF00C65F3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/984690/Avery-Printable-Large-Tent-Cards-Embossed",	"/images/t_search,f_auto/products/984690/Avery-Printable-Large-Tent-Cards-Embossed", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_185(this, false, "A1ECF7ADF00C65F3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/916585/Avery-Printable-Cards-4-x-6",	"/images/t_search,f_auto/products/916585/Avery-Printable-Cards-4-x-6", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_186(this, false, "A1ECF7ADF00C65F3C9BBE33261613362", true, false,
						"Config_6", "/images/t_search,f_auto/products/916577/Avery-Laser-And-Inkjet-Index-Cards",	"/images/t_search,f_auto/products/916577/Avery-Laser-And-Inkjet-Index-Cards", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_187(this, false, "A1ECF7ADF00E3AB0C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 8523, 69, "A1ECF7ADEF5216A1C9BBE33261613362", 2);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_161(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF51C895C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("If-Modified-Since", "Thu, 01 Jan 1970 00:00:00 GMT", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/akam-sw.js", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0\"", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_161 = new DataSub();
	reqAction.addDataSub(subContainer_161);

		ISubRule sub_417 = new SubRule("req_hdr_Referer_1", 0, 38, false, (IDCCoreVar)dcVars[105], false, "Referer_212", null, 0, false);
	subContainer_161.addSubInstruction(sub_417);
		ISubRule sub_418 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_212", null, 0, false);
	subContainer_161.addSubInstruction(sub_418);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"ISO-8859-1",
			"A1ECF7ADEF51C898C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_162(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF5216A1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508510.60;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0\"", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_10 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_10);

	harvestContainer_10.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[108], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_4", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[109], " href=\"(.*?)\"", 398, 398, 0, 0, false, "href_13", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[110], "/media\\.officedepot\\.com(.*?)\"", 22, 16, 0, 0, false, "media.officedepot.com_71", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[111], "/media\\.officedepot\\.com(.*?)\"", 23, 1, 0, 0, false, "media.officedepot.com_70", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[112], "/media\\.officedepot\\.com(.*?)\"", 24, 1, 0, 0, false, "media.officedepot.com_69", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[113], "/media\\.officedepot\\.com(.*?)\"", 25, 1, 0, 0, false, "media.officedepot.com_64", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[114], "/media\\.officedepot\\.com(.*?)\"", 26, 1, 0, 0, false, "media.officedepot.com_67", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[115], "/media\\.officedepot\\.com(.*?)\"", 27, 1, 0, 0, false, "media.officedepot.com_66", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[116], "/media\\.officedepot\\.com(.*?)\"", 28, 1, 0, 0, false, "media.officedepot.com_68", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[117], "/media\\.officedepot\\.com(.*?)\"", 29, 1, 0, 0, false, "media.officedepot.com_65", null, 0, false);
	harvestContainer_10.addHarvestInstruction ("resp_content", dcVars[118], " src=\"(.*?)\"", 62, 11, 0, 0, false, "src_19", null, 0, false);
	IDataSub subContainer_162 = new DataSub();
	reqAction.addDataSub(subContainer_162);

		ISubRule sub_419 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_211", null, 0, false);
	subContainer_162.addSubInstruction(sub_419);
		ISubRule sub_420 = new SubRule("req_uri", 0, 52, false, (IDCCoreVar)dcVars[107], false, "Paper  - Office Depo_url_10", null, 0, false);
	subContainer_162.addSubInstruction(sub_420);
		ISubRule sub_421 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_211", null, 0, false);
	subContainer_162.addSubInstruction(sub_421);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"UTF-8",
			"A1ECF7ADEF5216A4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_163(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF546090C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_163 = new DataSub();
	reqAction.addDataSub(subContainer_163);

		ISubRule sub_422 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_210", null, 0, false);
	subContainer_163.addSubInstruction(sub_422);
		ISubRule sub_423 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_210", null, 0, false);
	subContainer_163.addSubInstruction(sub_423);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF546093C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_164(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF54AEF2C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_164 = new DataSub();
	reqAction.addDataSub(subContainer_164);

		ISubRule sub_424 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_209", null, 0, false);
	subContainer_164.addSubInstruction(sub_424);
		ISubRule sub_425 = new SubRule("req_uri", 0, 82, false, (IDCCoreVar)dcVars[110], false, "Paper  - Office Depo_url_9", null, 0, false);
	subContainer_164.addSubInstruction(sub_425);
		ISubRule sub_426 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_209", null, 0, false);
	subContainer_164.addSubInstruction(sub_426);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF54AEF5C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_165(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF54FCEFC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_165 = new DataSub();
	reqAction.addDataSub(subContainer_165);

		ISubRule sub_427 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_208", null, 0, false);
	subContainer_165.addSubInstruction(sub_427);
		ISubRule sub_428 = new SubRule("req_uri", 0, 78, false, (IDCCoreVar)dcVars[111], false, "Paper  - Office Depo_url_8", null, 0, false);
	subContainer_165.addSubInstruction(sub_428);
		ISubRule sub_429 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_208", null, 0, false);
	subContainer_165.addSubInstruction(sub_429);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF54FCF2C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_166(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF554B20C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_166 = new DataSub();
	reqAction.addDataSub(subContainer_166);

		ISubRule sub_430 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_207", null, 0, false);
	subContainer_166.addSubInstruction(sub_430);
		ISubRule sub_431 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_207", null, 0, false);
	subContainer_166.addSubInstruction(sub_431);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF554B23C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_167(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF55C020C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_167 = new DataSub();
	reqAction.addDataSub(subContainer_167);

		ISubRule sub_432 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_206", null, 0, false);
	subContainer_167.addSubInstruction(sub_432);
		ISubRule sub_433 = new SubRule("req_uri", 0, 70, false, (IDCCoreVar)dcVars[112], false, "Paper  - Office Depo_url_7", null, 0, false);
	subContainer_167.addSubInstruction(sub_433);
		ISubRule sub_434 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_206", null, 0, false);
	subContainer_167.addSubInstruction(sub_434);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF55C023C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_168(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF563550C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_168 = new DataSub();
	reqAction.addDataSub(subContainer_168);

		ISubRule sub_435 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_205", null, 0, false);
	subContainer_168.addSubInstruction(sub_435);
		ISubRule sub_436 = new SubRule("req_uri", 0, 72, false, (IDCCoreVar)dcVars[116], false, "Paper  - Office Depo_url_6", null, 0, false);
	subContainer_168.addSubInstruction(sub_436);
		ISubRule sub_437 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_205", null, 0, false);
	subContainer_168.addSubInstruction(sub_437);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF563553C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_169(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF568370C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_169 = new DataSub();
	reqAction.addDataSub(subContainer_169);

		ISubRule sub_438 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_204", null, 0, false);
	subContainer_169.addSubInstruction(sub_438);
		ISubRule sub_439 = new SubRule("req_uri", 0, 68, false, (IDCCoreVar)dcVars[114], false, "Paper  - Office Depo_url_5", null, 0, false);
	subContainer_169.addSubInstruction(sub_439);
		ISubRule sub_440 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_204", null, 0, false);
	subContainer_169.addSubInstruction(sub_440);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF568373C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_170(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF56F8A0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_170 = new DataSub();
	reqAction.addDataSub(subContainer_170);

		ISubRule sub_441 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_203", null, 0, false);
	subContainer_170.addSubInstruction(sub_441);
		ISubRule sub_442 = new SubRule("req_uri", 0, 73, false, (IDCCoreVar)dcVars[115], false, "Paper  - Office Depo_url_4", null, 0, false);
	subContainer_170.addSubInstruction(sub_442);
		ISubRule sub_443 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_203", null, 0, false);
	subContainer_170.addSubInstruction(sub_443);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF56F8A3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_171(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF576DD0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_171 = new DataSub();
	reqAction.addDataSub(subContainer_171);

		ISubRule sub_444 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_202", null, 0, false);
	subContainer_171.addSubInstruction(sub_444);
		ISubRule sub_445 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_202", null, 0, false);
	subContainer_171.addSubInstruction(sub_445);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF576DD3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_172(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF58CD6EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_172 = new DataSub();
	reqAction.addDataSub(subContainer_172);

		ISubRule sub_446 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_201", null, 0, false);
	subContainer_172.addSubInstruction(sub_446);
		ISubRule sub_447 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[117], false, "Paper  - Office Depo_url_3", null, 0, false);
	subContainer_172.addSubInstruction(sub_447);
		ISubRule sub_448 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_201", null, 0, false);
	subContainer_172.addSubInstruction(sub_448);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF58CD71C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_173(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF59429EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_173 = new DataSub();
	reqAction.addDataSub(subContainer_173);

		ISubRule sub_449 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_200", null, 0, false);
	subContainer_173.addSubInstruction(sub_449);
		ISubRule sub_450 = new SubRule("req_uri", 0, 68, false, (IDCCoreVar)dcVars[113], false, "Paper  - Office Depo_url_2", null, 0, false);
	subContainer_173.addSubInstruction(sub_450);
		ISubRule sub_451 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_200", null, 0, false);
	subContainer_173.addSubInstruction(sub_451);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF5942A1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_174(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF7EA4EEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_174 = new DataSub();
	reqAction.addDataSub(subContainer_174);

		ISubRule sub_452 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_199", null, 0, false);
	subContainer_174.addSubInstruction(sub_452);
		ISubRule sub_453 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_199", null, 0, false);
	subContainer_174.addSubInstruction(sub_453);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF7EA4F1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_175(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF7EF30CC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_175 = new DataSub();
	reqAction.addDataSub(subContainer_175);

		ISubRule sub_454 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_198", null, 0, false);
	subContainer_175.addSubInstruction(sub_454);
		ISubRule sub_455 = new SubRule("req_uri", 0, 45, false, (IDCCoreVar)dcVars[118], false, "Paper  - Office Depo_url", null, 0, false);
	subContainer_175.addSubInstruction(sub_455);
		ISubRule sub_456 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_198", null, 0, false);
	subContainer_175.addSubInstruction(sub_456);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF7EF30FC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_176(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF7F1A63C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_176 = new DataSub();
	reqAction.addDataSub(subContainer_176);

		ISubRule sub_457 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_197", null, 0, false);
	subContainer_176.addSubInstruction(sub_457);
		ISubRule sub_458 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_197", null, 0, false);
	subContainer_176.addSubInstruction(sub_458);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF7F1A66C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_177(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADEF7FB65EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;mt.mbsh=%7B%221656508506408%22%3A%7B%22AC7444TEST%22%3A1%2C%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_ga=GA1.2.565524517.1656508508;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=s79nhcd0tz&ss=l4zme3eb&sl=1&tt=caw&ld=cb2&ul=dp0&hd=ewr\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.0.1656508519.51", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_177 = new DataSub();
	reqAction.addDataSub(subContainer_177);

		ISubRule sub_459 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_196", null, 0, false);
	subContainer_177.addSubInstruction(sub_459);
		ISubRule sub_460 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_196", null, 0, false);
	subContainer_177.addSubInstruction(sub_460);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADEF7FB661C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_178(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00ADF50C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "563", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_8(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_178 = new DataSub();
	reqAction.addDataSub(subContainer_178);

		ISubRule sub_461 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_195", null, 0, false);
	subContainer_178.addSubInstruction(sub_461);
		ISubRule sub_462 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_195", null, 0, false);
	subContainer_178.addSubInstruction(sub_462);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00ADF53C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_8(HTTPPostData postData) {
				StringBuffer strBuf_8 = new StringBuffer();
strBuf_8.append("id=b46c4bf6-367b-456b-aaeb-fcee0249ecc2&tagId=11024&fullRefe");
strBuf_8.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2Fa%2Fbrowse%2Fpap");
strBuf_8.append("er%2FN%3D5%2B530715%2F%3Fhijack%3Dpaper%26type%3DSearch&payl");
strBuf_8.append("oad=%7B%22sitePage%22%3A%7B%22enterpriseId%22%3A%221523082%2");
strBuf_8.append("2%2C%22cartSubtotal%22%3A%220%22%2C%22trackingSource%22%3A%2");
strBuf_8.append("2gtm%22%2C%22pageType%22%3A%22N%2FA%22%2C%22%22%3A%7B%22user");
strBuf_8.append("Id%22%3A%22%22%2C%22emailHash%22%3A%22%22%2C%22marketing_cha");
strBuf_8.append("nnel%22%3A%22In%20Progress%22%7D%7D%7D&isDeviceAccessGranted");
strBuf_8.append("=false&cjUser=00000000-0000-0000-0000-000000000000&cookies=c");
strBuf_8.append("jConsent%3DMHxZfDB8Tnww");
String requestData_8 = strBuf_8.toString();
			
	HTTPPostDataChunk pdc_7 = new HTTPPostDataChunk("A1ECF7ADF00B06B6C9BBE33261613362", postData, requestData_8, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_7);

	}

	public HTTPAction request_179(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00B5480C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1554", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508521.49;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_9(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_179 = new DataSub();
	reqAction.addDataSub(subContainer_179);

		ISubRule sub_463 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_194", null, 0, false);
	subContainer_179.addSubInstruction(sub_463);
		ISubRule sub_464 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_194", null, 0, false);
	subContainer_179.addSubInstruction(sub_464);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00B5483C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_9(HTTPPostData postData) {
				StringBuffer strBuf_9 = new StringBuffer();
strBuf_9.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_9.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_9.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_9.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8522589,1920,1040,19");
strBuf_9.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_9.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.85944270");
strBuf_9.append("6429,828254261294,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,dm");
strBuf_9.append("_en,t_en-1,2,-94,-105,0,0,0,0,-1,310,1;0,-1,0,0,5101,-1,0;0,");
strBuf_9.append("0,0,0,-1,310,1;-1,2,-94,-102,0,0,0,0,-1,310,1;0,-1,0,0,5101,");
strBuf_9.append("-1,0;0,0,0,0,-1,310,1;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-");
strBuf_9.append("117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,");
strBuf_9.append("-1,2,-94,-112,https://www.officedepot.com/a/browse/paper/N=5");
strBuf_9.append("+530715/?hijack=paper&type=Search-1,2,-94,-115,1,32,32,0,0,0");
strBuf_9.append(",0,3,0,1656508522588,-999999,17720,0,0,2953,0,0,7,0,0,7475C2");
strBuf_9.append("0621AC05998EB5C2E913770E6D~-1~YAAQFsjZF/OwjIqBAQAAQxSarwjws3");
strBuf_9.append("Fj8S1BIxszyZLcL95GXrS3i7UtrOiyrhvECcfnpwMd1PA5tIWrhxI9pZYFwz");
strBuf_9.append("BeBFqmpm1nN1+W9Yzf4vVSlvk+0aT1l5++olFTTdGc7YDW8aWF6SqQzRfbuo");
strBuf_9.append("qqMiKxZsmrQGt6LlSjeGWBCHAsUwHgsKpejIwJ6yCgjvBNHl39SdeP84T0Ws");
strBuf_9.append("lf/5dp4epBrdH1LQolN62k0vAd7doGJ/vS8KKymnvfmL/6QFxXciafFjL0uP");
strBuf_9.append("NXZy4N4kJ/59Cc8/dpYQCgzyXtaAKwLTCfmP0OJHOfai4PoV5jD2s6uekpD2");
strBuf_9.append("ZkJhIq5rYWSYJJ0Powo2pSKNqpUCC6vKT/GOJox/N54O/TIbmPFh2qwWYCXY");
strBuf_9.append("HWl1qTQG3eMbPU~-1~-1~-1,37642,-1,-1,30261693,PiZtE,84867,55,");
strBuf_9.append("14,true-1,2,-94,-106,0,0-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,");
strBuf_9.append("0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-1");
strBuf_9.append("27,8-1,2,-94,-70,-1-1,2,-94,-80,94-1,2,-94,-116,230110173-1,");
strBuf_9.append("2,-94,-118,94269-1,2,-94,-129,-1,2,-94,-121,;17;-1;0\"}");
String requestData_9 = strBuf_9.toString();
			
	HTTPPostDataChunk pdc_8 = new HTTPPostDataChunk("A1ECF7ADF00B7BA4C9BBE33261613362", postData, requestData_9, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_8);

	}

	public HTTPAction request_180(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00BA301C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_180 = new DataSub();
	reqAction.addDataSub(subContainer_180);

		ISubRule sub_465 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_193", null, 0, false);
	subContainer_180.addSubInstruction(sub_465);
		ISubRule sub_466 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_193", null, 0, false);
	subContainer_180.addSubInstruction(sub_466);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00BA304C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_181(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00BCA1CC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508521.49;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_181 = new DataSub();
	reqAction.addDataSub(subContainer_181);

		ISubRule sub_467 = new SubRule("req_uri", 133, 4, true, (IDCCoreVar)dcVars[98], false, "mapBySkuId", null, 0, false);
	subContainer_181.addSubInstruction(sub_467);
		ISubRule sub_468 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_192", null, 0, false);
	subContainer_181.addSubInstruction(sub_468);
		ISubRule sub_469 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_192", null, 0, false);
	subContainer_181.addSubInstruction(sub_469);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00B5480C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF00BCA1FC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_182(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00C17F1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1859", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;BVBRANDSID=ea144784-70e8-470d-8dac-815a40059aca;BVBRANDID=c0b5b648-0713-43b6-97ac-42f1916a003f;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;kampyleSessionPageCounter=1;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508521.49;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_10(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_182 = new DataSub();
	reqAction.addDataSub(subContainer_182);

		ISubRule sub_470 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_191", null, 0, false);
	subContainer_182.addSubInstruction(sub_470);
		ISubRule sub_471 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_191", null, 0, false);
	subContainer_182.addSubInstruction(sub_471);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00B5480C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00C17F4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_10(HTTPPostData postData) {
				StringBuffer strBuf_10 = new StringBuffer();
strBuf_10.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_10.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_10.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_10.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8522589,1920,1040,19");
strBuf_10.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_10.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.12678041");
strBuf_10.append("463,828254261294,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;10");
strBuf_10.append(".0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/");
strBuf_10.append("102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1,");
strBuf_10.append("2,-94,-105,0,0,0,0,-1,310,1;0,-1,0,0,5101,-1,0;0,0,0,0,-1,31");
strBuf_10.append("0,1;-1,2,-94,-102,0,0,0,0,-1,310,1;0,-1,0,0,5101,-1,0;0,0,0,");
strBuf_10.append("0,-1,310,1;-1,2,-94,-108,-1,2,-94,-110,0,1,107,755,86;1,1,22");
strBuf_10.append("3,755,84;-1,2,-94,-117,-1,2,-94,-111,0,578,-1,-1,-1;-1,2,-94");
strBuf_10.append(",-109,0,578,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-9");
strBuf_10.append("4,-103,-1,2,-94,-112,https://www.officedepot.com/a/browse/pa");
strBuf_10.append("per/N=5+530715/?hijack=paper&type=Search-1,2,-94,-115,1,2045");
strBuf_10.append(",32,578,578,0,3169,677,0,1656508522588,17,17720,0,2,2953,0,0");
strBuf_10.append(",678,1486,0,7475C20621AC05998EB5C2E913770E6D~-1~YAAQFsjZF7ax");
strBuf_10.append("jIqBAQAAAyGarwj4R8dVqOszyxUx06XgsshZM5v4zwbazcwI9cKobrSMCCZR");
strBuf_10.append("mayJ+dXmPW3WIVgr974GEVKNJ83YfvSCp9RIcNg75Z7q0uyh006U1LpCVsJW");
strBuf_10.append("EloUmWcJVVMgj3TpoyvgYz0PpRykNXaZNQeW4mV+QlQqEETvjgForTygjXoe");
strBuf_10.append("60KY1tHjdOGNIK9xmNLekNwsjaibi1tbrMTwqbU29uNrD5AdE/RYv7XKbFgf");
strBuf_10.append("eClZWrBfPx6HC8xvakrKGRSo7ynFOgSl56PPAQKQOhC4xEXpo58jht07fOge");
strBuf_10.append("g/PdJ6OIJ8Fp6+r3K4GK7UMHY8dJzrsKzwl4QHQ8yQQ/UpKuC59mAXa+aQS/");
strBuf_10.append("nxexnr/yZfCV3ZhUsOZp8DPj/I8oz1ae~-1~-1~-1,37827,184,-2468540");
strBuf_10.append("94,30261693,PiZtE,32079,73,14,true-1,2,-94,-106,9,1-1,2,-94,");
strBuf_10.append("-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-12");
strBuf_10.append("4,-1,2,-94,-126,-1,2,-94,-127,21321144241322243122-1,2,-94,-");
strBuf_10.append("70,273720021;-851345892;dis;,7;true;true;true;-60;true;24;24");
strBuf_10.append(";true;false;-1-1,2,-94,-80,5372-1,2,-94,-116,230110173-1,2,-");
strBuf_10.append("94,-118,108144-1,2,-94,-129,,,0,,,,0-1,2,-94,-121,;3;23;0\"}");
String requestData_10 = strBuf_10.toString();
			
	HTTPPostDataChunk pdc_9 = new HTTPPostDataChunk("A1ECF7ADF00C3EECC9BBE33261613362", postData, requestData_10, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_9);

	}

	public HTTPAction request_183(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00C6601C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_pin_unauth=dWlkPU1qUmtNbU5oTURrdFlXTmhOaTAwTlRoaExUazJaVE10WVRRMFlXSmlabUUyT0RKbA;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_183 = new DataSub();
	reqAction.addDataSub(subContainer_183);

		ISubRule sub_472 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_190", null, 0, false);
	subContainer_183.addSubInstruction(sub_472);
		ISubRule sub_473 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_190", null, 0, false);
	subContainer_183.addSubInstruction(sub_473);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00B5480C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00C6604C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_184(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00CB412C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_184 = new DataSub();
	reqAction.addDataSub(subContainer_184);

		ISubRule sub_474 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_189", null, 0, false);
	subContainer_184.addSubInstruction(sub_474);
		ISubRule sub_475 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_189", null, 0, false);
	subContainer_184.addSubInstruction(sub_475);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00C17F1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00CB415C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_185(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00D0233C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_185 = new DataSub();
	reqAction.addDataSub(subContainer_185);

		ISubRule sub_476 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_188", null, 0, false);
	subContainer_185.addSubInstruction(sub_476);
		ISubRule sub_477 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_188", null, 0, false);
	subContainer_185.addSubInstruction(sub_477);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00C17F1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00D0236C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_186(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00D509BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;_clsk=e2zmnj|1656508516573|1|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=1&tt=caw\";mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_186 = new DataSub();
	reqAction.addDataSub(subContainer_186);

		ISubRule sub_478 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_187", null, 0, false);
	subContainer_186.addSubInstruction(sub_478);
		ISubRule sub_479 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_187", null, 0, false);
	subContainer_186.addSubInstruction(sub_479);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00C17F1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00D509EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_187(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF00E3ABEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3754", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y\";kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_11(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_187 = new DataSub();
	reqAction.addDataSub(subContainer_187);

		ISubRule sub_480 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_186", null, 0, false);
	subContainer_187.addSubInstruction(sub_480);
		ISubRule sub_481 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_186", null, 0, false);
	subContainer_187.addSubInstruction(sub_481);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADEF5216A1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF00C17F1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF00E3AC1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_11(HTTPPostData postData) {
				StringBuffer strBuf_11 = new StringBuffer();
strBuf_11.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_11.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_11.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_11.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8522589,1920,1040,19");
strBuf_11.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_11.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.41929423");
strBuf_11.append("3209,828254261294,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_11.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_11.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_11.append(",2,-94,-105,0,0,0,0,-1,310,1;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_11.append("10,1;-1,2,-94,-102,0,-1,0,0,-1,-1,0;0,0,0,0,-1,310,1;0,-1,0,");
strBuf_11.append("0,5101,-1,0;0,0,0,0,-1,310,1;-1,-1,1,0,-1,317,0;-1,-1,1,0,-1");
strBuf_11.append(",629,0;-1,-1,1,0,-1,622,0;-1,2,-94,-108,-1,2,-94,-110,0,1,10");
strBuf_11.append("7,755,86;1,1,223,755,84;2,1,1931,737,99;3,1,1961,730,109;4,1");
strBuf_11.append(",1991,725,117;5,1,2008,722,123;6,1,2026,721,125;7,1,2058,720");
strBuf_11.append(",128;8,1,3343,717,137;9,1,3549,708,182;10,1,3565,707,190;11,");
strBuf_11.append("1,3640,707,218;12,1,3651,710,226;13,1,3673,713,234;14,1,3690");
strBuf_11.append(",716,240;15,1,3707,722,250;16,1,3723,728,256;17,1,3740,730,2");
strBuf_11.append("58;18,1,3756,742,269;19,1,3773,756,275;20,1,3790,766,279;21,");
strBuf_11.append("1,4087,904,272;22,1,4223,976,244;23,1,4229,980,241;24,1,4256");
strBuf_11.append(",986,238;25,1,4273,990,235;26,1,4290,994,232;27,1,4311,1000,");
strBuf_11.append("227;28,1,4323,1003,224;29,1,4340,1008,221;30,1,4356,1012,218");
strBuf_11.append(";31,1,4373,1018,214;32,1,4391,1026,207;33,1,4406,1032,203;34");
strBuf_11.append(",1,4423,1035,199;35,1,4440,1037,198;36,1,4456,1041,193;37,1,");
strBuf_11.append("4473,1045,188;38,1,4489,1048,186;39,1,4506,1050,183;40,1,452");
strBuf_11.append("3,1054,178;41,1,4539,1059,173;42,1,4556,1061,170;43,1,4573,1");
strBuf_11.append("064,168;44,1,4589,1066,165;45,1,4606,1069,162;46,1,4623,1070");
strBuf_11.append(",160;47,1,4639,1071,158;48,1,4656,1073,155;49,1,4673,1075,15");
strBuf_11.append("2;50,1,4715,1076,139;51,1,4723,1076,138;52,1,4740,1076,136;5");
strBuf_11.append("3,1,4756,1076,133;54,1,4773,1076,131;55,1,4789,1076,130;56,1");
strBuf_11.append(",4806,1076,128;57,1,4823,1076,126;58,1,4839,1076,124;59,1,48");
strBuf_11.append("56,1076,123;60,1,4873,1076,122;61,1,4889,1076,121;62,1,4922,");
strBuf_11.append("1074,120;63,1,4929,1074,119;64,1,4957,1073,118;65,1,4987,107");
strBuf_11.append("2,118;66,1,4995,1072,117;67,1,5022,1071,116;68,1,5029,1070,1");
strBuf_11.append("16;69,1,5047,1070,115;70,1,5056,1069,115;71,1,5081,1068,115;");
strBuf_11.append("72,1,5089,1067,114;73,1,5106,1066,114;74,1,5216,1065,114;75,");
strBuf_11.append("1,5230,1064,114;76,1,5340,1063,114;77,1,5389,1062,114;78,1,5");
strBuf_11.append("406,1061,114;79,1,5422,1060,113;80,1,5439,1059,113;81,1,5584");
strBuf_11.append(",1058,113;82,1,5649,1057,113;83,3,5887,1057,113,-1;-1,2,-94,");
strBuf_11.append("-117,-1,2,-94,-111,0,578,-1,-1,-1;-1,2,-94,-109,0,578,-1,-1,");
strBuf_11.append("-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-1");
strBuf_11.append("12,https://www.officedepot.com/a/browse/paper/N=5+530715/?hi");
strBuf_11.append("jack=paper&type=Search-1,2,-94,-115,1,459725,32,578,578,0,46");
strBuf_11.append("0849,5887,0,1656508522588,17,17720,0,84,2953,1,0,5888,362047");
strBuf_11.append(",0,7475C20621AC05998EB5C2E913770E6D~-1~YAAQFsjZFzqyjIqBAQAA3");
strBuf_11.append("COarwggggGzq8JLfo3VCqY7pxEGGE2ehfoYaf790aNbV5nal0gs3Qplb35NW");
strBuf_11.append("2hWGgpk1QMT45OJt5HnALx5AGLjzHjtMKmo+oJhafIjJlnyj6DK3zFBTPPdq");
strBuf_11.append("x6rOLn/aIiiOLWHVi3VqGDLOU188YWAOMRma40zF7NfnI+uGZozVIwkcFAG+");
strBuf_11.append("ovmEWcik0/mQ3n+pRTdDhHQvE8nbbwpCPZ7OKkt06D7kYgqX6mvu1R/xRrHu");
strBuf_11.append("AKlB1v+8mBlDYvI0RUJBHMBLYIIu9Z4yoMbKlal0YYmBA5Fpjv9DOA0B9+7K");
strBuf_11.append("S1imGca2JNm6T4VnWDNscp+X73rlp4Q8AWj3n/I7yck68KuNVdAJVc+ifX76");
strBuf_11.append("zlxqeTI8tjpZNA60zwQUOaU~-1~-1~-1,36925,184,-246854094,302616");
strBuf_11.append("93,PiZtE,69015,52,14,true-1,2,-94,-106,1,2-1,2,-94,-119,-1-1");
strBuf_11.append(",2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-9");
strBuf_11.append("4,-126,-1,2,-94,-127,21321144241322243122-1,2,-94,-70,273720");
strBuf_11.append("021;-851345892;dis;,7;true;true;true;-60;true;24;24;true;fal");
strBuf_11.append("se;-1-1,2,-94,-80,5372-1,2,-94,-116,230110173-1,2,-94,-118,1");
strBuf_11.append("88134-1,2,-94,-129,33c6f54e72ed2196a148f981eb3a5bd51bb663906");
strBuf_11.append("9e41454a91411e89e70f64e,1,769baa1e58c97f68e09ccec638eeebbd00");
strBuf_11.append("639644b5049f8a3ec95a8672a5b0cb,Google Inc. (Intel),ANGLE (In");
strBuf_11.append("tel, Intel(R) UHD Graphics 630 Direct3D11 vs_5_0 ps_5_0, D3D");
strBuf_11.append("11),95f5b71fe531f867faa814bdd4050dd8057206d53ecec11635235605");
strBuf_11.append("25884870,33-1,2,-94,-121,;3;23;0\"}");
String requestData_11 = strBuf_11.toString();
			
	HTTPPostDataChunk pdc_10 = new HTTPPostDataChunk("A1ECF7ADF00E88D0C9BBE33261613362", postData, requestData_11, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_10);

	}
private HTTPPage page_5(final IContainer parent) {
			HTTPThink think = new HTTPThink(6629, 1, parent, parent, "A1ECF7ADF0C52EAEC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Notebooks &amp; Pads  - Office Depot", "A1ECF7ADF0C52EAEC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(2, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_188(this, true, "A1ECF7ADF0C52EA0C9BBE33261613362", true, true,
						"Config_4", "/a/browse/notebooks-and-pads/N=5+530741/",	"/a/browse/notebooks-and-pads/N=5+530741/", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_189(this, false, "A1ECF7ADF0C66727C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_188(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF0C555B0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_11 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_11);

	harvestContainer_11.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[119], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_5", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[120], " href=\"(.*?)\"", 399, 399, 0, 0, false, "href_14", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[121], "/media\\.officedepot\\.com(.*?)\"", 22, 16, 0, 0, false, "media.officedepot.com_81", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[122], "/media\\.officedepot\\.com(.*?)\"", 23, 1, 0, 0, false, "media.officedepot.com_74", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[123], "/media\\.officedepot\\.com(.*?)\"", 24, 1, 0, 0, false, "media.officedepot.com_73", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[124], "/media\\.officedepot\\.com(.*?)\"", 25, 1, 0, 0, false, "media.officedepot.com_72", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[125], "/media\\.officedepot\\.com(.*?)\"", 26, 1, 0, 0, false, "media.officedepot.com_76", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[126], "/media\\.officedepot\\.com(.*?)\"", 27, 1, 0, 0, false, "media.officedepot.com_77", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[127], "/media\\.officedepot\\.com(.*?)\"", 28, 1, 0, 0, false, "media.officedepot.com_79", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[128], "/media\\.officedepot\\.com(.*?)\"", 29, 1, 0, 0, false, "media.officedepot.com_80", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[129], "/media\\.officedepot\\.com(.*?)\"", 30, 1, 0, 0, false, "media.officedepot.com_75", null, 0, false);
	harvestContainer_11.addHarvestInstruction ("resp_content", dcVars[130], "/media\\.officedepot\\.com(.*?)\"", 31, 1, 0, 0, false, "media.officedepot.com_78", null, 0, false);
	IDataSub subContainer_188 = new DataSub();
	reqAction.addDataSub(subContainer_188);

		ISubRule sub_482 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_185", null, 0, false);
	subContainer_188.addSubInstruction(sub_482);
		ISubRule sub_483 = new SubRule("req_uri", 0, 40, false, (IDCCoreVar)dcVars[109], false, "Notebooks &amp; Pads_url", null, 0, false);
	subContainer_188.addSubInstruction(sub_483);
		ISubRule sub_484 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_185", null, 0, false);
	subContainer_188.addSubInstruction(sub_484);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF0C555B3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_189(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF0C66735C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "4143", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/paper/N=5+530715/?hijack=paper&type=Search", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508523.47;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y\";kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;_gali=monetate_allinone_lightbox;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_12(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_189 = new DataSub();
	reqAction.addDataSub(subContainer_189);

		ISubRule sub_485 = new SubRule("req_hdr_Referer_1", 0, 79, false, (IDCCoreVar)dcVars[108], false, "Referer_184", null, 0, false);
	subContainer_189.addSubInstruction(sub_485);
		ISubRule sub_486 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_184", null, 0, false);
	subContainer_189.addSubInstruction(sub_486);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF0C555B0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF0C555B0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF0C66738C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_12(HTTPPostData postData) {
					String requestData_12 = MetaString.encode(ZipEntryProxy.asXMLFragment(
	                                   "A1ECF7ADE8F3FDF0C9BBE33261613362.testdata",
	                                   "A1ECF7ADF0C68E79C9BBE33261613362",
	                                   4143));
			
	HTTPPostDataChunk pdc_11 = new HTTPPostDataChunk("A1ECF7ADF0C68E79C9BBE33261613362", postData, requestData_12, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_11);

	}
private HTTPPage page_6(final IContainer parent) {
			HTTPThink think = new HTTPThink(0, 1, parent, parent, "A1ECF7ADF19E298EC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "HQFje_jFRalo {1}", "A1ECF7ADF19E298EC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(9, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_190(this, true, "A1ECF7ADF19E2980C9BBE33261613362", false, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=3&cachebuster=2095652521",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=3&cachebuster=2095652521", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_191(this, false, "A1ECF7ADF19E50EEC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/175937/TUL-Discbound-Notebook-Letter-Size-Leather",	"/images/t_medium,f_auto/products/175937/TUL-Discbound-Notebook-Letter-Size-Leather", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_192(this, false, "A1ECF7ADF19EC5C0C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_193(this, false, "A1ECF7ADF19E50EEC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/366732/Adams-Phone-Message-Books-11-x",	"/images/t_medium,f_auto/products/366732/Adams-Phone-Message-Books-11-x", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_194(this, false, "A1ECF7ADF19FFE83C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/331934/TOPS-Glue-Top-Bulk-Scratch-Pads",	"/images/t_medium,f_auto/products/331934/TOPS-Glue-Top-Bulk-Scratch-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_195(this, false, "A1ECF7ADF19E50EEC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/366980/Pacon-Plain-White-Newsprint-Paper-12",	"/images/t_medium,f_auto/products/366980/Pacon-Plain-White-Newsprint-Paper-12", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_196(this, false, "A1ECF7ADF1A09ACBC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/532246/532246_o01_black_n_red_notebook_journal_010320/532246_o01_black_n_red_notebook_journal_010320",	"/images/t_medium,f_auto/products/532246/532246_o01_black_n_red_notebook_journal_010320/532246_o01_black_n_red_notebook_journal_010320", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_197(this, false, "A1ECF7ADF1A0C1EBC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/533400/Office-Depot-Brand-Steno-Books-6",	"/images/t_medium,f_auto/products/533400/Office-Depot-Brand-Steno-Books-6", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_198(this, false, "A1ECF7ADF1A0C1EBC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/161012/Office-Depot-Brand-Pajco-Pocket-TelephoneAddress",	"/images/t_medium,f_auto/products/161012/Office-Depot-Brand-Pajco-Pocket-TelephoneAddress", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_199(this, false, "A1ECF7ADF1A1370BC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/795906/TOPS-Docket-Gold-Premium-Writing-Pads",	"/images/t_medium,f_auto/products/795906/TOPS-Docket-Gold-Premium-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_200(this, false, "A1ECF7ADF1A15E1EC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/588349/Office-Depot-Brand-Wirebound-Notebook-8",	"/images/t_medium,f_auto/products/588349/Office-Depot-Brand-Wirebound-Notebook-8", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_201(this, false, "A1ECF7ADF19FFE83C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/588268/Office-Depot-Brand-Composition-Book-7",	"/images/t_medium,f_auto/products/588268/Office-Depot-Brand-Composition-Book-7", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_202(this, false, "A1ECF7ADED24FD70C9BBE33261613362", false, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 155, 69, "A1ECF7ADF1A1AC3BC9BBE33261613362", 3);
				httpParallel.addRequest(2, request_203(this, false, "A1ECF7ADF19EC5C0C9BBE33261613362", true, true,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 12, 69, "A1ECF7ADF21AD390C9BBE33261613362", 3);
				httpParallel.addRequest(0, request_204(this, false, "A1ECF7ADF19E2980C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 332, 69, "A1ECF7ADF21B48C0C9BBE33261613362", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_190(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF19E2992C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_190 = new DataSub();
	reqAction.addDataSub(subContainer_190);

		ISubRule sub_487 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_183", null, 0, false);
	subContainer_190.addSubInstruction(sub_487);
		ISubRule sub_488 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_183", null, 0, false);
	subContainer_190.addSubInstruction(sub_488);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF19E2995C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_191(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF19E50FCC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_191 = new DataSub();
	reqAction.addDataSub(subContainer_191);

		ISubRule sub_489 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_182", null, 0, false);
	subContainer_191.addSubInstruction(sub_489);
		ISubRule sub_490 = new SubRule("req_uri", 0, 82, false, (IDCCoreVar)dcVars[121], false, "HQFje_jFRalo {1}_url_10", null, 0, false);
	subContainer_191.addSubInstruction(sub_490);
		ISubRule sub_491 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_182", null, 0, false);
	subContainer_191.addSubInstruction(sub_491);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF19E50FFC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_192(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF19EC5CEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_192 = new DataSub();
	reqAction.addDataSub(subContainer_192);

		ISubRule sub_492 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_181", null, 0, false);
	subContainer_192.addSubInstruction(sub_492);
		ISubRule sub_493 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_181", null, 0, false);
	subContainer_192.addSubInstruction(sub_493);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF19EC5D1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_193(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF19FB023C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_193 = new DataSub();
	reqAction.addDataSub(subContainer_193);

		ISubRule sub_494 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_180", null, 0, false);
	subContainer_193.addSubInstruction(sub_494);
		ISubRule sub_495 = new SubRule("req_uri", 0, 70, false, (IDCCoreVar)dcVars[128], false, "HQFje_jFRalo {1}_url_9", null, 0, false);
	subContainer_193.addSubInstruction(sub_495);
		ISubRule sub_496 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_180", null, 0, false);
	subContainer_193.addSubInstruction(sub_496);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF19FB026C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_194(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF19FFE91C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_194 = new DataSub();
	reqAction.addDataSub(subContainer_194);

		ISubRule sub_497 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_179", null, 0, false);
	subContainer_194.addSubInstruction(sub_497);
		ISubRule sub_498 = new SubRule("req_uri", 0, 71, false, (IDCCoreVar)dcVars[127], false, "HQFje_jFRalo {1}_url_8", null, 0, false);
	subContainer_194.addSubInstruction(sub_498);
		ISubRule sub_499 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_179", null, 0, false);
	subContainer_194.addSubInstruction(sub_499);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF19FFE94C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_195(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A04CABC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_195 = new DataSub();
	reqAction.addDataSub(subContainer_195);

		ISubRule sub_500 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_178", null, 0, false);
	subContainer_195.addSubInstruction(sub_500);
		ISubRule sub_501 = new SubRule("req_uri", 0, 76, false, (IDCCoreVar)dcVars[130], false, "HQFje_jFRalo {1}_url_7", null, 0, false);
	subContainer_195.addSubInstruction(sub_501);
		ISubRule sub_502 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_178", null, 0, false);
	subContainer_195.addSubInstruction(sub_502);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A04CAEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_196(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A09AD9C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_196 = new DataSub();
	reqAction.addDataSub(subContainer_196);

		ISubRule sub_503 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_177", null, 0, false);
	subContainer_196.addSubInstruction(sub_503);
		ISubRule sub_504 = new SubRule("req_uri", 0, 133, false, (IDCCoreVar)dcVars[126], false, "HQFje_jFRalo {1}_url_6", null, 0, false);
	subContainer_196.addSubInstruction(sub_504);
		ISubRule sub_505 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_177", null, 0, false);
	subContainer_196.addSubInstruction(sub_505);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A09ADCC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_197(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A0C1F9C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_197 = new DataSub();
	reqAction.addDataSub(subContainer_197);

		ISubRule sub_506 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_176", null, 0, false);
	subContainer_197.addSubInstruction(sub_506);
		ISubRule sub_507 = new SubRule("req_uri", 0, 72, false, (IDCCoreVar)dcVars[125], false, "HQFje_jFRalo {1}_url_5", null, 0, false);
	subContainer_197.addSubInstruction(sub_507);
		ISubRule sub_508 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_176", null, 0, false);
	subContainer_197.addSubInstruction(sub_508);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A0C1FCC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_198(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A10FBBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_198 = new DataSub();
	reqAction.addDataSub(subContainer_198);

		ISubRule sub_509 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_175", null, 0, false);
	subContainer_198.addSubInstruction(sub_509);
		ISubRule sub_510 = new SubRule("req_uri", 0, 88, false, (IDCCoreVar)dcVars[129], false, "HQFje_jFRalo {1}_url_4", null, 0, false);
	subContainer_198.addSubInstruction(sub_510);
		ISubRule sub_511 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_175", null, 0, false);
	subContainer_198.addSubInstruction(sub_511);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A10FBEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_199(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A13719C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_199 = new DataSub();
	reqAction.addDataSub(subContainer_199);

		ISubRule sub_512 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_174", null, 0, false);
	subContainer_199.addSubInstruction(sub_512);
		ISubRule sub_513 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[122], false, "HQFje_jFRalo {1}_url_3", null, 0, false);
	subContainer_199.addSubInstruction(sub_513);
		ISubRule sub_514 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_174", null, 0, false);
	subContainer_199.addSubInstruction(sub_514);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A1371CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_200(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A15E2CC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_200 = new DataSub();
	reqAction.addDataSub(subContainer_200);

		ISubRule sub_515 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_173", null, 0, false);
	subContainer_200.addSubInstruction(sub_515);
		ISubRule sub_516 = new SubRule("req_uri", 0, 79, false, (IDCCoreVar)dcVars[123], false, "HQFje_jFRalo {1}_url_2", null, 0, false);
	subContainer_200.addSubInstruction(sub_516);
		ISubRule sub_517 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_173", null, 0, false);
	subContainer_200.addSubInstruction(sub_517);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A184E0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_201(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF1A1AC3BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=6hqtnkp8nme&ss=l4zme3eb&sl=2&tt=hfy&rl=1&ld=j0y&nu=11b14bcb60d4c08486d0076f8c554b5f&cl=r78&ul=r89&hd=rsn\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508536.34", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_201 = new DataSub();
	reqAction.addDataSub(subContainer_201);

		ISubRule sub_518 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_172", null, 0, false);
	subContainer_201.addSubInstruction(sub_518);
		ISubRule sub_519 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[124], false, "HQFje_jFRalo {1}_url", null, 0, false);
	subContainer_201.addSubInstruction(sub_519);
		ISubRule sub_520 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_172", null, 0, false);
	subContainer_201.addSubInstruction(sub_520);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF1A1AC3EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_202(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF21AD390C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "543", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_13(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_202 = new DataSub();
	reqAction.addDataSub(subContainer_202);

		ISubRule sub_521 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_171", null, 0, false);
	subContainer_202.addSubInstruction(sub_521);
		ISubRule sub_522 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_171", null, 0, false);
	subContainer_202.addSubInstruction(sub_522);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF21AD393C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_13(HTTPPostData postData) {
				StringBuffer strBuf_12 = new StringBuffer();
strBuf_12.append("id=b297b670-01e4-44d6-9672-2c3042559c9a&tagId=11024&fullRefe");
strBuf_12.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2Fa%2Fbrowse%2Fnot");
strBuf_12.append("ebooks-and-pads%2FN%3D5%2B530741%2F&payload=%7B%22sitePage%2");
strBuf_12.append("2%3A%7B%22enterpriseId%22%3A%221523082%22%2C%22cartSubtotal%");
strBuf_12.append("22%3A%220%22%2C%22trackingSource%22%3A%22gtm%22%2C%22pageTyp");
strBuf_12.append("e%22%3A%22N%2FA%22%2C%22%22%3A%7B%22userId%22%3A%22%22%2C%22");
strBuf_12.append("emailHash%22%3A%22%22%2C%22marketing_channel%22%3A%22In%20Pr");
strBuf_12.append("ogress%22%7D%7D%7D&isDeviceAccessGranted=false&cjUser=000000");
strBuf_12.append("00-0000-0000-0000-000000000000&cookies=cjConsent%3DMHxZfDB8T");
strBuf_12.append("nww");
String requestData_13 = strBuf_12.toString();
			
	HTTPPostDataChunk pdc_12 = new HTTPPostDataChunk("A1ECF7ADF21AFAB8C9BBE33261613362", postData, requestData_13, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_12);

	}

	public HTTPAction request_203(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF21B48C0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1541", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.mbsh=%7B%221656508522020%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508537.33;_ga=GA1.1.565524517.1656508508;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=2&tt=hfy&rl=1\"", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_14(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_203 = new DataSub();
	reqAction.addDataSub(subContainer_203);

		ISubRule sub_523 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_170", null, 0, false);
	subContainer_203.addSubInstruction(sub_523);
		ISubRule sub_524 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_170", null, 0, false);
	subContainer_203.addSubInstruction(sub_524);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF21B48C3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_14(HTTPPostData postData) {
				StringBuffer strBuf_13 = new StringBuffer();
strBuf_13.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_13.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_13.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_13.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8538136,1920,1040,19");
strBuf_13.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_13.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.62729604");
strBuf_13.append("7313,828254269068,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,dm");
strBuf_13.append("_en,t_en-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,");
strBuf_13.append("0,0,0,-1,310,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,");
strBuf_13.append("-1,0;0,0,0,0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-");
strBuf_13.append("117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,");
strBuf_13.append("-1,2,-94,-112,https://www.officedepot.com/a/browse/notebooks");
strBuf_13.append("-and-pads/N=5+530741/-1,2,-94,-115,1,32,32,0,0,0,0,1,0,16565");
strBuf_13.append("08538136,-999999,17720,0,0,2953,0,0,2,0,0,7475C20621AC05998E");
strBuf_13.append("B5C2E913770E6D~-1~YAAQP8jZF0KsBq2BAQAA0VaarwiubFHuJIzgsEtElh");
strBuf_13.append("JPLNSktaGB+NROfbREeZLaCwxzsKIKIfVNMaKfaSuSf8KPXGhSIygmgZTp7k");
strBuf_13.append("KQVw69FyNMBHltM+Rab3oSPN6WLuo9OZ6ug/yqPHgfJd95FUmPTrNr2fIPXI");
strBuf_13.append("gEn0Ej6xW4zq/as5i+YL5wcn3nvwXdr+VtdJuiLAOqRS4KLvIq+1yp8wlHmq");
strBuf_13.append("6ZBs33DpuKDxHhWzqULVodl+Xctr6KZ/vJCL8xc0lAIRdXE8GjfRti99Jv/s");
strBuf_13.append("Z+pHAXZSP6LzKxf7FHeJyUCt2SK4ZZpQG/oGdsypEGkzBNwDhvUDDhzpvImz");
strBuf_13.append("StYZmvchLIG4X5CSn4CJNcaVBxoPBe+7aKwrZFe1LU+7hOu0l3K1xJZ1tVYI");
strBuf_13.append("ob~-1~-1~-1,37707,-1,-1,30261693,PiZtE,14685,70,14,true-1,2,");
strBuf_13.append("-94,-106,0,0-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,");
strBuf_13.append("-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94");
strBuf_13.append(",-70,-1-1,2,-94,-80,94-1,2,-94,-116,230529417-1,2,-94,-118,9");
strBuf_13.append("3092-1,2,-94,-129,-1,2,-94,-121,;6;-1;0\"}");
String requestData_14 = strBuf_13.toString();
			
	HTTPPostDataChunk pdc_13 = new HTTPPostDataChunk("A1ECF7ADF21B4920C9BBE33261613362", postData, requestData_14, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_13);

	}

	public HTTPAction request_204(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF21B7029C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1813", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;BVBRANDID=233f656f-4681-4c1d-b8cb-79f6af63b3f2;BVBRANDSID=62ab40e6-20b6-432a-b1f9-ec6e0f336c19;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=2&tt=hfy&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;mt.mbsh=%7B%221656508538370%22%3A%7B%7D%7D;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508538.32", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_15(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_204 = new DataSub();
	reqAction.addDataSub(subContainer_204);

		ISubRule sub_525 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_169", null, 0, false);
	subContainer_204.addSubInstruction(sub_525);
		ISubRule sub_526 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_169", null, 0, false);
	subContainer_204.addSubInstruction(sub_526);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF21B48C0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF21B702CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_15(HTTPPostData postData) {
				StringBuffer strBuf_14 = new StringBuffer();
strBuf_14.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_14.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_14.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_14.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8538136,1920,1040,19");
strBuf_14.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_14.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.64761720");
strBuf_14.append("3323,828254269068,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_14.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_14.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_14.append(",2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_14.append("10,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0");
strBuf_14.append(",0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2,-");
strBuf_14.append("94,-111,0,483,-1,-1,-1;-1,2,-94,-109,0,483,-1,-1,-1,-1,-1,-1");
strBuf_14.append(",-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://");
strBuf_14.append("www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/-");
strBuf_14.append("1,2,-94,-115,1,32,32,483,483,0,966,540,0,1656508538136,12,17");
strBuf_14.append("720,0,0,2953,0,0,542,966,0,7475C20621AC05998EB5C2E913770E6D~");
strBuf_14.append("-1~YAAQP8jZF7+sBq2BAQAAy12arwgFFnLL5I83prY1sk4hrPEGZw3qGG318");
strBuf_14.append("gutFU/MBOerPvzfli4bYSZBp7VAT44hdH/nR5nTUQsV4DzDscBF6Hb1/6BM4");
strBuf_14.append("eNHU9KvzOrkAUihD5JjBPgZmV1pQqnYlXMsawOyJkT2KfEUIsUkbIW+Zy5O5");
strBuf_14.append("9OmyLasKBjqc1WxjZzLCo993/H/AxpOkp5ej3zuaSVSdIN3CQ4KgLoB7M1fg");
strBuf_14.append("hLpUojFMjG1mMVf5Diq5DaABbzRBlkvdsWWvIOULOoelHExwqOk0z6B6vIc3");
strBuf_14.append("biQJZT1mGmDS3twMGgoz9zsb+GmzQXhi8wljlsr+QKS/OsAG+z1oQuaM8cNa");
strBuf_14.append("QwaGYenkBUQzwrhAfBFFH6+opdQ8mf1Mb8FPk5Kwcp8756o~-1~-1~-1,372");
strBuf_14.append("97,95,-2017288238,30261693,PiZtE,47298,72,14,true-1,2,-94,-1");
strBuf_14.append("06,9,1-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-1");
strBuf_14.append("23,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,213211442413222");
strBuf_14.append("43122-1,2,-94,-70,273720021;-851345892;dis;,7;true;true;true");
strBuf_14.append(";-60;true;24;24;true;false;-1-1,2,-94,-80,5372-1,2,-94,-116,");
strBuf_14.append("230529417-1,2,-94,-118,104756-1,2,-94,-129,,,0,,,,0-1,2,-94,");
strBuf_14.append("-121,;4;9;0\"}");
String requestData_15 = strBuf_14.toString();
			
	HTTPPostDataChunk pdc_14 = new HTTPPostDataChunk("A1ECF7ADF21B9728C9BBE33261613362", postData, requestData_15, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_14);

	}
private HTTPPage page_7(final IContainer parent) {
			HTTPThink think = new HTTPThink(1020, 1, parent, parent, "A1ECF7ADF21BE50EC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Save Today on Quality Notepads and Writing Pads | Office Depot", "A1ECF7ADF21BE50EC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(2, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_205(this, true, "A1ECF7ADF21BE500C9BBE33261613362", true, true,
						"Config_4", "/a/browse/writing-pads/N=5+549829/",	"/a/browse/writing-pads/N=5+549829/", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_206(this, false, "A1ECF7ADF21DB9C0C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_205(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF21BE512C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508538.32;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_12 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_12);

	harvestContainer_12.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[131], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_6", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[132], " href=\"(.*?)\"", 25, 25, 0, 0, false, "href_18", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[133], ";jsessionid=(.*?)\\?", 1, 1, 0, 0, false, "jsessionid_5", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[134], "\\?entryFormList\\[0\\]\\.qty=(.*?)&", 1, 1, 0, 0, false, "entryFormList[0].qty_2", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[135], "/media\\.officedepot\\.com(.*?)\"", 22, 17, 0, 0, false, "media.officedepot.com_110", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[136], "/media\\.officedepot\\.com(.*?)\"", 23, 1, 0, 0, false, "media.officedepot.com_106", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[137], "/media\\.officedepot\\.com(.*?)\"", 24, 1, 0, 0, false, "media.officedepot.com_108", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[138], "/media\\.officedepot\\.com(.*?)\"", 25, 1, 0, 0, false, "media.officedepot.com_109", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[139], "/media\\.officedepot\\.com(.*?)\"", 26, 1, 0, 0, false, "media.officedepot.com_107", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[140], " src=\"(.*?)\"", 51, 7, 0, 0, false, "src_27", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[141], " href=\"(.*?)\"", 662, 1, 0, 0, false, "href_15", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[142], "/media\\.officedepot\\.com(.*?)\"", 27, 1, 0, 0, false, "media.officedepot.com_105", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[143], "<[[^>].]*?name=\"entryFormList\\[0\\]\\.sku\"(([[^>].]*?value=\"(.*?)\")|(?:[[^>].]*?>))", 1, 1, 0, 0, false, "value", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[144], "/media\\.officedepot\\.com(.*?)\"", 28, 1, 0, 0, false, "media.officedepot.com_104", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[145], "/media\\.officedepot\\.com(.*?)\"", 29, 1, 0, 0, false, "media.officedepot.com_103", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[146], "/media\\.officedepot\\.com(.*?)\"", 31, 2, 0, 0, false, "media.officedepot.com_102", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[147], "/media\\.officedepot\\.com(.*?)\"", 32, 1, 0, 0, false, "media.officedepot.com_101", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[148], "/media\\.officedepot\\.com(.*?)\"", 33, 1, 0, 0, false, "media.officedepot.com_100", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[149], "/media\\.officedepot\\.com(.*?)\"", 34, 1, 0, 0, false, "media.officedepot.com_99", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[150], "/media\\.officedepot\\.com(.*?)\"", 35, 1, 0, 0, false, "media.officedepot.com_98", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[151], "/media\\.officedepot\\.com(.*?)\"", 36, 1, 0, 0, false, "media.officedepot.com_97", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[152], "/media\\.officedepot\\.com(.*?)\"", 37, 1, 0, 0, false, "media.officedepot.com_96", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[153], "/media\\.officedepot\\.com(.*?)\"", 38, 1, 0, 0, false, "media.officedepot.com_95", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[154], "/media\\.officedepot\\.com(.*?)\"", 39, 1, 0, 0, false, "media.officedepot.com_94", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[155], "/media\\.officedepot\\.com(.*?)\"", 40, 1, 0, 0, false, "media.officedepot.com_93", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[156], "/media\\.officedepot\\.com(.*?)\"", 41, 1, 0, 0, false, "media.officedepot.com_92", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[157], "/media\\.officedepot\\.com(.*?)\"", 42, 1, 0, 0, false, "media.officedepot.com_91", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[158], "/media\\.officedepot\\.com(.*?)\"", 43, 1, 0, 0, false, "media.officedepot.com_90", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[159], "/media\\.officedepot\\.com(.*?)\"", 44, 1, 0, 0, false, "media.officedepot.com_89", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[160], "/media\\.officedepot\\.com(.*?)\"", 45, 1, 0, 0, false, "media.officedepot.com_88", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[161], "/media\\.officedepot\\.com(.*?)\"", 46, 1, 0, 0, false, "media.officedepot.com_87", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[162], "/media\\.officedepot\\.com(.*?)\"", 47, 1, 0, 0, false, "media.officedepot.com_86", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[163], "/media\\.officedepot\\.com(.*?)\"", 48, 1, 0, 0, false, "media.officedepot.com_85", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[164], "/media\\.officedepot\\.com(.*?)\"", 49, 1, 0, 0, false, "media.officedepot.com_84", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[165], "/media\\.officedepot\\.com(.*?)\"", 50, 1, 0, 0, false, "media.officedepot.com_83", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[166], "/media\\.officedepot\\.com(.*?)\"", 51, 1, 0, 0, false, "media.officedepot.com_82", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[167], " src=\"(.*?)\"", 189, 13, 0, 0, false, "src_21", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[168], " href=\"(.*?)\"", 838, 1, 0, 0, false, "href_17", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[169], " src=\"(.*?)\"", 190, 1, 0, 0, false, "src_20", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[170], " href=\"(.*?)\"", 839, 1, 0, 0, false, "href_16", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[171], " src=\"(.*?)\"", 197, 7, 0, 0, false, "src_26", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[172], " src=\"(.*?)\"", 198, 1, 0, 0, false, "src_25", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[173], " src=\"(.*?)\"", 199, 1, 0, 0, false, "src_24", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[174], " src=\"(.*?)\"", 200, 1, 0, 0, false, "src_23", null, 0, false);
	harvestContainer_12.addHarvestInstruction ("resp_content", dcVars[175], " src=\"(.*?)\"", 201, 1, 0, 0, false, "src_22", null, 0, false);
	IDataSub subContainer_205 = new DataSub();
	reqAction.addDataSub(subContainer_205);

		ISubRule sub_527 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_168", null, 0, false);
	subContainer_205.addSubInstruction(sub_527);
		ISubRule sub_528 = new SubRule("req_uri", 0, 34, false, (IDCCoreVar)dcVars[120], false, "Save Today on Qualit_url", null, 0, false);
	subContainer_205.addSubInstruction(sub_528);
		ISubRule sub_529 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_168", null, 0, false);
	subContainer_205.addSubInstruction(sub_529);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF21BE515C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_206(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF21DB9CEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1903", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/notebooks-and-pads/N=5+530741/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508525151|2|1|l.clarity.ms/collect;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=2&tt=hfy&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508538.32;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_16(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_206 = new DataSub();
	reqAction.addDataSub(subContainer_206);

		ISubRule sub_530 = new SubRule("req_hdr_Referer_1", 0, 67, false, (IDCCoreVar)dcVars[119], false, "Referer_167", null, 0, false);
	subContainer_206.addSubInstruction(sub_530);
		ISubRule sub_531 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_167", null, 0, false);
	subContainer_206.addSubInstruction(sub_531);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF21BE512C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF21BE512C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF21DB9D1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_16(HTTPPostData postData) {
				StringBuffer strBuf_15 = new StringBuffer();
strBuf_15.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_15.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_15.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_15.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8538136,1920,1040,19");
strBuf_15.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_15.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.38556152");
strBuf_15.append("0192,828254269068,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_15.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_15.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_15.append(",2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_15.append("10,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0");
strBuf_15.append(",0,-1,310,0;-1,2,-94,-108,-1,2,-94,-110,0,3,1741,667,519,-1;");
strBuf_15.append("-1,2,-94,-117,-1,2,-94,-111,0,483,-1,-1,-1;-1,2,-94,-109,0,4");
strBuf_15.append("83,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1");
strBuf_15.append(",2,-94,-112,https://www.officedepot.com/a/browse/notebooks-a");
strBuf_15.append("nd-pads/N=5+530741/-1,2,-94,-115,1,2962,32,483,483,0,3896,17");
strBuf_15.append("41,0,1656508538136,12,17720,0,1,2953,1,0,1742,2707,0,7475C20");
strBuf_15.append("621AC05998EB5C2E913770E6D~-1~YAAQP8jZF8ysBq2BAQAAzV+arwgVXLx");
strBuf_15.append("VEE0+bMds9GTE7B4aY3l6G9rljcwolRg6BRsiZzEsvU1XuYVopMotFE95c1k");
strBuf_15.append("WKxPX4e9yx5gHxBHkoDCPxWWQkd5gqHtnBX9viw2gARpIpgoGlAmkIdGVn2w");
strBuf_15.append("7njoTPv+V7RL+y5HRC5eEEWBM60o+lHiwbRyCU/r07NOVezug3AAJ4aqsPW0");
strBuf_15.append("j8RIOUalpMPbjj+6/XFy2tMSah+p4NHGcZUkBBhxgqrYSkMsZEv/8wOQ/YJs");
strBuf_15.append("DxV7lsjxnR2PV9IFCCMs0vOe/0PRoUZkKbiDSxylIbD41XvYJPR6nkUUw5e9");
strBuf_15.append("EyuxgzGGOvdlJij1Hqj2R4JP7KE6fohKRiuIZNmLwaOfWAA/vTOCB3iAKnsL");
strBuf_15.append("1eXacme2y8dqd~-1~-1~-1,37522,95,-2017288238,30261693,PiZtE,1");
strBuf_15.append("00472,49,14,true-1,2,-94,-106,1,2-1,2,-94,-119,-1-1,2,-94,-1");
strBuf_15.append("22,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1");
strBuf_15.append(",2,-94,-127,21321144241322243122-1,2,-94,-70,273720021;-8513");
strBuf_15.append("45892;dis;,7;true;true;true;-60;true;24;24;true;false;-1-1,2");
strBuf_15.append(",-94,-80,5372-1,2,-94,-116,230529417-1,2,-94,-118,106330-1,2");
strBuf_15.append(",-94,-129,,,769baa1e58c97f68e09ccec638eeebbd00639644b5049f8a");
strBuf_15.append("3ec95a8672a5b0cb,,,,0-1,2,-94,-121,;3;9;0\"}");
String requestData_16 = strBuf_15.toString();
			
	HTTPPostDataChunk pdc_15 = new HTTPPostDataChunk("A1ECF7ADF21DE0D9C9BBE33261613362", postData, requestData_16, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_15);

	}
private HTTPPage page_8(final IContainer parent) {
			HTTPThink think = new HTTPThink(0, 1, parent, parent, "A1ECF7ADF2950CAEC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "HQFje_jFRalo {2}", "A1ECF7ADF2950CAEC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(20, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_207(this, true, "A1ECF7ADF2950CA0C9BBE33261613362", true, false,
						"Config_4", "/styles/od/compare.min.24ed94cf7a.css",	"/styles/od/compare.min.24ed94cf7a.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_208(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1599156564/content/od/searchnav/writing_pads/3620_visnav_writing-pads_02.jpg",	"/image/upload/v1599156564/content/od/searchnav/writing_pads/3620_visnav_writing-pads_02.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_209(this, false, "A1ECF7ADF295A8E3C9BBE33261613362", false, false,
						"Config_4", "/js/od/csl.min.7e5ee1ef3d.js",	"/js/od/csl.min.7e5ee1ef3d.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_210(this, false, "A1ECF7ADF295F700C9BBE33261613362", false, false,
						"Config_4", "/styles/compare_bar.min.4a2940e846b7889ce3ee.css",	"/styles/compare_bar.min.4a2940e846b7889ce3ee.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_211(this, false, "A1ECF7ADF295F700C9BBE33261613362", false, false,
						"Config_4", "/styles/atc_subscribtion_lightbox.min.90f1733b8dcc72e86eb0.css",	"/styles/atc_subscribtion_lightbox.min.90f1733b8dcc72e86eb0.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_212(this, false, "A1ECF7ADF295A8E3C9BBE33261613362", false, false,
						"Config_4", "/js/od/compare.min.03e7ab0c20.js",	"/js/od/compare.min.03e7ab0c20.js", true, false), 34, 69, "A1ECF7ADF295F70EC9BBE33261613362", 3);
				httpParallel.addRequest(1, request_213(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1599156547/content/od/searchnav/writing_pads/3620_visnav_writing-pads_04.jpg",	"/image/upload/v1599156547/content/od/searchnav/writing_pads/3620_visnav_writing-pads_04.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_214(this, false, "A1ECF7ADF29756D3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1599156558/content/od/searchnav/writing_pads/3620_visnav_writing-pads_01.jpg",	"/image/upload/v1599156558/content/od/searchnav/writing_pads/3620_visnav_writing-pads_01.jpg", true, false), 62, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(5, request_215(this, false, "A1ECF7ADF297A4F3C9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1599156531/content/od/searchnav/writing_pads/3620_visnav_writing-pads_05.jpg",	"/image/upload/v1599156531/content/od/searchnav/writing_pads/3620_visnav_writing-pads_05.jpg", true, false), 128, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(6, request_216(this, false, "A1ECF7ADF297F30CC9BBE33261613362", false, false,
						"Config_6", "/image/upload/v1599156561/content/od/searchnav/writing_pads/3620_visnav_writing-pads_03.jpg",	"/image/upload/v1599156561/content/od/searchnav/writing_pads/3620_visnav_writing-pads_03.jpg", true, false), 129, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_217(this, false, "A1ECF7ADF2981A23C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/305706/Office-Depot-Brand-Perforated-Writing-Pads",	"/images/t_search,f_auto/products/305706/Office-Depot-Brand-Perforated-Writing-Pads", true, false), 125, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(8, request_218(this, false, "A1ECF7ADF298413BC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625529/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/625529/Office-Depot-Brand-Professional-Legal-Pad", true, false), 129, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_219(this, false, "A1ECF7ADF295F700C9BBE33261613362", false, false,
						"Config_4", "/js/od/skuList.min.5b3cf4947a.js",	"/js/od/skuList.min.5b3cf4947a.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_220(this, false, "A1ECF7ADF295A8E3C9BBE33261613362", false, false,
						"Config_4", "/js/od/localStorageCache.min.94b4cbf9c4.js",	"/js/od/localStorageCache.min.94b4cbf9c4.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_221(this, false, "A1ECF7ADF29756D3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/305466/Office-Depot-Brand-Perforated-Writing-Pads",	"/images/t_search,f_auto/products/305466/Office-Depot-Brand-Perforated-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_222(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/image/upload/content/od/searchnavadplacements/tulnotead1.jpg",	"/image/upload/content/od/searchnavadplacements/tulnotead1.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_223(this, false, "A1ECF7ADF299C793C9BBE33261613362", false, false,
						"Config_4", "/js/od/search.min.fd2ba1e358.js",	"/js/od/search.min.fd2ba1e358.js", true, false), 11, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(10, request_224(this, false, "A1ECF7ADF29A15B0C9BBE33261613362", false, false,
						"Config_4", "/js/od/protectionplans.min.8cd3245391.js",	"/js/od/protectionplans.min.8cd3245391.js", true, false), 50, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(11, request_225(this, false, "A1ECF7ADF29A3D13C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 47, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_226(this, false, "A1ECF7ADF295F700C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/reviews/v2/5.gif",	"/images/us/od/reviews/v2/5.gif", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_227(this, false, "A1ECF7ADF2A58760C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/reviews/v2/4.gif",	"/images/us/od/reviews/v2/4.gif", true, false), 46, 69, "A1ECF7ADF2950CB2C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_228(this, false, "A1ECF7ADF2981A23C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/307397/Office-Depot-Brand-Perforated-Writing-Pads",	"/images/t_search,f_auto/products/307397/Office-Depot-Brand-Perforated-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_229(this, false, "A1ECF7ADF297A4F3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625502/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/625502/Office-Depot-Brand-Professional-Legal-Pad", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_230(this, false, "A1ECF7ADF297F30CC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/711382/TOPS-Docket-Gold-Premium-Writing-Pads",	"/images/t_search,f_auto/products/711382/TOPS-Docket-Gold-Premium-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_231(this, false, "A1ECF7ADF295A8E3C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/reviews/v2/3.gif",	"/images/us/od/reviews/v2/3.gif", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_232(this, false, "A1ECF7ADF299C793C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/reviews/v2/2.gif",	"/images/us/od/reviews/v2/2.gif", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(10, request_233(this, false, "A1ECF7ADF29A15B0C9BBE33261613362", true, false,
						"Config_4", "/images/us/od/reviews/v2/1.gif",	"/images/us/od/reviews/v2/1.gif", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(11, request_234(this, false, "A1ECF7ADF29A3D13C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/common/check-green-v2.png",	"/images/us/od/common/check-green-v2.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_235(this, false, "A1ECF7ADF295F700C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/common/info-blue.png",	"/images/us/od/common/info-blue.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_236(this, false, "A1ECF7ADF2A58760C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/icon_same_day_delivery.png",	"/images/us/od/icon_same_day_delivery.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_237(this, false, "A1ECF7ADF298413BC9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/bg_sprite_gray_icons.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/bg_sprite_gray_icons.png", true, false), 16, 69, "A1ECF7ADF2A5876EC9BBE33261613362", 3);
				httpParallel.addRequest(1, request_238(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/nav-tab-sprite.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/nav-tab-sprite.png", true, false), 16, 69, "A1ECF7ADF2A5876EC9BBE33261613362", 3);
				httpParallel.addRequest(2, request_239(this, false, "A1ECF7ADF295A8E3C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/common/eco_concious.jpg",	"/images/us/od/common/eco_concious.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_240(this, false, "A1ECF7ADF29756D3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625349/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/625349/Office-Depot-Brand-Professional-Legal-Pad", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_241(this, false, "A1ECF7ADED24FD70C9BBE33261613362", false, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 11, 69, "A1ECF7ADF3295D60C9BBE33261613362", 3);
				httpParallel.addRequest(5, request_242(this, false, "A1ECF7ADF297A4F3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/275254/Office-Depot-Brand-Sugar-Cane-Paper",	"/images/t_search,f_auto/products/275254/Office-Depot-Brand-Sugar-Cane-Paper", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_243(this, false, "A1ECF7ADF297F30CC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625313/Office-Depot-Brand-Mini-Perforated-Legal",	"/images/t_search,f_auto/products/625313/Office-Depot-Brand-Mini-Perforated-Legal", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_244(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625538/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/625538/Office-Depot-Brand-Professional-Legal-Pad", true, false), 52, 69, "A1ECF7ADF3295D60C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_245(this, false, "A1ECF7ADF2981A23C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625358/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/625358/Office-Depot-Brand-Professional-Legal-Pad", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_246(this, false, "A1ECF7ADF299C793C9BBE33261613362", false, false,
						"Config_4", "/images/us/od/common/eco_concious_recycle.jpg",	"/images/us/od/common/eco_concious_recycle.jpg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_247(this, false, "A1ECF7ADF298413BC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/257438/Office-Depot-Brand-Professional-Perforated-Pads",	"/images/t_search,f_auto/products/257438/Office-Depot-Brand-Professional-Perforated-Pads", true, false), 72, 69, "A1ECF7ADF3295D60C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_248(this, false, "A1ECF7ADF295F700C9BBE33261613362", true, false,
						"Config_4", "/js/compare_bar.min.1b1cbd6e846d1fd8a95a.js",	"/js/compare_bar.min.1b1cbd6e846d1fd8a95a.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_249(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/271289/Office-Depot-Brand-Professional-Perforated-Pads",	"/images/t_search,f_auto/products/271289/Office-Depot-Brand-Professional-Perforated-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_250(this, false, "A1ECF7ADF2A58760C9BBE33261613362", false, false,
						"Config_4", "/js/atc_subscribtion_lightbox.min.05c42a9f3db82916891b.js",	"/js/atc_subscribtion_lightbox.min.05c42a9f3db82916891b.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_251(this, false, "A1ECF7ADF295A8E3C9BBE33261613362", true, true,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_252(this, false, "A1ECF7ADF29756D3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/727593/Universal-Perforated-Ruled-Writing-Pads-WideLegal",	"/images/t_search,f_auto/products/727593/Universal-Perforated-Ruled-Writing-Pads-WideLegal", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_253(this, false, "A1ECF7ADF2981A23C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/711705/TOPS-Docket-Gold-Premium-Writing-Pads",	"/images/t_search,f_auto/products/711705/TOPS-Docket-Gold-Premium-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_254(this, false, "A1ECF7ADF297F30CC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/223111/Office-Depot-Brand-Perforated-Legal-Pads",	"/images/t_search,f_auto/products/223111/Office-Depot-Brand-Perforated-Legal-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_255(this, false, "A1ECF7ADF2A58760C9BBE33261613362", false, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=8&cachebuster=1755259016",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=8&cachebuster=1755259016", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_256(this, false, "A1ECF7ADF298413BC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/272151/TOPS-Docket-Gold-Premium-Writing-Pads",	"/images/t_search,f_auto/products/272151/TOPS-Docket-Gold-Premium-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_257(this, false, "A1ECF7ADF297A4F3C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/625439/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/625439/Office-Depot-Brand-Professional-Legal-Pad", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_258(this, false, "A1ECF7ADF29581D0C9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/268091/Office-Depot-Brand-Glue-Top-Legal",	"/images/t_search,f_auto/products/268091/Office-Depot-Brand-Glue-Top-Legal", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_259(this, false, "A1ECF7ADF29756D3C9BBE33261613362", true, false,
						"Config_6", "/images/t_search,f_auto/products/795906/TOPS-Docket-Gold-Premium-Writing-Pads",	"/images/t_search,f_auto/products/795906/TOPS-Docket-Gold-Premium-Writing-Pads", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_260(this, false, "A1ECF7ADF297A4F3C9BBE33261613362", true, false,
						"Config_6", "/images/t_search,f_auto/products/272141/TOPS-Docket-Writing-Tablet-5-x",	"/images/t_search,f_auto/products/272141/TOPS-Docket-Writing-Tablet-5-x", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_261(this, false, "A1ECF7ADF29581D0C9BBE33261613362", true, false,
						"Config_6", "/images/t_search,f_auto/products/272121/TOPS-Docket-Writing-Tablet-5-x",	"/images/t_search,f_auto/products/272121/TOPS-Docket-Writing-Tablet-5-x", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_262(this, false, "A1ECF7ADF297F30CC9BBE33261613362", true, false,
						"Config_6", "/images/t_search,f_auto/products/634277/Office-Depot-Brand-Professional-Legal-Pad",	"/images/t_search,f_auto/products/634277/Office-Depot-Brand-Professional-Legal-Pad", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_263(this, false, "A1ECF7ADF298413BC9BBE33261613362", false, false,
						"Config_6", "/images/t_search,f_auto/products/786895/Universal-Perforated-Ruled-Writing-Pads-WideLegal",	"/images/t_search,f_auto/products/786895/Universal-Perforated-Ruled-Writing-Pads-WideLegal", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_264(this, false, "A1ECF7ADF2981A23C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/refinements-sprite.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/refinements-sprite.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_265(this, false, "A1ECF7ADF298413BC9BBE33261613362", false, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/overlay-new.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/overlay-new.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_266(this, false, "A1ECF7ADF298413BC9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/pagination-sprite.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/pagination-sprite.png", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(12, request_267(this, false, "A1ECF7ADF2A58760C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 826, 69, "A1ECF7ADF36C80E0C9BBE33261613362", 3);
				httpParallel.addRequest(12, request_268(this, false, "A1ECF7ADF2A58760C9BBE33261613362", false, false,
						"Config_4", "/js/sponsoredskus.chunk.min.0a16022d03cc65ca69aa.js",	"/js/sponsoredskus.chunk.min.0a16022d03cc65ca69aa.js", true, false), 102, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(12, request_269(this, false, "A1ECF7ADF2A58760C9BBE33261613362", true, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do?items=916585,580450,984690,916577&mapBySkuId=true&pr=",	"/mobile/getAjaxPriceListFromService.do?items=916585,580450,984690,916577&mapBySkuId=true&pr=", true, false), 247, 69, "A1ECF7ADF36CCF5BC9BBE33261613362", 3);
				httpParallel.addRequest(14, request_270(this, false, "A1ECF7ADF36D6B9DC9BBE33261613362", true, false,
						"Config_5", "/compare-bar/static/css/main.css",	"/compare-bar/static/css/main.css", true, false), 106, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(15, request_271(this, false, "A1ECF7ADF36DB960C9BBE33261613362", true, false,
						"Config_5", "/compare-bar/static/css/global.css",	"/compare-bar/static/css/global.css", true, false), 107, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(16, request_272(this, false, "A1ECF7ADF36E2EDBC9BBE33261613362", true, false,
						"Config_5", "/subscription-lightbox/static/css/main.css",	"/subscription-lightbox/static/css/main.css", true, false), 109, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(17, request_273(this, false, "A1ECF7ADF36ECB1BC9BBE33261613362", true, false,
						"Config_5", "/subscription-lightbox/static/css/global.css",	"/subscription-lightbox/static/css/global.css", true, false), 122, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(18, request_274(this, false, "A1ECF7ADF36F193BC9BBE33261613362", true, false,
						"Config_5", "/compare-bar/static/js/main.js",	"/compare-bar/static/js/main.js", true, false), 118, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(19, request_275(this, false, "A1ECF7ADF36FB530C9BBE33261613362", true, false,
						"Config_5", "/subscription-lightbox/static/js/main.js",	"/subscription-lightbox/static/js/main.js", true, false), 120, 69, "A1ECF7ADF36CA7F4C9BBE33261613362", 3);
				httpParallel.addRequest(9, request_276(this, false, "A1ECF7ADF299C793C9BBE33261613362", true, false,
						"Config_4", "/akam-sw.js",	"/akam-sw.js", true, false), 1667, 69, "A1ECF7ADF36FB53EC9BBE33261613362", 3);
				httpParallel.addRequest(11, request_277(this, false, "A1ECF7ADF29A3D13C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 358, 69, "A1ECF7ADF370EDB5C9BBE33261613362", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_207(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2950CB2C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_207 = new DataSub();
	reqAction.addDataSub(subContainer_207);

		ISubRule sub_532 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_166", null, 0, false);
	subContainer_207.addSubInstruction(sub_532);
		ISubRule sub_533 = new SubRule("req_uri", 0, 37, false, (IDCCoreVar)dcVars[132], false, "HQFje_jFRalo {2}_url_40", null, 0, false);
	subContainer_207.addSubInstruction(sub_533);
		ISubRule sub_534 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_166", null, 0, false);
	subContainer_207.addSubInstruction(sub_534);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2950CB5C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_208(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF29581DEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_208 = new DataSub();
	reqAction.addDataSub(subContainer_208);

		ISubRule sub_535 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_165", null, 0, false);
	subContainer_208.addSubInstruction(sub_535);
		ISubRule sub_536 = new SubRule("req_uri", 0, 91, false, (IDCCoreVar)dcVars[135], false, "HQFje_jFRalo {2}_url_39", null, 0, false);
	subContainer_208.addSubInstruction(sub_536);
		ISubRule sub_537 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_165", null, 0, false);
	subContainer_208.addSubInstruction(sub_537);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF29581E1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_209(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF295A8F1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_209 = new DataSub();
	reqAction.addDataSub(subContainer_209);

		ISubRule sub_538 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_164", null, 0, false);
	subContainer_209.addSubInstruction(sub_538);
		ISubRule sub_539 = new SubRule("req_uri", 0, 28, false, (IDCCoreVar)dcVars[140], false, "HQFje_jFRalo {2}_url_38", null, 0, false);
	subContainer_209.addSubInstruction(sub_539);
		ISubRule sub_540 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_164", null, 0, false);
	subContainer_209.addSubInstruction(sub_540);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF295A8F4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_210(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF295F70EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_210 = new DataSub();
	reqAction.addDataSub(subContainer_210);

		ISubRule sub_541 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_163", null, 0, false);
	subContainer_210.addSubInstruction(sub_541);
		ISubRule sub_542 = new SubRule("req_uri", 0, 48, false, (IDCCoreVar)dcVars[168], false, "HQFje_jFRalo {2}_url_37", null, 0, false);
	subContainer_210.addSubInstruction(sub_542);
		ISubRule sub_543 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_163", null, 0, false);
	subContainer_210.addSubInstruction(sub_543);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF295F711C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_211(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2969340C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_211 = new DataSub();
	reqAction.addDataSub(subContainer_211);

		ISubRule sub_544 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_162", null, 0, false);
	subContainer_211.addSubInstruction(sub_544);
		ISubRule sub_545 = new SubRule("req_uri", 0, 62, false, (IDCCoreVar)dcVars[170], false, "HQFje_jFRalo {2}_url_36", null, 0, false);
	subContainer_211.addSubInstruction(sub_545);
		ISubRule sub_546 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_162", null, 0, false);
	subContainer_211.addSubInstruction(sub_546);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2969343C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_212(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF296BAA3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_212 = new DataSub();
	reqAction.addDataSub(subContainer_212);

		ISubRule sub_547 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_161", null, 0, false);
	subContainer_212.addSubInstruction(sub_547);
		ISubRule sub_548 = new SubRule("req_uri", 0, 32, false, (IDCCoreVar)dcVars[171], false, "HQFje_jFRalo {2}_url_35", null, 0, false);
	subContainer_212.addSubInstruction(sub_548);
		ISubRule sub_549 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_161", null, 0, false);
	subContainer_212.addSubInstruction(sub_549);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF296BAA6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_213(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2972F80C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_213 = new DataSub();
	reqAction.addDataSub(subContainer_213);

		ISubRule sub_550 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_160", null, 0, false);
	subContainer_213.addSubInstruction(sub_550);
		ISubRule sub_551 = new SubRule("req_uri", 0, 91, false, (IDCCoreVar)dcVars[138], false, "HQFje_jFRalo {2}_url_34", null, 0, false);
	subContainer_213.addSubInstruction(sub_551);
		ISubRule sub_552 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_160", null, 0, false);
	subContainer_213.addSubInstruction(sub_552);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2972F83C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_214(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2977DA0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_214 = new DataSub();
	reqAction.addDataSub(subContainer_214);

		ISubRule sub_553 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_159", null, 0, false);
	subContainer_214.addSubInstruction(sub_553);
		ISubRule sub_554 = new SubRule("req_uri", 0, 91, false, (IDCCoreVar)dcVars[137], false, "HQFje_jFRalo {2}_url_33", null, 0, false);
	subContainer_214.addSubInstruction(sub_554);
		ISubRule sub_555 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_159", null, 0, false);
	subContainer_214.addSubInstruction(sub_555);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2977DA3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_215(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF297CBC9C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_215 = new DataSub();
	reqAction.addDataSub(subContainer_215);

		ISubRule sub_556 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_158", null, 0, false);
	subContainer_215.addSubInstruction(sub_556);
		ISubRule sub_557 = new SubRule("req_uri", 0, 91, false, (IDCCoreVar)dcVars[139], false, "HQFje_jFRalo {2}_url_32", null, 0, false);
	subContainer_215.addSubInstruction(sub_557);
		ISubRule sub_558 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_158", null, 0, false);
	subContainer_215.addSubInstruction(sub_558);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF297CBCCC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_216(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF297F31AC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_216 = new DataSub();
	reqAction.addDataSub(subContainer_216);

		ISubRule sub_559 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_157", null, 0, false);
	subContainer_216.addSubInstruction(sub_559);
		ISubRule sub_560 = new SubRule("req_uri", 0, 91, false, (IDCCoreVar)dcVars[136], false, "HQFje_jFRalo {2}_url_31", null, 0, false);
	subContainer_216.addSubInstruction(sub_560);
		ISubRule sub_561 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_157", null, 0, false);
	subContainer_216.addSubInstruction(sub_561);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF297F31DC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_217(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2981A31C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_217 = new DataSub();
	reqAction.addDataSub(subContainer_217);

		ISubRule sub_562 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_156", null, 0, false);
	subContainer_217.addSubInstruction(sub_562);
		ISubRule sub_563 = new SubRule("req_uri", 0, 82, false, (IDCCoreVar)dcVars[142], false, "HQFje_jFRalo {2}_url_30", null, 0, false);
	subContainer_217.addSubInstruction(sub_563);
		ISubRule sub_564 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_156", null, 0, false);
	subContainer_217.addSubInstruction(sub_564);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2981A34C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_218(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2984149C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_218 = new DataSub();
	reqAction.addDataSub(subContainer_218);

		ISubRule sub_565 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_155", null, 0, false);
	subContainer_218.addSubInstruction(sub_565);
		ISubRule sub_566 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[144], false, "HQFje_jFRalo {2}_url_29", null, 0, false);
	subContainer_218.addSubInstruction(sub_566);
		ISubRule sub_567 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_155", null, 0, false);
	subContainer_218.addSubInstruction(sub_567);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF298414CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_219(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF298684EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_219 = new DataSub();
	reqAction.addDataSub(subContainer_219);

		ISubRule sub_568 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_154", null, 0, false);
	subContainer_219.addSubInstruction(sub_568);
		ISubRule sub_569 = new SubRule("req_uri", 0, 32, false, (IDCCoreVar)dcVars[172], false, "HQFje_jFRalo {2}_url_28", null, 0, false);
	subContainer_219.addSubInstruction(sub_569);
		ISubRule sub_570 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_154", null, 0, false);
	subContainer_219.addSubInstruction(sub_570);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2986851C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_220(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF298B671C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=3tex1bz5oal&ss=l4zme3eb&sl=3&tt=hfy&rl=1&nu=b6d05f97e8b312b78a737ac14a35261f&cl=uh3&obo=1&ld=uiz&r=11b14bcb60d4c08486d0076f8c554b5f&ul=uj2&hd=v1a\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_220 = new DataSub();
	reqAction.addDataSub(subContainer_220);

		ISubRule sub_571 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_153", null, 0, false);
	subContainer_220.addSubInstruction(sub_571);
		ISubRule sub_572 = new SubRule("req_uri", 0, 42, false, (IDCCoreVar)dcVars[173], false, "HQFje_jFRalo {2}_url_27", null, 0, false);
	subContainer_220.addSubInstruction(sub_572);
		ISubRule sub_573 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_153", null, 0, false);
	subContainer_220.addSubInstruction(sub_573);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF298B674C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_221(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF298DD83C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_221 = new DataSub();
	reqAction.addDataSub(subContainer_221);

		ISubRule sub_574 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_152", null, 0, false);
	subContainer_221.addSubInstruction(sub_574);
		ISubRule sub_575 = new SubRule("req_uri", 0, 82, false, (IDCCoreVar)dcVars[145], false, "HQFje_jFRalo {2}_url_26", null, 0, false);
	subContainer_221.addSubInstruction(sub_575);
		ISubRule sub_576 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_152", null, 0, false);
	subContainer_221.addSubInstruction(sub_576);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF298DD86C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_222(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2992B53C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_222 = new DataSub();
	reqAction.addDataSub(subContainer_222);

		ISubRule sub_577 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_151", null, 0, false);
	subContainer_222.addSubInstruction(sub_577);
		ISubRule sub_578 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_151", null, 0, false);
	subContainer_222.addSubInstruction(sub_578);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2992B56C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_223(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF299C7A1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_223 = new DataSub();
	reqAction.addDataSub(subContainer_223);

		ISubRule sub_579 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_150", null, 0, false);
	subContainer_223.addSubInstruction(sub_579);
		ISubRule sub_580 = new SubRule("req_uri", 0, 31, false, (IDCCoreVar)dcVars[174], false, "HQFje_jFRalo {2}_url_25", null, 0, false);
	subContainer_223.addSubInstruction(sub_580);
		ISubRule sub_581 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_150", null, 0, false);
	subContainer_223.addSubInstruction(sub_581);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF299C7A4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_224(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF29A15BEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_224 = new DataSub();
	reqAction.addDataSub(subContainer_224);

		ISubRule sub_582 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_149", null, 0, false);
	subContainer_224.addSubInstruction(sub_582);
		ISubRule sub_583 = new SubRule("req_uri", 0, 40, false, (IDCCoreVar)dcVars[175], false, "HQFje_jFRalo {2}_url_24", null, 0, false);
	subContainer_224.addSubInstruction(sub_583);
		ISubRule sub_584 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_149", null, 0, false);
	subContainer_224.addSubInstruction(sub_584);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF29A15C1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_225(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF29A3D21C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_225 = new DataSub();
	reqAction.addDataSub(subContainer_225);

		ISubRule sub_585 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_148", null, 0, false);
	subContainer_225.addSubInstruction(sub_585);
		ISubRule sub_586 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_148", null, 0, false);
	subContainer_225.addSubInstruction(sub_586);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF29A3D24C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_226(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF29A8B27C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_226 = new DataSub();
	reqAction.addDataSub(subContainer_226);

		ISubRule sub_587 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_147", null, 0, false);
	subContainer_226.addSubInstruction(sub_587);
		ISubRule sub_588 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_147", null, 0, false);
	subContainer_226.addSubInstruction(sub_588);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF29AB1F0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_227(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2A5876EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_227 = new DataSub();
	reqAction.addDataSub(subContainer_227);

		ISubRule sub_589 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_146", null, 0, false);
	subContainer_227.addSubInstruction(sub_589);
		ISubRule sub_590 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_146", null, 0, false);
	subContainer_227.addSubInstruction(sub_590);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2A58771C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_228(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2A5AEBBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_228 = new DataSub();
	reqAction.addDataSub(subContainer_228);

		ISubRule sub_591 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_145", null, 0, false);
	subContainer_228.addSubInstruction(sub_591);
		ISubRule sub_592 = new SubRule("req_uri", 0, 82, false, (IDCCoreVar)dcVars[146], false, "HQFje_jFRalo {2}_url_23", null, 0, false);
	subContainer_228.addSubInstruction(sub_592);
		ISubRule sub_593 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_145", null, 0, false);
	subContainer_228.addSubInstruction(sub_593);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2A5AEBEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_229(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2A5FCDBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_229 = new DataSub();
	reqAction.addDataSub(subContainer_229);

		ISubRule sub_594 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_144", null, 0, false);
	subContainer_229.addSubInstruction(sub_594);
		ISubRule sub_595 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[147], false, "HQFje_jFRalo {2}_url_22", null, 0, false);
	subContainer_229.addSubInstruction(sub_595);
		ISubRule sub_596 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_144", null, 0, false);
	subContainer_229.addSubInstruction(sub_596);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2A5FCDEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_230(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2A64AB3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_230 = new DataSub();
	reqAction.addDataSub(subContainer_230);

		ISubRule sub_597 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_143", null, 0, false);
	subContainer_230.addSubInstruction(sub_597);
		ISubRule sub_598 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[148], false, "HQFje_jFRalo {2}_url_21", null, 0, false);
	subContainer_230.addSubInstruction(sub_598);
		ISubRule sub_599 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_143", null, 0, false);
	subContainer_230.addSubInstruction(sub_599);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2A64AB6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_231(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF2AA1B40C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_231 = new DataSub();
	reqAction.addDataSub(subContainer_231);

		ISubRule sub_600 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_142", null, 0, false);
	subContainer_231.addSubInstruction(sub_600);
		ISubRule sub_601 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_142", null, 0, false);
	subContainer_231.addSubInstruction(sub_601);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF2AA1B43C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_232(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF327D6C0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_232 = new DataSub();
	reqAction.addDataSub(subContainer_232);

		ISubRule sub_602 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_141", null, 0, false);
	subContainer_232.addSubInstruction(sub_602);
		ISubRule sub_603 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_141", null, 0, false);
	subContainer_232.addSubInstruction(sub_603);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF327FDD0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_233(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF328252BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_233 = new DataSub();
	reqAction.addDataSub(subContainer_233);

		ISubRule sub_604 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_140", null, 0, false);
	subContainer_233.addSubInstruction(sub_604);
		ISubRule sub_605 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_140", null, 0, false);
	subContainer_233.addSubInstruction(sub_605);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF328252EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/gif");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_234(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF328734BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_234 = new DataSub();
	reqAction.addDataSub(subContainer_234);

		ISubRule sub_606 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_139", null, 0, false);
	subContainer_234.addSubInstruction(sub_606);
		ISubRule sub_607 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_139", null, 0, false);
	subContainer_234.addSubInstruction(sub_607);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF328734EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_235(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF3289A6FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_235 = new DataSub();
	reqAction.addDataSub(subContainer_235);

		ISubRule sub_608 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_138", null, 0, false);
	subContainer_235.addSubInstruction(sub_608);
		ISubRule sub_609 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_138", null, 0, false);
	subContainer_235.addSubInstruction(sub_609);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3289A72C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_236(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF328E830C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_236 = new DataSub();
	reqAction.addDataSub(subContainer_236);

		ISubRule sub_610 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_137", null, 0, false);
	subContainer_236.addSubInstruction(sub_610);
		ISubRule sub_611 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_137", null, 0, false);
	subContainer_236.addSubInstruction(sub_611);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF328E833C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_237(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF3290F8BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_237 = new DataSub();
	reqAction.addDataSub(subContainer_237);

		ISubRule sub_612 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_136", null, 0, false);
	subContainer_237.addSubInstruction(sub_612);
		ISubRule sub_613 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_136", null, 0, false);
	subContainer_237.addSubInstruction(sub_613);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3290F8EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_238(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF3295D60C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_238 = new DataSub();
	reqAction.addDataSub(subContainer_238);

		ISubRule sub_614 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_135", null, 0, false);
	subContainer_238.addSubInstruction(sub_614);
		ISubRule sub_615 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_135", null, 0, false);
	subContainer_238.addSubInstruction(sub_615);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3295D63C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_239(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF32984A3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_239 = new DataSub();
	reqAction.addDataSub(subContainer_239);

		ISubRule sub_616 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_134", null, 0, false);
	subContainer_239.addSubInstruction(sub_616);
		ISubRule sub_617 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_134", null, 0, false);
	subContainer_239.addSubInstruction(sub_617);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF32984A6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_240(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF366B480C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_240 = new DataSub();
	reqAction.addDataSub(subContainer_240);

		ISubRule sub_618 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_133", null, 0, false);
	subContainer_240.addSubInstruction(sub_618);
		ISubRule sub_619 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[149], false, "HQFje_jFRalo {2}_url_20", null, 0, false);
	subContainer_240.addSubInstruction(sub_619);
		ISubRule sub_620 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_133", null, 0, false);
	subContainer_240.addSubInstruction(sub_620);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF366B483C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_241(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36702A2C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "537", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_17(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_241 = new DataSub();
	reqAction.addDataSub(subContainer_241);

		ISubRule sub_621 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_132", null, 0, false);
	subContainer_241.addSubInstruction(sub_621);
		ISubRule sub_622 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_132", null, 0, false);
	subContainer_241.addSubInstruction(sub_622);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36702A5C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_17(HTTPPostData postData) {
				StringBuffer strBuf_16 = new StringBuffer();
strBuf_16.append("id=a80618f2-d9a2-413c-a022-8c647f1364d2&tagId=11024&fullRefe");
strBuf_16.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2Fa%2Fbrowse%2Fwri");
strBuf_16.append("ting-pads%2FN%3D5%2B549829%2F&payload=%7B%22sitePage%22%3A%7");
strBuf_16.append("B%22enterpriseId%22%3A%221523082%22%2C%22cartSubtotal%22%3A%");
strBuf_16.append("220%22%2C%22trackingSource%22%3A%22gtm%22%2C%22pageType%22%3");
strBuf_16.append("A%22N%2FA%22%2C%22%22%3A%7B%22userId%22%3A%22%22%2C%22emailH");
strBuf_16.append("ash%22%3A%22%22%2C%22marketing_channel%22%3A%22In%20Progress");
strBuf_16.append("%22%7D%7D%7D&isDeviceAccessGranted=false&cjUser=00000000-000");
strBuf_16.append("0-0000-0000-000000000000&cookies=cjConsent%3DMHxZfDB8Tnww");
String requestData_17 = strBuf_16.toString();
			
	HTTPPostDataChunk pdc_16 = new HTTPPostDataChunk("A1ECF7ADF36702FEC9BBE33261613362", postData, requestData_17, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_16);

	}

	public HTTPAction request_242(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF3672A03C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508540.30;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_242 = new DataSub();
	reqAction.addDataSub(subContainer_242);

		ISubRule sub_623 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_131", null, 0, false);
	subContainer_242.addSubInstruction(sub_623);
		ISubRule sub_624 = new SubRule("req_uri", 0, 75, false, (IDCCoreVar)dcVars[150], false, "HQFje_jFRalo {2}_url_19", null, 0, false);
	subContainer_242.addSubInstruction(sub_624);
		ISubRule sub_625 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_131", null, 0, false);
	subContainer_242.addSubInstruction(sub_625);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3672A06C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_243(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF367510BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_243 = new DataSub();
	reqAction.addDataSub(subContainer_243);

		ISubRule sub_626 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_130", null, 0, false);
	subContainer_243.addSubInstruction(sub_626);
		ISubRule sub_627 = new SubRule("req_uri", 0, 80, false, (IDCCoreVar)dcVars[151], false, "HQFje_jFRalo {2}_url_18", null, 0, false);
	subContainer_243.addSubInstruction(sub_627);
		ISubRule sub_628 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_130", null, 0, false);
	subContainer_243.addSubInstruction(sub_628);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF367510EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_244(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF367781BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_244 = new DataSub();
	reqAction.addDataSub(subContainer_244);

		ISubRule sub_629 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_129", null, 0, false);
	subContainer_244.addSubInstruction(sub_629);
		ISubRule sub_630 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[152], false, "HQFje_jFRalo {2}_url_17", null, 0, false);
	subContainer_244.addSubInstruction(sub_630);
		ISubRule sub_631 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_129", null, 0, false);
	subContainer_244.addSubInstruction(sub_631);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF367781EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_245(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF367C5F0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_245 = new DataSub();
	reqAction.addDataSub(subContainer_245);

		ISubRule sub_632 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_128", null, 0, false);
	subContainer_245.addSubInstruction(sub_632);
		ISubRule sub_633 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[153], false, "HQFje_jFRalo {2}_url_16", null, 0, false);
	subContainer_245.addSubInstruction(sub_633);
		ISubRule sub_634 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_128", null, 0, false);
	subContainer_245.addSubInstruction(sub_634);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF367C5F3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_246(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF367ED4BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_246 = new DataSub();
	reqAction.addDataSub(subContainer_246);

		ISubRule sub_635 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_127", null, 0, false);
	subContainer_246.addSubInstruction(sub_635);
		ISubRule sub_636 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_127", null, 0, false);
	subContainer_246.addSubInstruction(sub_636);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF367ED4EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_247(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF368145FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_247 = new DataSub();
	reqAction.addDataSub(subContainer_247);

		ISubRule sub_637 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_126", null, 0, false);
	subContainer_247.addSubInstruction(sub_637);
		ISubRule sub_638 = new SubRule("req_uri", 0, 87, false, (IDCCoreVar)dcVars[154], false, "HQFje_jFRalo {2}_url_15", null, 0, false);
	subContainer_247.addSubInstruction(sub_638);
		ISubRule sub_639 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_126", null, 0, false);
	subContainer_247.addSubInstruction(sub_639);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3681462C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_248(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF3683B7FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_248 = new DataSub();
	reqAction.addDataSub(subContainer_248);

		ISubRule sub_640 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_125", null, 0, false);
	subContainer_248.addSubInstruction(sub_640);
		ISubRule sub_641 = new SubRule("req_uri", 0, 43, false, (IDCCoreVar)dcVars[167], false, "HQFje_jFRalo {2}_url_14", null, 0, false);
	subContainer_248.addSubInstruction(sub_641);
		ISubRule sub_642 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_125", null, 0, false);
	subContainer_248.addSubInstruction(sub_642);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3683B82C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_249(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF368D760C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_249 = new DataSub();
	reqAction.addDataSub(subContainer_249);

		ISubRule sub_643 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_124", null, 0, false);
	subContainer_249.addSubInstruction(sub_643);
		ISubRule sub_644 = new SubRule("req_uri", 0, 87, false, (IDCCoreVar)dcVars[155], false, "HQFje_jFRalo {2}_url_13", null, 0, false);
	subContainer_249.addSubInstruction(sub_644);
		ISubRule sub_645 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_124", null, 0, false);
	subContainer_249.addSubInstruction(sub_645);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF368D763C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_250(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF368FEB8C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_250 = new DataSub();
	reqAction.addDataSub(subContainer_250);

		ISubRule sub_646 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_123", null, 0, false);
	subContainer_250.addSubInstruction(sub_646);
		ISubRule sub_647 = new SubRule("req_uri", 0, 57, false, (IDCCoreVar)dcVars[169], false, "HQFje_jFRalo {2}_url_12", null, 0, false);
	subContainer_250.addSubInstruction(sub_647);
		ISubRule sub_648 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_123", null, 0, false);
	subContainer_250.addSubInstruction(sub_648);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF368FEBBC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_251(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36973A0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "2541", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_18(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_251 = new DataSub();
	reqAction.addDataSub(subContainer_251);

		ISubRule sub_649 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_122", null, 0, false);
	subContainer_251.addSubInstruction(sub_649);
		ISubRule sub_650 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_122", null, 0, false);
	subContainer_251.addSubInstruction(sub_650);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36973A3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_18(HTTPPostData postData) {
				StringBuffer strBuf_17 = new StringBuffer();
strBuf_17.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_17.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_17.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_17.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8542086,1920,1040,19");
strBuf_17.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_17.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.38561496");
strBuf_17.append("2192,828254271043,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,dm");
strBuf_17.append("_en,t_en-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,");
strBuf_17.append("0,0,0,-1,310,0;0,-1,0,0,1057,1057,0;0,-1,0,0,1060,1060,0;0,2");
strBuf_17.append(",0,0,1240,2006,0;0,2,0,0,1241,2007,0;0,2,0,0,1242,2008,0;0,2");
strBuf_17.append(",0,0,1243,2009,0;0,2,0,0,1244,2010,0;0,2,0,0,1245,2011,0;0,2");
strBuf_17.append(",0,0,1246,2012,0;0,2,0,0,1247,2013,0;0,2,0,0,1248,2014,0;0,2");
strBuf_17.append(",0,0,1289,2055,0;0,2,0,0,1290,2056,0;0,2,0,0,1291,2057,0;0,2");
strBuf_17.append(",0,0,1292,2058,0;0,2,0,0,1293,2059,0;0,2,0,0,1294,2060,0;0,2");
strBuf_17.append(",0,0,1295,2061,0;0,2,0,0,1296,2062,0;0,2,0,0,1297,2063,0;0,2");
strBuf_17.append(",0,0,1298,2064,0;0,2,0,0,1290,2056,0;0,2,0,0,1291,2057,0;0,2");
strBuf_17.append(",0,0,1292,2058,0;0,2,0,0,1293,2059,0;-1,2,-94,-102,0,0,0,0,-");
strBuf_17.append("1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,310,0;0,-1,0,0,1057,10");
strBuf_17.append("57,0;0,-1,0,0,1060,1060,0;0,2,0,0,1240,2006,0;0,2,0,0,1241,2");
strBuf_17.append("007,0;0,2,0,0,1242,2008,0;0,2,0,0,1243,2009,0;0,2,0,0,1244,2");
strBuf_17.append("010,0;0,2,0,0,1245,2011,0;0,2,0,0,1246,2012,0;0,2,0,0,1247,2");
strBuf_17.append("013,0;0,2,0,0,1248,2014,0;0,2,0,0,1289,2055,0;0,2,0,0,1290,2");
strBuf_17.append("056,0;0,2,0,0,1291,2057,0;0,2,0,0,1292,2058,0;0,2,0,0,1293,2");
strBuf_17.append("059,0;0,2,0,0,1294,2060,0;0,2,0,0,1295,2061,0;0,2,0,0,1296,2");
strBuf_17.append("062,0;0,2,0,0,1297,2063,0;0,2,0,0,1298,2064,0;0,2,0,0,1290,2");
strBuf_17.append("056,0;0,2,0,0,1291,2057,0;0,2,0,0,1292,2058,0;0,2,0,0,1293,2");
strBuf_17.append("059,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2,-94,-11");
strBuf_17.append("1,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,ht");
strBuf_17.append("tps://www.officedepot.com/a/browse/writing-pads/N=5+549829/-");
strBuf_17.append("1,2,-94,-115,1,32,32,0,0,0,0,2,0,1656508542086,-999999,17720");
strBuf_17.append(",0,0,2953,0,0,6,0,0,7475C20621AC05998EB5C2E913770E6D~-1~YAAQ");
strBuf_17.append("P8jZFyytBq2BAQAAV2earwjginkMrhOivdIdbHuWUnB+uXqp2f7SRICjbhqo");
strBuf_17.append("g5d2Uvxpma7GbvUFcBhQWvlqjIdYcJjQsic3iG3tmIXgc9VBA+vBuhcNjwMD");
strBuf_17.append("APpRUx3IqyHNM2yIq2LTLuJcgi+dVIJSMhcXP7hcEttUIvELSvo7XLsEgXlj");
strBuf_17.append("UlFbdjNKe2Qova5uq6ffQkap0b7TFGFc2Pxmv1+iDIQJ/HfK3xq5+1tpIxFM");
strBuf_17.append("z2VLiSiDfKL47GvTfd5n+LkK9ZLNX31fliXNwDtBm7dVYYcOdZX9MkbMUQ7d");
strBuf_17.append("k/rDFLJ43ynUSOadpHodcPOEr/FCtSp6wsLGeS6WU73dPfgLTv1vjYyQdphm");
strBuf_17.append("oWl7jIObg76YciJX597PX61cProSKMwc7/ZTKNLC~-1~-1~-1,37897,-1,-");
strBuf_17.append("1,30261693,PiZtE,28100,27,14,true-1,2,-94,-106,0,0-1,2,-94,-");
strBuf_17.append("119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124");
strBuf_17.append(",-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94,-70,-1-1,2,-94,-80,94");
strBuf_17.append("-1,2,-94,-116,1153180620-1,2,-94,-118,141587-1,2,-94,-129,-1");
strBuf_17.append(",2,-94,-121,;7;-1;0\"}");
String requestData_18 = strBuf_17.toString();
			
	HTTPPostDataChunk pdc_17 = new HTTPPostDataChunk("A1ECF7ADF3697400C9BBE33261613362", postData, requestData_18, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_17);

	}

	public HTTPAction request_252(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF369745EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_252 = new DataSub();
	reqAction.addDataSub(subContainer_252);

		ISubRule sub_651 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_121", null, 0, false);
	subContainer_252.addSubInstruction(sub_651);
		ISubRule sub_652 = new SubRule("req_uri", 0, 89, false, (IDCCoreVar)dcVars[156], false, "HQFje_jFRalo {2}_url_11", null, 0, false);
	subContainer_252.addSubInstruction(sub_652);
		ISubRule sub_653 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_121", null, 0, false);
	subContainer_252.addSubInstruction(sub_653);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF3697461C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_253(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF369C21FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_253 = new DataSub();
	reqAction.addDataSub(subContainer_253);

		ISubRule sub_654 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_120", null, 0, false);
	subContainer_253.addSubInstruction(sub_654);
		ISubRule sub_655 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[157], false, "HQFje_jFRalo {2}_url_10", null, 0, false);
	subContainer_253.addSubInstruction(sub_655);
		ISubRule sub_656 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_120", null, 0, false);
	subContainer_253.addSubInstruction(sub_656);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF369C222C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_254(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36A0FE3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_254 = new DataSub();
	reqAction.addDataSub(subContainer_254);

		ISubRule sub_657 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_119", null, 0, false);
	subContainer_254.addSubInstruction(sub_657);
		ISubRule sub_658 = new SubRule("req_uri", 0, 80, false, (IDCCoreVar)dcVars[158], false, "HQFje_jFRalo {2}_url_9", null, 0, false);
	subContainer_254.addSubInstruction(sub_658);
		ISubRule sub_659 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_119", null, 0, false);
	subContainer_254.addSubInstruction(sub_659);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36A0FE6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_255(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36A373BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_255 = new DataSub();
	reqAction.addDataSub(subContainer_255);

		ISubRule sub_660 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_118", null, 0, false);
	subContainer_255.addSubInstruction(sub_660);
		ISubRule sub_661 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_118", null, 0, false);
	subContainer_255.addSubInstruction(sub_661);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36A373EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_256(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36A5E4BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_256 = new DataSub();
	reqAction.addDataSub(subContainer_256);

		ISubRule sub_662 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_117", null, 0, false);
	subContainer_256.addSubInstruction(sub_662);
		ISubRule sub_663 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[159], false, "HQFje_jFRalo {2}_url_8", null, 0, false);
	subContainer_256.addSubInstruction(sub_663);
		ISubRule sub_664 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_117", null, 0, false);
	subContainer_256.addSubInstruction(sub_664);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36A5E4EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_257(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36A855BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_257 = new DataSub();
	reqAction.addDataSub(subContainer_257);

		ISubRule sub_665 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_116", null, 0, false);
	subContainer_257.addSubInstruction(sub_665);
		ISubRule sub_666 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[160], false, "HQFje_jFRalo {2}_url_7", null, 0, false);
	subContainer_257.addSubInstruction(sub_666);
		ISubRule sub_667 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_116", null, 0, false);
	subContainer_257.addSubInstruction(sub_667);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36A855EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_258(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36AD333C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;mt.mbsh=%7B%221656508539417%22%3A%7B%22AC1517TEST%22%3A1%2C%22AC3840TEST%22%3A1%7D%7D;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_258 = new DataSub();
	reqAction.addDataSub(subContainer_258);

		ISubRule sub_668 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_115", null, 0, false);
	subContainer_258.addSubInstruction(sub_668);
		ISubRule sub_669 = new SubRule("req_uri", 0, 73, false, (IDCCoreVar)dcVars[161], false, "HQFje_jFRalo {2}_url_6", null, 0, false);
	subContainer_258.addSubInstruction(sub_669);
		ISubRule sub_670 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_115", null, 0, false);
	subContainer_258.addSubInstruction(sub_670);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36AD336C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_259(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36AFA8BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_259 = new DataSub();
	reqAction.addDataSub(subContainer_259);

		ISubRule sub_671 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_114", null, 0, false);
	subContainer_259.addSubInstruction(sub_671);
		ISubRule sub_672 = new SubRule("req_uri", 0, 77, false, (IDCCoreVar)dcVars[162], false, "HQFje_jFRalo {2}_url_5", null, 0, false);
	subContainer_259.addSubInstruction(sub_672);
		ISubRule sub_673 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_114", null, 0, false);
	subContainer_259.addSubInstruction(sub_673);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36AFA8EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_260(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36B219BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_260 = new DataSub();
	reqAction.addDataSub(subContainer_260);

		ISubRule sub_674 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_113", null, 0, false);
	subContainer_260.addSubInstruction(sub_674);
		ISubRule sub_675 = new SubRule("req_uri", 0, 70, false, (IDCCoreVar)dcVars[163], false, "HQFje_jFRalo {2}_url_4", null, 0, false);
	subContainer_260.addSubInstruction(sub_675);
		ISubRule sub_676 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_113", null, 0, false);
	subContainer_260.addSubInstruction(sub_676);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36B219EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_261(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36B6FB3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_261 = new DataSub();
	reqAction.addDataSub(subContainer_261);

		ISubRule sub_677 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_112", null, 0, false);
	subContainer_261.addSubInstruction(sub_677);
		ISubRule sub_678 = new SubRule("req_uri", 0, 70, false, (IDCCoreVar)dcVars[164], false, "HQFje_jFRalo {2}_url_3", null, 0, false);
	subContainer_261.addSubInstruction(sub_678);
		ISubRule sub_679 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_112", null, 0, false);
	subContainer_261.addSubInstruction(sub_679);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36B6FB6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_262(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36B96D7C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_262 = new DataSub();
	reqAction.addDataSub(subContainer_262);

		ISubRule sub_680 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_111", null, 0, false);
	subContainer_262.addSubInstruction(sub_680);
		ISubRule sub_681 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[165], false, "HQFje_jFRalo {2}_url_2", null, 0, false);
	subContainer_262.addSubInstruction(sub_681);
		ISubRule sub_682 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_111", null, 0, false);
	subContainer_262.addSubInstruction(sub_682);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36B96DAC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_263(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36BE4EBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_263 = new DataSub();
	reqAction.addDataSub(subContainer_263);

		ISubRule sub_683 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_110", null, 0, false);
	subContainer_263.addSubInstruction(sub_683);
		ISubRule sub_684 = new SubRule("req_uri", 0, 89, false, (IDCCoreVar)dcVars[166], false, "HQFje_jFRalo {2}_url", null, 0, false);
	subContainer_263.addSubInstruction(sub_684);
		ISubRule sub_685 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_110", null, 0, false);
	subContainer_263.addSubInstruction(sub_685);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36BE4EEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_264(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36C0BFBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_264 = new DataSub();
	reqAction.addDataSub(subContainer_264);

		ISubRule sub_686 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_109", null, 0, false);
	subContainer_264.addSubInstruction(sub_686);
		ISubRule sub_687 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_109", null, 0, false);
	subContainer_264.addSubInstruction(sub_687);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36C0BFEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_265(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36C331AC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_265 = new DataSub();
	reqAction.addDataSub(subContainer_265);

		ISubRule sub_688 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_108", null, 0, false);
	subContainer_265.addSubInstruction(sub_688);
		ISubRule sub_689 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_108", null, 0, false);
	subContainer_265.addSubInstruction(sub_689);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36C331DC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_266(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36C80E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;_ga=GA1.1.565524517.1656508508;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_266 = new DataSub();
	reqAction.addDataSub(subContainer_266);

		ISubRule sub_690 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_107", null, 0, false);
	subContainer_266.addSubInstruction(sub_690);
		ISubRule sub_691 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_107", null, 0, false);
	subContainer_266.addSubInstruction(sub_691);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36C80E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_267(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36CA7F4C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3200", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_19(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_267 = new DataSub();
	reqAction.addDataSub(subContainer_267);

		ISubRule sub_692 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_106", null, 0, false);
	subContainer_267.addSubInstruction(sub_692);
		ISubRule sub_693 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_106", null, 0, false);
	subContainer_267.addSubInstruction(sub_693);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36973A0C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36CA7F7C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_19(HTTPPostData postData) {
				StringBuffer strBuf_18 = new StringBuffer();
strBuf_18.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_18.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_18.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_18.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8542086,1920,1040,19");
strBuf_18.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_18.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.48128379");
strBuf_18.append("3240,828254271043,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_18.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_18.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_18.append(",2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_18.append("10,0;0,-1,0,0,1057,1057,0;0,-1,0,0,1060,1060,0;0,2,0,0,1240,");
strBuf_18.append("2006,0;0,2,0,0,1241,2007,0;0,2,0,0,1242,2008,0;0,2,0,0,1243,");
strBuf_18.append("2009,0;0,2,0,0,1244,2010,0;0,2,0,0,1245,2011,0;0,2,0,0,1246,");
strBuf_18.append("2012,0;0,2,0,0,1247,2013,0;0,2,0,0,1248,2014,0;0,2,0,0,1289,");
strBuf_18.append("2055,0;0,2,0,0,1290,2056,0;0,2,0,0,1291,2057,0;0,2,0,0,1292,");
strBuf_18.append("2058,0;0,2,0,0,1293,2059,0;0,2,0,0,1294,2060,0;0,2,0,0,1295,");
strBuf_18.append("2061,0;0,2,0,0,1296,2062,0;0,2,0,0,1297,2063,0;0,2,0,0,1298,");
strBuf_18.append("2064,0;0,2,0,0,1290,2056,0;0,2,0,0,1291,2057,0;0,2,0,0,1292,");
strBuf_18.append("2058,0;0,2,0,0,1293,2059,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,");
strBuf_18.append("-1,0,0,5101,-1,0;0,0,0,0,-1,310,0;0,-1,0,0,1057,1057,0;0,-1,");
strBuf_18.append("0,0,1060,1060,0;0,2,0,0,1240,2006,0;0,2,0,0,1241,2007,0;0,2,");
strBuf_18.append("0,0,1242,2008,0;0,2,0,0,1243,2009,0;0,2,0,0,1244,2010,0;0,2,");
strBuf_18.append("0,0,1245,2011,0;0,2,0,0,1246,2012,0;0,2,0,0,1247,2013,0;0,2,");
strBuf_18.append("0,0,1248,2014,0;0,2,0,0,1289,2055,0;0,2,0,0,1290,2056,0;0,2,");
strBuf_18.append("0,0,1291,2057,0;0,2,0,0,1292,2058,0;0,2,0,0,1293,2059,0;0,2,");
strBuf_18.append("0,0,1294,2060,0;0,2,0,0,1295,2061,0;0,2,0,0,1296,2062,0;0,2,");
strBuf_18.append("0,0,1297,2063,0;0,2,0,0,1298,2064,0;0,2,0,0,1290,2056,0;0,2,");
strBuf_18.append("0,0,1291,2057,0;0,2,0,0,1292,2058,0;0,2,0,0,1293,2059,0;-1,-");
strBuf_18.append("1,1,0,-1,205,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,208,0;-1,-1,1");
strBuf_18.append(",0,-1,222,0;-1,-1,1,0,-1,207,0;-1,-1,1,0,-1,231,0;-1,-1,1,0,");
strBuf_18.append("-1,1270,0;-1,-1,1,0,-1,774,0;-1,-1,1,0,-1,1283,0;-1,-1,1,0,-");
strBuf_18.append("1,1350,0;-1,-1,1,0,-1,886,0;-1,-1,1,0,-1,234,0;-1,-1,1,0,-1,");
strBuf_18.append("219,0;-1,-1,1,0,-1,118,0;-1,-1,1,0,-1,114,0;-1,-1,1,0,-1,200");
strBuf_18.append(",0;-1,-1,1,0,-1,111,0;-1,-1,1,0,-1,312,0;-1,-1,1,0,-1,221,0;");
strBuf_18.append("-1,-1,1,0,-1,321,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,225,0;-1,");
strBuf_18.append("-1,1,0,-1,336,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1");
strBuf_18.append(",2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-");
strBuf_18.append("94,-112,https://www.officedepot.com/a/browse/writing-pads/N=");
strBuf_18.append("5+549829/-1,2,-94,-115,1,32,32,0,0,0,0,1388,0,1656508542086,");
strBuf_18.append("14,17720,0,0,2953,0,0,1390,0,0,7475C20621AC05998EB5C2E913770");
strBuf_18.append("E6D~-1~YAAQP8jZF3etBq2BAQAAXm2arwjgw+FQP8XiLvym0uFmAv8W07ZxL");
strBuf_18.append("ICM4bBqe9Zkb9Jdrk2nUPwI0PlZjRn8oViR4N+e+8WQOHDabVEcoSDceXsnA");
strBuf_18.append("j9Dlft2HL/G68xHu2+G8DRm7zsLk5EIYmdyReDcCSQQLx56ftiOiih3r1SSt");
strBuf_18.append("qF9MfDKekFRXoe6Ea/8T23Mmb2q0mcoWN0eia+782r/8IpESrJSbw5GVIi0e");
strBuf_18.append("Z0uFnX1CMbyHBoJRPOPBpR7hlCXDFgNW0U844Wi3yjdduSR8CKlW6QF9DhUp");
strBuf_18.append("c9FiDUekMnRHBEZtSbSzak2yiag/lLg3Djb1QvSb0fieNkNajaPg3Pfm+UOX");
strBuf_18.append("VR9fzNNE/BNY9hfkmwHJNo9FzBQFumsq/lZAMxQ/DOpLT71xmjP~-1~-1~-1");
strBuf_18.append(",36816,446,-543226964,30261693,PiZtE,95756,113,14,true-1,2,-");
strBuf_18.append("94,-106,9,1-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-");
strBuf_18.append("94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,2132114424");
strBuf_18.append("1322243122-1,2,-94,-70,273720021;-851345892;dis;,7;true;true");
strBuf_18.append(";true;-60;true;24;24;true;false;-1-1,2,-94,-80,5372-1,2,-94,");
strBuf_18.append("-116,1153180620-1,2,-94,-118,170852-1,2,-94,-129,,,0,,,,0-1,");
strBuf_18.append("2,-94,-121,;4;10;0\"}");
String requestData_19 = strBuf_18.toString();
			
	HTTPPostDataChunk pdc_18 = new HTTPPostDataChunk("A1ECF7ADF36CCF00C9BBE33261613362", postData, requestData_19, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_18);

	}

	public HTTPAction request_268(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36CCF5BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_268 = new DataSub();
	reqAction.addDataSub(subContainer_268);

		ISubRule sub_694 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_105", null, 0, false);
	subContainer_268.addSubInstruction(sub_694);
		ISubRule sub_695 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_105", null, 0, false);
	subContainer_268.addSubInstruction(sub_695);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36CCF5EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_269(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36D4430C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508543.27", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_269 = new DataSub();
	reqAction.addDataSub(subContainer_269);

		ISubRule sub_696 = new SubRule("req_uri", 84, 4, true, (IDCCoreVar)dcVars[98], false, "mapBySkuId", null, 0, false);
	subContainer_269.addSubInstruction(sub_696);
		ISubRule sub_697 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_104", null, 0, false);
	subContainer_269.addSubInstruction(sub_697);
		ISubRule sub_698 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_104", null, 0, false);
	subContainer_269.addSubInstruction(sub_698);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF36D4433C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_270(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36D6BABC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_270 = new DataSub();
	reqAction.addDataSub(subContainer_270);

		ISubRule sub_699 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_103", null, 0, false);
	subContainer_270.addSubInstruction(sub_699);
		ISubRule sub_700 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_103", null, 0, false);
	subContainer_270.addSubInstruction(sub_700);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36D6BAEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_271(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36DB96EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_271 = new DataSub();
	reqAction.addDataSub(subContainer_271);

		ISubRule sub_701 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_102", null, 0, false);
	subContainer_271.addSubInstruction(sub_701);
		ISubRule sub_702 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_102", null, 0, false);
	subContainer_271.addSubInstruction(sub_702);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36DB971C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_272(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36E55A0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_272 = new DataSub();
	reqAction.addDataSub(subContainer_272);

		ISubRule sub_703 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_101", null, 0, false);
	subContainer_272.addSubInstruction(sub_703);
		ISubRule sub_704 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_101", null, 0, false);
	subContainer_272.addSubInstruction(sub_704);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36E55A3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_273(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36ECB29C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_273 = new DataSub();
	reqAction.addDataSub(subContainer_273);

		ISubRule sub_705 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_100", null, 0, false);
	subContainer_273.addSubInstruction(sub_705);
		ISubRule sub_706 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_100", null, 0, false);
	subContainer_273.addSubInstruction(sub_706);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36ECB2CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_274(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36F1949C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_13 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_13);

	harvestContainer_13.addHarvestInstruction ("resp_content", dcVars[176], "&mapBySkuId=(.*?)&", 1, 1, 0, 0, false, "mapBySkuId_9", null, 0, false);
	harvestContainer_13.addHarvestInstruction ("resp_content", dcVars[177], "&includeOos=(.*?)\"", 1, 1, 0, 0, false, "includeOos_2", null, 0, false);
	IDataSub subContainer_274 = new DataSub();
	reqAction.addDataSub(subContainer_274);

		ISubRule sub_707 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_99", null, 0, false);
	subContainer_274.addSubInstruction(sub_707);
		ISubRule sub_708 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_99", null, 0, false);
	subContainer_274.addSubInstruction(sub_708);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36F194CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_275(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF36FB53EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;BVBRANDID=d4ee74d8-f8d0-4de1-8951-158acb5bdd0d;BVBRANDSID=66681e07-97d8-4373-99b0-961071078849;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508541.29;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_275 = new DataSub();
	reqAction.addDataSub(subContainer_275);

		ISubRule sub_709 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_98", null, 0, false);
	subContainer_275.addSubInstruction(sub_709);
		ISubRule sub_710 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_98", null, 0, false);
	subContainer_275.addSubInstruction(sub_710);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF36FB541C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_276(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF370EDB5C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(15);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Service-Worker", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "serviceworker", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;kampyleSessionPageCounter=2;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508543.27;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f", "UTF-8", 1));			
		headers.add(new RequestHeaderData("If-None-Match", "\"0bd9e9e6c2e9ce340e6e1c7754b228ce5bb931351fb503a6d95b245f121c9540\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("If-Modified-Since", "Sat, 23 Oct 2021 01:47:33 GMT", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_276 = new DataSub();
	reqAction.addDataSub(subContainer_276);

		ISubRule sub_711 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_97", null, 0, false);
	subContainer_276.addSubInstruction(sub_711);
		ISubRule sub_712 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_97", null, 0, false);
	subContainer_276.addSubInstruction(sub_712);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF370EDB8C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(304);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_277(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF37114D6C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3360", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_clsk=e2zmnj|1656508540423|3|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=3&tt=hfy&obo=1&rl=1\";mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508543.27;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_20(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_277 = new DataSub();
	reqAction.addDataSub(subContainer_277);

		ISubRule sub_713 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_96", null, 0, false);
	subContainer_277.addSubInstruction(sub_713);
		ISubRule sub_714 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_96", null, 0, false);
	subContainer_277.addSubInstruction(sub_714);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF36CA7F4C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF37114D9C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_20(HTTPPostData postData) {
				StringBuffer strBuf_19 = new StringBuffer();
strBuf_19.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_19.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_19.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_19.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8542086,1920,1040,19");
strBuf_19.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_19.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.64042894");
strBuf_19.append("7320,828254271043,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_19.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_19.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_19.append(",2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_19.append("10,0;0,-1,0,0,1057,1057,0;0,-1,0,0,1060,1060,0;0,2,0,0,1240,");
strBuf_19.append("2006,0;0,2,0,0,1241,2007,0;0,2,0,0,1242,2008,0;0,2,0,0,1243,");
strBuf_19.append("2009,0;0,2,0,0,1244,2010,0;0,2,0,0,1245,2011,0;0,2,0,0,1246,");
strBuf_19.append("2012,0;0,2,0,0,1247,2013,0;0,2,0,0,1248,2014,0;0,2,0,0,1289,");
strBuf_19.append("2055,0;0,2,0,0,1290,2056,0;0,2,0,0,1291,2057,0;0,2,0,0,1292,");
strBuf_19.append("2058,0;0,2,0,0,1293,2059,0;0,2,0,0,1294,2060,0;0,2,0,0,1295,");
strBuf_19.append("2061,0;0,2,0,0,1296,2062,0;0,2,0,0,1297,2063,0;0,2,0,0,1298,");
strBuf_19.append("2064,0;0,2,0,0,1290,2056,0;0,2,0,0,1291,2057,0;0,2,0,0,1292,");
strBuf_19.append("2058,0;0,2,0,0,1293,2059,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,");
strBuf_19.append("-1,0,0,5101,-1,0;0,0,0,0,-1,310,0;0,-1,0,0,1057,1057,0;0,-1,");
strBuf_19.append("0,0,1060,1060,0;0,2,0,0,1240,2006,0;0,2,0,0,1241,2007,0;0,2,");
strBuf_19.append("0,0,1242,2008,0;0,2,0,0,1243,2009,0;0,2,0,0,1244,2010,0;0,2,");
strBuf_19.append("0,0,1245,2011,0;0,2,0,0,1246,2012,0;0,2,0,0,1247,2013,0;0,2,");
strBuf_19.append("0,0,1248,2014,0;0,2,0,0,1289,2055,0;0,2,0,0,1290,2056,0;0,2,");
strBuf_19.append("0,0,1291,2057,0;0,2,0,0,1292,2058,0;0,2,0,0,1293,2059,0;0,2,");
strBuf_19.append("0,0,1294,2060,0;0,2,0,0,1295,2061,0;0,2,0,0,1296,2062,0;0,2,");
strBuf_19.append("0,0,1297,2063,0;0,2,0,0,1298,2064,0;0,2,0,0,1290,2056,0;0,2,");
strBuf_19.append("0,0,1291,2057,0;0,2,0,0,1292,2058,0;0,2,0,0,1293,2059,0;-1,-");
strBuf_19.append("1,1,0,-1,317,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1");
strBuf_19.append(",0,-1,706,0;-1,-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,");
strBuf_19.append("-1,220,0;-1,-1,1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,");
strBuf_19.append("118,0;-1,-1,1,0,-1,214,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418");
strBuf_19.append(",0;-1,-1,1,0,-1,421,0;-1,-1,1,0,-1,511,0;-1,-1,1,0,-1,632,0;");
strBuf_19.append("-1,-1,1,0,-1,424,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,");
strBuf_19.append("-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,2,-94,-108,-1,2,-94,-1");
strBuf_19.append("10,0,1,3915,612,690;1,1,4281,586,790;2,1,4586,364,790;3,3,47");
strBuf_19.append("51,364,790,-1;-1,2,-94,-117,-1,2,-94,-111,0,1782,-1,-1,-1;-1");
strBuf_19.append(",2,-94,-109,0,1781,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,");
strBuf_19.append("-1,2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/a/br");
strBuf_19.append("owse/writing-pads/N=5+549829/-1,2,-94,-115,1,22563,32,1782,1");
strBuf_19.append("781,0,26094,4751,0,1656508542086,14,17720,0,4,2953,1,0,4754,");
strBuf_19.append("21096,0,7475C20621AC05998EB5C2E913770E6D~-1~YAAQP8jZF7WtBq2B");
strBuf_19.append("AQAA/XKarwi2r3AfaQAMwKPmLjC6cxZhiCaSPNMYoGmGaUBa/y/xCKxYhPcS");
strBuf_19.append("2h2EVSdb209GfyJnqQQxEyCSTJj5xVbIF7GRkMmtazRWugphkDNSwDRNBRXN");
strBuf_19.append("3PzW8x58UXUiL56L2iwwDwEYRMM5kZv0+mrC3OSmdbKqbLkdDsYyjP8jU04X");
strBuf_19.append("ZCJUqiXEZMt7XJpbrm/IpdAw31wg/8d3PW5aEoV7Pk8nKL9yVVUobnQW5gr3");
strBuf_19.append("aYksFX3JwbeYmUd0MWHM+KJRUa031Ry32kDi6rkS2+1sy8FXijrd0tIlDr+L");
strBuf_19.append("oGuIO82uU+KDI4n/ajY9psWmSP/LfzKx/zdTJMwYu06RcTSpvrLGsbca7S8A");
strBuf_19.append("sV0Se8OnEmbR7vv5wOpvwO3Vq8ez~-1~-1~-1,37257,446,-543226964,3");
strBuf_19.append("0261693,PiZtE,62116,110,14,true-1,2,-94,-106,1,2-1,2,-94,-11");
strBuf_19.append("9,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-");
strBuf_19.append("1,2,-94,-126,-1,2,-94,-127,21321144241322243122-1,2,-94,-70,");
strBuf_19.append("273720021;-851345892;dis;,7;true;true;true;-60;true;24;24;tr");
strBuf_19.append("ue;false;-1-1,2,-94,-80,5372-1,2,-94,-116,1153180620-1,2,-94");
strBuf_19.append(",-118,176244-1,2,-94,-129,,,769baa1e58c97f68e09ccec638eeebbd");
strBuf_19.append("00639644b5049f8a3ec95a8672a5b0cb,,,,0-1,2,-94,-121,;4;10;0\"}");
String requestData_20 = strBuf_19.toString();
			
	HTTPPostDataChunk pdc_19 = new HTTPPostDataChunk("A1ECF7ADF3713BE4C9BBE33261613362", postData, requestData_20, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_19);

	}
private HTTPPage page_9(final IContainer parent) {
			HTTPThink think = new HTTPThink(1095, 1, parent, parent, "A1ECF7ADF53A8A2EC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Office Depot Writing Pads Canary 12 Pk - Office Depot", "A1ECF7ADF53A8A2EC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(26, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_278(this, true, "A1ECF7ADF53A8A20C9BBE33261613362", true, true,
						"Config_4", "/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/",	"/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_279(this, false, "A1ECF7ADF53BE9B1C9BBE33261613362", false, false,
						"Config_5", "/sku-page/static/css/main.css",	"/sku-page/static/css/main.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_280(this, false, "A1ECF7ADF53D2230C9BBE33261613362", false, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o01_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o01_060622/305706", true, false), 451, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 3);
				httpParallel.addRequest(2, request_281(this, false, "A1ECF7ADF53D2230C9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o01_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o01_060622/305706", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_282(this, false, "A1ECF7ADF53BE9B1C9BBE33261613362", true, false,
						"Config_5", "/sku-page/static/js/main.js",	"/sku-page/static/js/main.js", true, false), 17, 69, "A1ECF7ADF53D223EC9BBE33261613362", 3);
				httpParallel.addRequest(3, request_283(this, false, "A1ECF7ADF55B3183C9BBE33261613362", false, false,
						"Config_6", "/product_entities/od-ecoConscious.svg",	"/product_entities/od-ecoConscious.svg", true, false), 630, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_284(this, false, "A1ECF7ADF55B3183C9BBE33261613362", true, false,
						"Config_6", "/product_entities/od-recycledContent.svg",	"/product_entities/od-recycledContent.svg", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_285(this, false, "A1ECF7ADF55BF4D2C9BBE33261613362", false, false,
						"Config_4", "/styles/od/skupage_override.min.f590116861.css",	"/styles/od/skupage_override.min.f590116861.css", true, false), 701, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_286(this, false, "A1ECF7ADF55C1C38C9BBE33261613362", false, false,
						"Config_4", "/styles/sku_page.min.8e07d499ef3a3aa156dc.css",	"/styles/sku_page.min.8e07d499ef3a3aa156dc.css", true, false), 705, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(6, request_287(this, false, "A1ECF7ADF5701910C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 744, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_288(this, false, "A1ECF7ADF5708E63C9BBE33261613362", false, false,
						"Config_4", "/js/global_resources.min.af094a968357d28d3e0b.js",	"/js/global_resources.min.af094a968357d28d3e0b.js", true, false), 761, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(4, request_289(this, false, "A1ECF7ADF55BF4D2C9BBE33261613362", false, false,
						"Config_4", "/js/conversant.min.053f8dfab1eb9d5f68a8.js",	"/js/conversant.min.053f8dfab1eb9d5f68a8.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_290(this, false, "A1ECF7ADF55C1C38C9BBE33261613362", false, false,
						"Config_4", "/js/global_recently_viewed.min.7c8fe75a73271abbe4e8.js",	"/js/global_recently_viewed.min.7c8fe75a73271abbe4e8.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_291(this, false, "A1ECF7ADF5701910C9BBE33261613362", false, false,
						"Config_4", "/js/rich_relevance.min.033455e584a16ab6476c.js",	"/js/rich_relevance.min.033455e584a16ab6476c.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_292(this, false, "A1ECF7ADF55C1C38C9BBE33261613362", false, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=6&cachebuster=1353526947",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=6&cachebuster=1353526947", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(8, request_293(this, false, "A1ECF7ADED24FD70C9BBE33261613362", true, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 1685, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_294(this, false, "A1ECF7ADF55C1C38C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 2181, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(5, request_295(this, false, "A1ECF7ADF55C1C38C9BBE33261613362", true, false,
						"Config_4", "/catalog/crosssellsAndPPP.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?sku=305706",	"/catalog/crosssellsAndPPP.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?sku=305706", true, false), 2529, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(6, request_296(this, false, "A1ECF7ADF5701910C9BBE33261613362", true, false,
						"Config_4", "/json/translations.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?keys=atc.warranty.lightbox.heading,atc.warranty.lightbox.sub.heading,atc.warranty.lightbox.customer.benefits,atc.warranty.lightbox.customer.shipping,atc.warranty.lightbox.customer.support,atc.warranty.lightbox.smartphone.protection,atc.warranty.lightbox.customer.smart.device.service,atc.warranty.lightbox.customer.nohidden.fees,atc.warranty.lightbox.btn1,atc.warranty.lightbox.continueshooping,atc.warranty.lightbox.addtocart,atc.common.continue.to.cart,atc.warranty.continue.cart,atc.warranty.lightbox.add.protection.plan,atc.warranty.lightbox.laptop.subheading,atc.warranty.lightbox.laptop.subheading.protection,atc.warranty.lightbox.smarttv.gear.heading,atc.warranty.covers.mechanical.electrical.failures,atc.warranty.lightbox.covers.wifi.failures,atc.warranty.lightbox.gear.support,atc.warranty.lightbox.ipad.support,atc.warranty.lightbox.ipad.support.touchscreen,atc.warranty.lightbox.furniture.main.heading,atc.warranty.lightbox.gouges,atc.warranty.lightbox.furniture.hardware.failures,intro",	"/json/translations.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?keys=atc.warranty.lightbox.heading,atc.warranty.lightbox.sub.heading,atc.warranty.lightbox.customer.benefits,atc.warranty.lightbox.customer.shipping,atc.warranty.lightbox.customer.support,atc.warranty.lightbox.smartphone.protection,atc.warranty.lightbox.customer.smart.device.service,atc.warranty.lightbox.customer.nohidden.fees,atc.warranty.lightbox.btn1,atc.warranty.lightbox.continueshooping,atc.warranty.lightbox.addtocart,atc.common.continue.to.cart,atc.warranty.continue.cart,atc.warranty.lightbox.add.protection.plan,atc.warranty.lightbox.laptop.subheading,atc.warranty.lightbox.laptop.subheading.protection,atc.warranty.lightbox.smarttv.gear.heading,atc.warranty.covers.mechanical.electrical.failures,atc.warranty.lightbox.covers.wifi.failures,atc.warranty.lightbox.gear.support,atc.warranty.lightbox.ipad.support,atc.warranty.lightbox.ipad.support.touchscreen,atc.warranty.lightbox.furniture.main.heading,atc.warranty.lightbox.gouges,atc.warranty.lightbox.furniture.hardware.failures,intro", true, false), 2531, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_297(this, false, "A1ECF7ADF5708E63C9BBE33261613362", false, false,
						"Config_4", "/ajaxhtml/getBsdCartJson.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado",	"/ajaxhtml/getBsdCartJson.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado", true, false), 2535, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(4, request_298(this, false, "A1ECF7ADF55BF4D2C9BBE33261613362", false, false,
						"Config_4", "/mobile/getSkuAvailableOptions.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?familyDescription=Office%20Depot%20%20Brand%20Perforated%20Writing%20Pads&sku=305706",	"/mobile/getSkuAvailableOptions.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?familyDescription=Office%20Depot%20%20Brand%20Perforated%20Writing%20Pads&sku=305706", true, false), 2539, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(7, request_299(this, false, "A1ECF7ADF5708E63C9BBE33261613362", false, false,
						"Config_4", "/catalog/crosssellsAndPPP.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?sku=305706",	"/catalog/crosssellsAndPPP.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?sku=305706", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(9, request_300(this, false, "A1ECF7ADF5B845FBC9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o02_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o02_060622/305706", true, false), 268, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(10, request_301(this, false, "A1ECF7ADF5B86D0FC9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o03_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o03_060622/305706", true, false), 267, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(11, request_302(this, false, "A1ECF7ADF5B908F3C9BBE33261613362", false, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o03_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o03_060622/305706", true, false), 268, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(12, request_303(this, false, "A1ECF7ADF5B9304BC9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o04_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o04_060622/305706", true, false), 266, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(13, request_304(this, false, "A1ECF7ADF5B9A577C9BBE33261613362", false, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o02_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o02_060622/305706", true, false), 268, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(14, request_305(this, false, "A1ECF7ADF5BA1A74C9BBE33261613362", false, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o04_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o04_060622/305706", true, false), 326, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(15, request_306(this, false, "A1ECF7ADF5BA41CCC9BBE33261613362", true, false,
						"Config_5", "/promote-iq-carousel/static/css/main.css",	"/promote-iq-carousel/static/css/main.css", true, false), 149, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(14, request_307(this, false, "A1ECF7ADF5BA1A74C9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o05_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_120/products/305706/305706_o05_060622/305706", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(16, request_308(this, false, "A1ECF7ADF5BB050BC9BBE33261613362", true, false,
						"Config_5", "/promote-iq-carousel/static/js/main.js",	"/promote-iq-carousel/static/js/main.js", true, false), 149, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(11, request_309(this, false, "A1ECF7ADF5B908F3C9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o05_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o05_060622/305706", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(13, request_310(this, false, "A1ECF7ADF5B9A577C9BBE33261613362", true, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o06_060622/305706",	"/images/f_auto,q_auto,e_sharpen,h_450/products/305706/305706_o06_060622/305706", true, false), 103, 69, "A1ECF7ADF5BA41DAC9BBE33261613362", 3);
				httpParallel.addRequest(4, request_311(this, false, "A1ECF7ADF55BF4D2C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 3547, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(17, request_312(this, false, "A1ECF7ADF5BEAE9BC9BBE33261613362", false, false,
						"Config_7", "/services/store-locator-service/stores/v1/91",	"/services/store-locator-service/stores/v1/91", true, false), 416, 69, "A1ECF7ADF5798F4CC9BBE33261613362", 3);
				httpParallel.addRequest(17, request_313(this, false, "A1ECF7ADF5BEAE9BC9BBE33261613362", true, false,
						"Config_7", "/services/store-locator-service/stores/v1/91",	"/services/store-locator-service/stores/v1/91", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_314(this, false, "A1ECF7ADF5708E63C9BBE33261613362", true, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?items=625547,268671,268091,711382,963447,275254,223111,271289&mapBySkuId=true&showRestricted=true&noSession=true",	"/mobile/getAjaxPriceListFromService.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?items=625547,268671,268091,711382,963447,275254,223111,271289&mapBySkuId=true&showRestricted=true&noSession=true", true, false), 4529, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(18, request_315(this, false, "A1ECF7ADF5BF7190C9BBE33261613362", false, false,
						"Config_7", "/services/cross-sell-service/csModel",	"/services/cross-sell-service/csModel", true, false), 286, 69, "A1ECF7ADF5BEFC60C9BBE33261613362", 3);
				httpParallel.addRequest(18, request_316(this, false, "A1ECF7ADF5BF7190C9BBE33261613362", true, false,
						"Config_7", "/services/cross-sell-service/csModel",	"/services/cross-sell-service/csModel", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(19, request_317(this, false, "A1ECF7ADF5F17E10C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/268671/Office-Depot-Brand-Glue-Top-Legal",	"/images/t_medium,f_auto/products/268671/Office-Depot-Brand-Glue-Top-Legal", true, false), 732, 69, "A1ECF7ADF5BF98A2C9BBE33261613362", 3);
				httpParallel.addRequest(20, request_318(this, false, "A1ECF7ADF5F1CC79C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/268091/Office-Depot-Brand-Glue-Top-Legal",	"/images/t_medium,f_auto/products/268091/Office-Depot-Brand-Glue-Top-Legal", true, false), 734, 69, "A1ECF7ADF5BF98A2C9BBE33261613362", 3);
				httpParallel.addRequest(21, request_319(this, false, "A1ECF7ADF5F1F38BC9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/711382/TOPS-Docket-Gold-Premium-Writing-Pads",	"/images/t_medium,f_auto/products/711382/TOPS-Docket-Gold-Premium-Writing-Pads", true, false), 732, 69, "A1ECF7ADF5BF98A2C9BBE33261613362", 3);
				httpParallel.addRequest(22, request_320(this, false, "A1ECF7ADF5F24160C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/963447/TOPS-Docket-Writing-Pads-8-12",	"/images/t_medium,f_auto/products/963447/TOPS-Docket-Writing-Pads-8-12", true, false), 734, 69, "A1ECF7ADF5BF98A2C9BBE33261613362", 3);
				httpParallel.addRequest(23, request_321(this, false, "A1ECF7ADF5F268BBC9BBE33261613362", true, false,
						"Config_7", "/services/splunkjslogger/beacon.gif?src=sku-page&severity=error&msg=CrossSells%20error&pageUrl=undefined&isClient=true&glassboxUrl=undefined",	"/services/splunkjslogger/beacon.gif?src=sku-page&severity=error&msg=CrossSells%20error&pageUrl=undefined&isClient=true&glassboxUrl=undefined", true, false), 540, 69, "A1ECF7ADF5BF98A2C9BBE33261613362", 3);
				httpParallel.addRequest(24, request_322(this, false, "A1ECF7ADF5F2B691C9BBE33261613362", false, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?items=916585,916577,984690,580450&&noSession=true",	"/mobile/getAjaxPriceListFromService.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?items=916585,916577,984690,580450&&noSession=true", true, false), 5734, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(25, request_323(this, false, "A1ECF7ADF5F2DE10C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 5868, 69, "A1ECF7ADF53A8A32C9BBE33261613362", 2);
				httpParallel.addRequest(24, request_324(this, false, "A1ECF7ADF5F2B691C9BBE33261613362", true, false,
						"Config_4", "/fm/files/od/testing/2019/couponicon.png",	"/fm/files/od/testing/2019/couponicon.png", true, false), 0, 69, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_278(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF53A8A32C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/browse/writing-pads/N=5+549829/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508543.27;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw\";_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_14 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_14);

	harvestContainer_14.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[178], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_7", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[179], " src=\"(.*?)\"", 4, 4, 0, 0, false, "src_30", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[180], " href=\"(.*?)\"", 558, 537, 0, 0, false, "href_20", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[181], " src=\"(.*?)\"", 28, 1, 0, 0, false, "src_29", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[182], " href=\"(.*?)\"", 559, 1, 0, 0, false, "href_19", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[183], " value=\"(.*?)\"", 5, 1, 0, 0, false, "value_2", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[184], "/media\\.officedepot\\.com(.*?)_o01_060622\\.jpg\"", 1, 1, 0, 0, false, "media.officedepot.com_111", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[185], "/media\\.officedepot\\.com(.*?)\"", 25, 1, 0, 0, false, "media.officedepot.com_112", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[186], " src=\"(.*?)\"", 42, 11, 0, 0, false, "src_31", null, 0, false);
	harvestContainer_14.addHarvestInstruction ("resp_content", dcVars[187], " src=\"(.*?)\"", 43, 1, 0, 0, false, "src_28", null, 0, false);
	IDataSub subContainer_278 = new DataSub();
	reqAction.addDataSub(subContainer_278);

		ISubRule sub_715 = new SubRule("req_hdr_Referer_1", 0, 61, false, (IDCCoreVar)dcVars[131], false, "Referer_95", null, 0, false);
	subContainer_278.addSubInstruction(sub_715);
		ISubRule sub_716 = new SubRule("req_uri", 0, 62, false, (IDCCoreVar)dcVars[141], false, "Office Depot Writing_url_9", null, 0, false);
	subContainer_278.addSubInstruction(sub_716);
		ISubRule sub_717 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_95", null, 0, false);
	subContainer_278.addSubInstruction(sub_717);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF53A8A35C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_279(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF53C10C5C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_279 = new DataSub();
	reqAction.addDataSub(subContainer_279);

		ISubRule sub_718 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_94", null, 0, false);
	subContainer_279.addSubInstruction(sub_718);
		ISubRule sub_719 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_94", null, 0, false);
	subContainer_279.addSubInstruction(sub_719);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF53C10C8C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_280(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF53D223EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_280 = new DataSub();
	reqAction.addDataSub(subContainer_280);

		ISubRule sub_720 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_93", null, 0, false);
	subContainer_280.addSubInstruction(sub_720);
		ISubRule sub_721 = new SubRule("req_uri", 0, 78, false, (IDCCoreVar)dcVars[185], false, "Office Depot Writing_url_8", null, 0, false);
	subContainer_280.addSubInstruction(sub_721);
		ISubRule sub_722 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_93", null, 0, false);
	subContainer_280.addSubInstruction(sub_722);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF53D2241C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_281(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF53D709BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_281 = new DataSub();
	reqAction.addDataSub(subContainer_281);

		ISubRule sub_723 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_92", null, 0, false);
	subContainer_281.addSubInstruction(sub_723);
		ISubRule sub_724 = new SubRule("req_uri", 0, 78, false, (IDCCoreVar)dcVars[184], false, "Office Depot Writing_url_7", null, 0, false);
	subContainer_281.addSubInstruction(sub_724);
		ISubRule sub_725 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_92", null, 0, false);
	subContainer_281.addSubInstruction(sub_725);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF53D709EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_282(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF53E0C90C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_282 = new DataSub();
	reqAction.addDataSub(subContainer_282);

		ISubRule sub_726 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_91", null, 0, false);
	subContainer_282.addSubInstruction(sub_726);
		ISubRule sub_727 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_91", null, 0, false);
	subContainer_282.addSubInstruction(sub_727);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF53E0C93C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_283(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF55B5891C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_283 = new DataSub();
	reqAction.addDataSub(subContainer_283);

		ISubRule sub_728 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_90", null, 0, false);
	subContainer_283.addSubInstruction(sub_728);
		ISubRule sub_729 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_90", null, 0, false);
	subContainer_283.addSubInstruction(sub_729);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF55B5894C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_284(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF55BA6B0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_284 = new DataSub();
	reqAction.addDataSub(subContainer_284);

		ISubRule sub_730 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_89", null, 0, false);
	subContainer_284.addSubInstruction(sub_730);
		ISubRule sub_731 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_89", null, 0, false);
	subContainer_284.addSubInstruction(sub_731);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF55BA6B3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/svg+xml");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_285(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF55BF4E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_285 = new DataSub();
	reqAction.addDataSub(subContainer_285);

		ISubRule sub_732 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_88", null, 0, false);
	subContainer_285.addSubInstruction(sub_732);
		ISubRule sub_733 = new SubRule("req_uri", 0, 46, false, (IDCCoreVar)dcVars[180], false, "Office Depot Writing_url_6", null, 0, false);
	subContainer_285.addSubInstruction(sub_733);
		ISubRule sub_734 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_88", null, 0, false);
	subContainer_285.addSubInstruction(sub_734);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF55BF4E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_286(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF55C42F8C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_286 = new DataSub();
	reqAction.addDataSub(subContainer_286);

		ISubRule sub_735 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_87", null, 0, false);
	subContainer_286.addSubInstruction(sub_735);
		ISubRule sub_736 = new SubRule("req_uri", 0, 45, false, (IDCCoreVar)dcVars[182], false, "Office Depot Writing_url_5", null, 0, false);
	subContainer_286.addSubInstruction(sub_736);
		ISubRule sub_737 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_87", null, 0, false);
	subContainer_286.addSubInstruction(sub_737);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF55C42FBC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_287(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF570191EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_287 = new DataSub();
	reqAction.addDataSub(subContainer_287);

		ISubRule sub_738 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_86", null, 0, false);
	subContainer_287.addSubInstruction(sub_738);
		ISubRule sub_739 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_86", null, 0, false);
	subContainer_287.addSubInstruction(sub_739);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5701921C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_288(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5708E71C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_288 = new DataSub();
	reqAction.addDataSub(subContainer_288);

		ISubRule sub_740 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_85", null, 0, false);
	subContainer_288.addSubInstruction(sub_740);
		ISubRule sub_741 = new SubRule("req_uri", 0, 48, false, (IDCCoreVar)dcVars[186], false, "Office Depot Writing_url_4", null, 0, false);
	subContainer_288.addSubInstruction(sub_741);
		ISubRule sub_742 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_85", null, 0, false);
	subContainer_288.addSubInstruction(sub_742);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5708E74C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_289(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5759750C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_289 = new DataSub();
	reqAction.addDataSub(subContainer_289);

		ISubRule sub_743 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_84", null, 0, false);
	subContainer_289.addSubInstruction(sub_743);
		ISubRule sub_744 = new SubRule("req_uri", 0, 42, false, (IDCCoreVar)dcVars[179], false, "Office Depot Writing_url_3", null, 0, false);
	subContainer_289.addSubInstruction(sub_744);
		ISubRule sub_745 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_84", null, 0, false);
	subContainer_289.addSubInstruction(sub_745);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5759753C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_290(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5760C80C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_290 = new DataSub();
	reqAction.addDataSub(subContainer_290);

		ISubRule sub_746 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_83", null, 0, false);
	subContainer_290.addSubInstruction(sub_746);
		ISubRule sub_747 = new SubRule("req_uri", 0, 54, false, (IDCCoreVar)dcVars[181], false, "Office Depot Writing_url_2", null, 0, false);
	subContainer_290.addSubInstruction(sub_747);
		ISubRule sub_748 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_83", null, 0, false);
	subContainer_290.addSubInstruction(sub_748);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5760C83C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_291(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5765AA3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_291 = new DataSub();
	reqAction.addDataSub(subContainer_291);

		ISubRule sub_749 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_82", null, 0, false);
	subContainer_291.addSubInstruction(sub_749);
		ISubRule sub_750 = new SubRule("req_uri", 0, 46, false, (IDCCoreVar)dcVars[187], false, "Office Depot Writing_url", null, 0, false);
	subContainer_291.addSubInstruction(sub_750);
		ISubRule sub_751 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_82", null, 0, false);
	subContainer_291.addSubInstruction(sub_751);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5765AA6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_292(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5779323C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;mt.mbsh=%7B%221656508542268%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=gqyvbsiipm6&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1&nu=969155ab6fbc8a7a4606b9084541f398&cl=10ho&ld=10js&r=b6d05f97e8b312b78a737ac14a35261f&ul=10jw&hd=11sz\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508549.21", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_292 = new DataSub();
	reqAction.addDataSub(subContainer_292);

		ISubRule sub_752 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_81", null, 0, false);
	subContainer_292.addSubInstruction(sub_752);
		ISubRule sub_753 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_81", null, 0, false);
	subContainer_292.addSubInstruction(sub_753);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF577BA30C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_293(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF57967E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "561", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-65eb3f330e32a2ad----1656508550730", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-4bceb94c9bf4b4f3c1448e95857b7460-65eb3f330e32a2ad-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNjVlYjNmMzMwZTMyYTJhZCIsInRyIjoiNGJjZWI5NGM5YmY0YjRmM2MxNDQ4ZTk1ODU3Yjc0NjAiLCJ0aSI6MTY1NjUwODU1MDczMCwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_21(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_293 = new DataSub();
	reqAction.addDataSub(subContainer_293);

		ISubRule sub_754 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_80", null, 0, false);
	subContainer_293.addSubInstruction(sub_754);
		ISubRule sub_755 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_80", null, 0, false);
	subContainer_293.addSubInstruction(sub_755);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF57967E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_21(HTTPPostData postData) {
				StringBuffer strBuf_20 = new StringBuffer();
strBuf_20.append("id=4eec4f9d-f313-4b7c-b1ab-c41fbc4941ac&tagId=11024&fullRefe");
strBuf_20.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2Fa%2Fproducts%2F3");
strBuf_20.append("05706%2FOffice-Depot-Brand-Perforated-Writing-Pads%2F&payloa");
strBuf_20.append("d=%7B%22sitePage%22%3A%7B%22enterpriseId%22%3A%221523082%22%");
strBuf_20.append("2C%22cartSubtotal%22%3A%220%22%2C%22trackingSource%22%3A%22g");
strBuf_20.append("tm%22%2C%22pageType%22%3A%22N%2FA%22%2C%22%22%3A%7B%22userId");
strBuf_20.append("%22%3A%22%22%2C%22emailHash%22%3A%22%22%2C%22marketing_chann");
strBuf_20.append("el%22%3A%22In%20Progress%22%7D%7D%7D&isDeviceAccessGranted=f");
strBuf_20.append("alse&cjUser=00000000-0000-0000-0000-000000000000&cookies=cjC");
strBuf_20.append("onsent%3DMHxZfDB8Tnww");
String requestData_21 = strBuf_20.toString();
			
	HTTPPostDataChunk pdc_20 = new HTTPPostDataChunk("A1ECF7ADF5798EF0C9BBE33261613362", postData, requestData_21, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_20);

	}

	public HTTPAction request_294(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5798F4CC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1641", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-fb6c7b0cf938543a----1656508551226", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-25111299baf71c804053f0afa48754b0-fb6c7b0cf938543a-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZmI2YzdiMGNmOTM4NTQzYSIsInRyIjoiMjUxMTEyOTliYWY3MWM4MDQwNTNmMGFmYTQ4NzU0YjAiLCJ0aSI6MTY1NjUwODU1MTIyNiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_22(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_294 = new DataSub();
	reqAction.addDataSub(subContainer_294);

		ISubRule sub_756 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_79", null, 0, false);
	subContainer_294.addSubInstruction(sub_756);
		ISubRule sub_757 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_79", null, 0, false);
	subContainer_294.addSubInstruction(sub_757);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5798F4FC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_22(HTTPPostData postData) {
				StringBuffer strBuf_21 = new StringBuffer();
strBuf_21.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_21.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_21.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_21.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8551218,1920,1040,19");
strBuf_21.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_21.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.87090512");
strBuf_21.append("8435,828254275608.5,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,");
strBuf_21.append("dm_en,t_en-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;");
strBuf_21.append("0,0,0,0,-1,310,0;0,-1,0,0,1036,-1,1;0,-1,0,0,1036,-1,1;-1,2,");
strBuf_21.append("-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,310,");
strBuf_21.append("0;0,-1,0,0,1036,-1,1;0,-1,0,0,1036,-1,1;-1,2,-94,-108,-1,2,-");
strBuf_21.append("94,-110,-1,2,-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-");
strBuf_21.append("114,-1,2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/");
strBuf_21.append("a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads");
strBuf_21.append("/-1,2,-94,-115,1,32,32,0,0,0,0,1,0,1656508551217,-999999,177");
strBuf_21.append("20,0,0,2953,0,0,3,0,0,7475C20621AC05998EB5C2E913770E6D~-1~YA");
strBuf_21.append("AQP8jZF4uuBq2BAQAA2H+arwgz5yjSMf8qe3FdzT1hxPLS8c+OTkxcXYiQ4g");
strBuf_21.append("qtsn9+8u72ICjnyv7LpVAC7Ypa/aNubv4FYN/USD5KprCjVDl3l2r3uH+eG2");
strBuf_21.append("A6sYlHQ/xLPlqqLzO42/p2S5Ezrf/kdEcfRDmgGxdbYKZKReeyJbb2IhRUuQ");
strBuf_21.append("3dnNK07j32Vf6ymt7Mn+qpG1DqU6T0tjgr/cdvlnHuD9dlPf7OPuaSHKSXV8");
strBuf_21.append("c3/d2+euklXdTqvlq0mWVbRNK4ijwPjZjzvSWLCSH6x4zYK1MokDv0XNmJeR");
strBuf_21.append("eyE4uDjXFkh9pyc/tlDa4RPHDd1XiMNzlGabz1eIaSWvjMh2/GHaf2LRpOAL");
strBuf_21.append("VA/xd3WSS9ogZia9sFEVJqVlCDkFaXJzvrnq8cwCnJ~-1~-1~-1,37586,-1");
strBuf_21.append(",-1,30261693,PiZtE,74998,64,14,true-1,2,-94,-106,0,0-1,2,-94");
strBuf_21.append(",-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-1");
strBuf_21.append("24,-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94,-70,-1-1,2,-94,-80,");
strBuf_21.append("94-1,2,-94,-116,230882907-1,2,-94,-118,98889-1,2,-94,-129,-1");
strBuf_21.append(",2,-94,-121,;6;-1;0\"}");
String requestData_22 = strBuf_21.toString();
			
	HTTPPostDataChunk pdc_21 = new HTTPPostDataChunk("A1ECF7ADF579DD10C9BBE33261613362", postData, requestData_22, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_21);

	}

	public HTTPAction request_295(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B70D20C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-e931ad7c89b7fd41----1656508551576", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-5d44617b5cbc4ea8e1445aa6709923a0-e931ad7c89b7fd41-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZTkzMWFkN2M4OWI3ZmQ0MSIsInRyIjoiNWQ0NDYxN2I1Y2JjNGVhOGUxNDQ1YWE2NzA5OTIzYTAiLCJ0aSI6MTY1NjUwODU1MTU3NiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_295 = new DataSub();
	reqAction.addDataSub(subContainer_295);

		ISubRule sub_758 = new SubRule("req_uri", 82, 6, true, (IDCCoreVar)dcVars[183], false, "sku", null, 0, false);
	subContainer_295.addSubInstruction(sub_758);
		ISubRule sub_759 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_78", null, 0, false);
	subContainer_295.addSubInstruction(sub_759);
		ISubRule sub_760 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_78", null, 0, false);
	subContainer_295.addSubInstruction(sub_760);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5B70D23C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_296(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B734A3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-536e3b9eb06e6854----1656508551577", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-1c2aa97bc4656eefac6c5df1d27d3b80-536e3b9eb06e6854-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNTM2ZTNiOWViMDZlNjg1NCIsInRyIjoiMWMyYWE5N2JjNDY1NmVlZmFjNmM1ZGYxZDI3ZDNiODAiLCJ0aSI6MTY1NjUwODU1MTU3NywidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_296 = new DataSub();
	reqAction.addDataSub(subContainer_296);

		ISubRule sub_761 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_77", null, 0, false);
	subContainer_296.addSubInstruction(sub_761);
		ISubRule sub_762 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_77", null, 0, false);
	subContainer_296.addSubInstruction(sub_762);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5B734A6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_297(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B782A8C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(18);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-09692fec4fc0814c----1656508551582", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-d4a6b9b64fc6948e9bfd0a38da30b590-09692fec4fc0814c-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiMDk2OTJmZWM0ZmMwODE0YyIsInRyIjoiZDRhNmI5YjY0ZmM2OTQ4ZTliZmQwYTM4ZGEzMGI1OTAiLCJ0aSI6MTY1NjUwODU1MTU4MiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "application/json", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_297 = new DataSub();
	reqAction.addDataSub(subContainer_297);

		ISubRule sub_763 = new SubRule("req_uri", 39, 37, false, (IDCCoreVar)dcVars[133], false, "jsessionid", null, 0, false);
	subContainer_297.addSubInstruction(sub_763);
		ISubRule sub_764 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_76", null, 0, false);
	subContainer_297.addSubInstruction(sub_764);
		ISubRule sub_765 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_76", null, 0, false);
	subContainer_297.addSubInstruction(sub_765);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5B782ABC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_298(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B78373C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-512c34ba82462f9a----1656508551586", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-0c23e5df9a81f8913bf238e3e7fd9880-512c34ba82462f9a-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNTEyYzM0YmE4MjQ2MmY5YSIsInRyIjoiMGMyM2U1ZGY5YTgxZjg5MTNiZjIzOGUzZTdmZDk4ODAiLCJ0aSI6MTY1NjUwODU1MTU4NiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_298 = new DataSub();
	reqAction.addDataSub(subContainer_298);

		ISubRule sub_766 = new SubRule("req_uri", 161, 6, true, (IDCCoreVar)dcVars[183], false, "sku", null, 0, false);
	subContainer_298.addSubInstruction(sub_766);
		ISubRule sub_767 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_75", null, 0, false);
	subContainer_298.addSubInstruction(sub_767);
		ISubRule sub_768 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_75", null, 0, false);
	subContainer_298.addSubInstruction(sub_768);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5B78376C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_299(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B81E90C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-1a9e6f304b50ee41----1656508551641", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-d90645cfae73f6bf9c642a70e0f60b00-1a9e6f304b50ee41-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiMWE5ZTZmMzA0YjUwZWU0MSIsInRyIjoiZDkwNjQ1Y2ZhZTczZjZiZjljNjQyYTcwZTBmNjBiMDAiLCJ0aSI6MTY1NjUwODU1MTY0MSwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_299 = new DataSub();
	reqAction.addDataSub(subContainer_299);

		ISubRule sub_769 = new SubRule("req_uri", 82, 6, true, (IDCCoreVar)dcVars[183], false, "sku", null, 0, false);
	subContainer_299.addSubInstruction(sub_769);
		ISubRule sub_770 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_74", null, 0, false);
	subContainer_299.addSubInstruction(sub_770);
		ISubRule sub_771 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_74", null, 0, false);
	subContainer_299.addSubInstruction(sub_771);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5B81E93C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_300(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B84609C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_300 = new DataSub();
	reqAction.addDataSub(subContainer_300);

		ISubRule sub_772 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_73", null, 0, false);
	subContainer_300.addSubInstruction(sub_772);
		ISubRule sub_773 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_73", null, 0, false);
	subContainer_300.addSubInstruction(sub_773);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5B8460CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_301(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B893CCC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_301 = new DataSub();
	reqAction.addDataSub(subContainer_301);

		ISubRule sub_774 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_72", null, 0, false);
	subContainer_301.addSubInstruction(sub_774);
		ISubRule sub_775 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_72", null, 0, false);
	subContainer_301.addSubInstruction(sub_775);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5B893CFC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_302(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B90901C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_302 = new DataSub();
	reqAction.addDataSub(subContainer_302);

		ISubRule sub_776 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_71", null, 0, false);
	subContainer_302.addSubInstruction(sub_776);
		ISubRule sub_777 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_71", null, 0, false);
	subContainer_302.addSubInstruction(sub_777);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5B90904C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_303(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B93059C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_303 = new DataSub();
	reqAction.addDataSub(subContainer_303);

		ISubRule sub_778 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_70", null, 0, false);
	subContainer_303.addSubInstruction(sub_778);
		ISubRule sub_779 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_70", null, 0, false);
	subContainer_303.addSubInstruction(sub_779);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5B9305CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_304(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5B9CC43C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_304 = new DataSub();
	reqAction.addDataSub(subContainer_304);

		ISubRule sub_780 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_69", null, 0, false);
	subContainer_304.addSubInstruction(sub_780);
		ISubRule sub_781 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_69", null, 0, false);
	subContainer_304.addSubInstruction(sub_781);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5B9CC46C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/jpeg");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_305(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BA1A82C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_305 = new DataSub();
	reqAction.addDataSub(subContainer_305);

		ISubRule sub_782 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_68", null, 0, false);
	subContainer_305.addSubInstruction(sub_782);
		ISubRule sub_783 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_68", null, 0, false);
	subContainer_305.addSubInstruction(sub_783);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BA1A85C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_306(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BA41DAC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_306 = new DataSub();
	reqAction.addDataSub(subContainer_306);

		ISubRule sub_784 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_67", null, 0, false);
	subContainer_306.addSubInstruction(sub_784);
		ISubRule sub_785 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_67", null, 0, false);
	subContainer_306.addSubInstruction(sub_785);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BA41DDC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_307(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BADDB2C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_307 = new DataSub();
	reqAction.addDataSub(subContainer_307);

		ISubRule sub_786 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_66", null, 0, false);
	subContainer_307.addSubInstruction(sub_786);
		ISubRule sub_787 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_66", null, 0, false);
	subContainer_307.addSubInstruction(sub_787);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B78373C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BADDB5C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_308(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BB0519C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_15 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_15);

	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[188], "\\?cmd_addSKU\\.button\\.INDEX\\[0\\]=(.*?)\"", 1, 1, 0, 0, false, "cmd_addSKU.button.INDEX[0]_3", null, 0, false);
	harvestContainer_15.addHarvestInstruction ("resp_content", dcVars[189], "&noSession=(.*?)\"", 1, 1, 0, 0, false, "noSession_6", null, 0, false);
	IDataSub subContainer_308 = new DataSub();
	reqAction.addDataSub(subContainer_308);

		ISubRule sub_788 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_65", null, 0, false);
	subContainer_308.addSubInstruction(sub_788);
		ISubRule sub_789 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_65", null, 0, false);
	subContainer_308.addSubInstruction(sub_789);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5798F4CC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BB051CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_309(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BDC3E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_309 = new DataSub();
	reqAction.addDataSub(subContainer_309);

		ISubRule sub_790 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_64", null, 0, false);
	subContainer_309.addSubInstruction(sub_790);
		ISubRule sub_791 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_64", null, 0, false);
	subContainer_309.addSubInstruction(sub_791);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B78373C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BDC3E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_310(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BDEB3BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_310 = new DataSub();
	reqAction.addDataSub(subContainer_310);

		ISubRule sub_792 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_63", null, 0, false);
	subContainer_310.addSubInstruction(sub_792);
		ISubRule sub_793 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_63", null, 0, false);
	subContainer_310.addSubInstruction(sub_793);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B78373C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BDEB3EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_311(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BE6023C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1845", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-5dcfe2c673405a63----1656508552586", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-7794272ab02478e67be144327f151c70-5dcfe2c673405a63-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNWRjZmUyYzY3MzQwNWE2MyIsInRyIjoiNzc5NDI3MmFiMDI0NzhlNjdiZTE0NDMyN2YxNTFjNzAiLCJ0aSI6MTY1NjUwODU1MjU4NiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;BVBRANDID=bfe4b8bf-1561-46b6-910c-3fd29e16eb8b;BVBRANDSID=e70660d4-7c7a-4c82-9e21-a6567ac2d27f;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";mt.mbsh=%7B%221656508550945%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508551.19;_ga=GA1.1.565524517.1656508508;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_23(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_311 = new DataSub();
	reqAction.addDataSub(subContainer_311);

		ISubRule sub_794 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_62", null, 0, false);
	subContainer_311.addSubInstruction(sub_794);
		ISubRule sub_795 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_62", null, 0, false);
	subContainer_311.addSubInstruction(sub_795);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B78373C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BE8730C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_23(HTTPPostData postData) {
				StringBuffer strBuf_22 = new StringBuffer();
strBuf_22.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_22.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_22.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_22.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8551218,1920,1040,19");
strBuf_22.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_22.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.90837755");
strBuf_22.append("2454,828254275608.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_22.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_22.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_22.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_22.append(",310,0;0,-1,0,0,1036,-1,1;0,-1,0,0,1036,-1,1;-1,2,-94,-102,0");
strBuf_22.append(",0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,310,0;0,-1,0,0");
strBuf_22.append(",1036,-1,1;-1,2,-94,-108,-1,2,-94,-110,0,1,471,779,500;-1,2,");
strBuf_22.append("-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,");
strBuf_22.append("-103,-1,2,-94,-112,https://www.officedepot.com/a/products/30");
strBuf_22.append("5706/Office-Depot-Brand-Perforated-Writing-Pads/-1,2,-94,-11");
strBuf_22.append("5,1,1783,32,0,0,0,1751,1362,0,1656508551217,20,17720,0,1,295");
strBuf_22.append("3,0,0,1364,471,0,7475C20621AC05998EB5C2E913770E6D~-1~YAAQBMj");
strBuf_22.append("ZF8Xne66BAQAAspOarwhSz9CftcRZh6GsONM5VGzZ5O5oWzQsb0mWDLFlAps");
strBuf_22.append("w2YKi9otvAALz+i0OdZqvaI5r9Qw0BPjIT/XWvpgZkujDaxyL1WiTkWpCm5i");
strBuf_22.append("XiCKRciZ32iwU7n9mIZbfQODkCqDe8FaiIQ56mWd/PM+Z4gCurEmjudPLU+2");
strBuf_22.append("OTHX3pcj9APQh+9krOTbOjiQJbAGVp9dM8C1eYUYu7e3AN0pLmln0uZZbJB8");
strBuf_22.append("s3+4Gd0PFJA7gfnJAuHa6PMNHgYZ+u5SsGUyixN57jczr7D/lL0RQQK9cC59");
strBuf_22.append("FHetcK2D//XjJYmdPiI76XdckvK+q/Jx6u9ZMjukMrPnPs4a4x/9lypZDzH6");
strBuf_22.append("tI123jHiCGwujCSdi8l7KDcmBOb8jZZZeEwY6~-1~-1~-1,36943,978,131");
strBuf_22.append("8081180,30261693,PiZtE,44877,70,14,true-1,2,-94,-106,9,1-1,2");
strBuf_22.append(",-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-9");
strBuf_22.append("4,-124,-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94,-70,273720021;-");
strBuf_22.append("851345892;dis;,7;true;true;true;-60;true;24;24;true;false;-1");
strBuf_22.append("-1,2,-94,-80,5372-1,2,-94,-116,230882907-1,2,-94,-118,107003");
strBuf_22.append("-1,2,-94,-129,,,0,,,,0-1,2,-94,-121,;6;10;0\"}");
String requestData_23 = strBuf_22.toString();
			
	HTTPPostDataChunk pdc_22 = new HTTPPostDataChunk("A1ECF7ADF5BEAE40C9BBE33261613362", postData, requestData_23, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_22);

	}

	public HTTPAction request_312(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BED550C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_312 = new DataSub();
	reqAction.addDataSub(subContainer_312);

		ISubRule sub_796 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_61", null, 0, false);
	subContainer_312.addSubInstruction(sub_796);
		ISubRule sub_797 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_61", null, 0, false);
	subContainer_312.addSubInstruction(sub_797);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BED553C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_313(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BEFC60C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_313 = new DataSub();
	reqAction.addDataSub(subContainer_313);

		ISubRule sub_798 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_60", null, 0, false);
	subContainer_313.addSubInstruction(sub_798);
		ISubRule sub_799 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_60", null, 0, false);
	subContainer_313.addSubInstruction(sub_799);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BEFC63C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_314(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BF237AC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-dc0bba619871c88b----1656508553575", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-64d3b7727cd60c4f5f17893856d3e3a0-dc0bba619871c88b-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZGMwYmJhNjE5ODcxYzg4YiIsInRyIjoiNjRkM2I3NzI3Y2Q2MGM0ZjVmMTc4OTM4NTZkM2UzYTAiLCJ0aSI6MTY1NjUwODU1MzU3NSwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=92ef2c58-b213-46c3-9904-d813ddccdbc7;BVBRANDSID=6f1af0ae-1144-418b-b4e8-297a0c982f4d", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_314 = new DataSub();
	reqAction.addDataSub(subContainer_314);

		ISubRule sub_800 = new SubRule("req_uri", 196, 4, true, (IDCCoreVar)dcVars[189], false, "noSession", null, 0, false);
	subContainer_314.addSubInstruction(sub_800);
		ISubRule sub_801 = new SubRule("req_uri", 161, 4, true, (IDCCoreVar)dcVars[176], false, "mapBySkuId", null, 0, false);
	subContainer_314.addSubInstruction(sub_801);
		ISubRule sub_802 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_59", null, 0, false);
	subContainer_314.addSubInstruction(sub_802);
		ISubRule sub_803 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_59", null, 0, false);
	subContainer_314.addSubInstruction(sub_803);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BB0519C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5BF237DC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_315(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BF719EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Access-Control-Request-Method", "POST", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Access-Control-Request-Headers", "content-type", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_315 = new DataSub();
	reqAction.addDataSub(subContainer_315);

		ISubRule sub_804 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_58", null, 0, false);
	subContainer_315.addSubInstruction(sub_804);
		ISubRule sub_805 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_58", null, 0, false);
	subContainer_315.addSubInstruction(sub_805);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"OPTIONS",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BF71A1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/plain; charset=utf-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_316(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5BF98A2C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "142", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-type", "application/json", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_24(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_316 = new DataSub();
	reqAction.addDataSub(subContainer_316);

		ISubRule sub_806 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_57", null, 0, false);
	subContainer_316.addSubInstruction(sub_806);
		ISubRule sub_807 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_57", null, 0, false);
	subContainer_316.addSubInstruction(sub_807);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5BF98A5C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(502);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_24(HTTPPostData postData) {
				StringBuffer strBuf_23 = new StringBuffer();
strBuf_23.append("{\n  \"session_id\": \"0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado\",\n ");
strBuf_23.append(" \"cookie_id\": \"12345\",\n  \"current_cat\": \"Writing Pads\",\n  \"c");
strBuf_23.append("urrent_sku\": \"305706\",\n  \"viewed_cat\": []\n}");
String requestData_24 = strBuf_23.toString();
			
	HTTPPostDataChunk pdc_23 = new HTTPPostDataChunk("A1ECF7ADF5BFBFF0C9BBE33261613362", postData, requestData_24, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_23);

	}

	public HTTPAction request_317(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F17E1EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_317 = new DataSub();
	reqAction.addDataSub(subContainer_317);

		ISubRule sub_808 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_56", null, 0, false);
	subContainer_317.addSubInstruction(sub_808);
		ISubRule sub_809 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_56", null, 0, false);
	subContainer_317.addSubInstruction(sub_809);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F17E21C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_318(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F1CC87C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_318 = new DataSub();
	reqAction.addDataSub(subContainer_318);

		ISubRule sub_810 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_55", null, 0, false);
	subContainer_318.addSubInstruction(sub_810);
		ISubRule sub_811 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_55", null, 0, false);
	subContainer_318.addSubInstruction(sub_811);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F1CC8AC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_319(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F1F399C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_319 = new DataSub();
	reqAction.addDataSub(subContainer_319);

		ISubRule sub_812 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_54", null, 0, false);
	subContainer_319.addSubInstruction(sub_812);
		ISubRule sub_813 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_54", null, 0, false);
	subContainer_319.addSubInstruction(sub_813);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F1F39CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_320(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F2416EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_320 = new DataSub();
	reqAction.addDataSub(subContainer_320);

		ISubRule sub_814 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_53", null, 0, false);
	subContainer_320.addSubInstruction(sub_814);
		ISubRule sub_815 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_53", null, 0, false);
	subContainer_320.addSubInstruction(sub_815);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F24171C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_321(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F268C9C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(13);
					
		headers.add(new RequestHeaderData("Host", "api.officedepot.io", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "cross-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_321 = new DataSub();
	reqAction.addDataSub(subContainer_321);

		ISubRule sub_816 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_52", null, 0, false);
	subContainer_321.addSubInstruction(sub_816);
		ISubRule sub_817 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[3], false, "Host_52", null, 0, false);
	subContainer_321.addSubInstruction(sub_817);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F268CCC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/octet-stream");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_322(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F2B69FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-bbf923e98b6c57f0----1656508554788", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-6846ac00492c6d05ddc143c80b291210-bbf923e98b6c57f0-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiYmJmOTIzZTk4YjZjNTdmMCIsInRyIjoiNjg0NmFjMDA0OTJjNmQwNWRkYzE0M2M4MGIyOTEyMTAiLCJ0aSI6MTY1NjUwODU1NDc4OCwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_322 = new DataSub();
	reqAction.addDataSub(subContainer_322);

		ISubRule sub_818 = new SubRule("req_uri", 133, 4, true, (IDCCoreVar)dcVars[189], false, "noSession", null, 0, false);
	subContainer_322.addSubInstruction(sub_818);
		ISubRule sub_819 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_51", null, 0, false);
	subContainer_322.addSubInstruction(sub_819);
		ISubRule sub_820 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_51", null, 0, false);
	subContainer_322.addSubInstruction(sub_820);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BB0519C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF5F2B6A2C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_323(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F304B5C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "2149", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-35400a5e32dd2468----1656508555052", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-fc27323077cc231c57c85b442acdf060-35400a5e32dd2468-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiMzU0MDBhNWUzMmRkMjQ2OCIsInRyIjoiZmMyNzMyMzA3N2NjMjMxYzU3Yzg1YjQ0MmFjZGYwNjAiLCJ0aSI6MTY1NjUwODU1NTA1MiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_25(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_323 = new DataSub();
	reqAction.addDataSub(subContainer_323);

		ISubRule sub_821 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_50", null, 0, false);
	subContainer_323.addSubInstruction(sub_821);
		ISubRule sub_822 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_50", null, 0, false);
	subContainer_323.addSubInstruction(sub_822);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F304B8C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_25(HTTPPostData postData) {
				StringBuffer strBuf_24 = new StringBuffer();
strBuf_24.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_24.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_24.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_24.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8551218,1920,1040,19");
strBuf_24.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_24.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.24394016");
strBuf_24.append("7121,828254275608.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_24.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_24.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_24.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_24.append(",310,0;0,-1,0,0,1036,-1,1;0,-1,0,0,1036,-1,1;-1,2,-94,-102,0");
strBuf_24.append(",0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,310,0;0,-1,0,0");
strBuf_24.append(",1036,-1,1;-1,2,-94,-108,-1,2,-94,-110,0,1,471,779,500;1,1,2");
strBuf_24.append("215,818,495;2,1,2318,880,477;3,1,2427,923,465;4,1,2506,957,4");
strBuf_24.append("50;5,1,2784,1021,402;6,1,3305,1059,303;7,1,3364,1064,291;8,1");
strBuf_24.append(",3472,1066,287;9,3,3830,1066,287,-1;-1,2,-94,-117,-1,2,-94,-");
strBuf_24.append("111,0,1579,-1,-1,-1;-1,2,-94,-109,0,1579,-1,-1,-1,-1,-1,-1,-");
strBuf_24.append("1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-112,https://ww");
strBuf_24.append("w.officedepot.com/a/products/305706/Office-Depot-Brand-Perfo");
strBuf_24.append("rated-Writing-Pads/-1,2,-94,-115,1,40371,32,1579,1579,0,4349");
strBuf_24.append("7,3830,0,1656508551217,20,17720,0,10,2953,1,0,3831,29850,0,7");
strBuf_24.append("475C20621AC05998EB5C2E913770E6D~-1~YAAQBMjZF/Xne66BAQAARpaar");
strBuf_24.append("wgOzUCuUNYrAaJQaGzocGX6jCDjcjKfunJfp4k4pm2/u1p1IJ4+RD/DK32y4");
strBuf_24.append("nzEGlUQvaZa8Cz2DvKTb5orOA9EBeykwhUiDRsdkZompy5Q5jlL+CIEp81wL");
strBuf_24.append("jjpqoGbef5Jfv5Zdt3TQK/XucEu2Pl1I3/dJxjvswTFTofVtwF8jU3Qi6YII");
strBuf_24.append("O9jHmDJJkQX5kE8yZnK+SKntJA/g+hejulC6tksQM1D8o+I2+APWsfh8ua/D");
strBuf_24.append("CtZvrt7kUPrs+Vmf+EhRtLCOgSSoi7rODWLDt+wLrIm7M9xx7eFSLlbdYdA5");
strBuf_24.append("FNDhK6ICQS3wrWB8h/8oM9ZafHrjCYhHjZ1nDj/13RgteOldVYcXF7JxFSKk");
strBuf_24.append("IHeQJL+GxyA2MkvshrE~-1~-1~-1,37294,978,1318081180,30261693,P");
strBuf_24.append("iZtE,57644,55,14,true-1,2,-94,-106,1,2-1,2,-94,-119,-1-1,2,-");
strBuf_24.append("94,-122,0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-1");
strBuf_24.append("26,-1,2,-94,-127,21321144241322243122-1,2,-94,-70,273720021;");
strBuf_24.append("-851345892;dis;,7;true;true;true;-60;true;24;24;true;false;-");
strBuf_24.append("1-1,2,-94,-80,5372-1,2,-94,-116,230882907-1,2,-94,-118,11934");
strBuf_24.append("9-1,2,-94,-129,,,769baa1e58c97f68e09ccec638eeebbd00639644b50");
strBuf_24.append("49f8a3ec95a8672a5b0cb,,,,0-1,2,-94,-121,;4;10;0\"}");
String requestData_25 = strBuf_24.toString();
			
	HTTPPostDataChunk pdc_24 = new HTTPPostDataChunk("A1ECF7ADF5F32BC0C9BBE33261613362", postData, requestData_25, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_24);

	}

	public HTTPAction request_324(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF5F32C1BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;kampyleSessionPageCounter=3;_clsk=e2zmnj|1656508548164|4|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_324 = new DataSub();
	reqAction.addDataSub(subContainer_324);

		ISubRule sub_823 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_49", null, 0, false);
	subContainer_324.addSubInstruction(sub_823);
		ISubRule sub_824 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_49", null, 0, false);
	subContainer_324.addSubInstruction(sub_824);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5BE6023C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF5B782A8C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF53A8A32C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF5F32C1EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_10(final IContainer parent) {
			HTTPThink think = new HTTPThink(503, 1, parent, parent, "A1ECF7ADF685A7C0C9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "HQFje_jFRalo {3}", "A1ECF7ADF685A7C0C9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(4, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_325(this, true, "A1ECF7ADF5F17E10C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/580450/Avery-Laser-Post-Cards-4-14",	"/images/t_medium,f_auto/products/580450/Avery-Laser-Post-Cards-4-14", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_326(this, false, "A1ECF7ADF5F24160C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/916577/Avery-Laser-And-Inkjet-Index-Cards",	"/images/t_medium,f_auto/products/916577/Avery-Laser-And-Inkjet-Index-Cards", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_327(this, false, "A1ECF7ADF5F1F38BC9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/916585/Avery-Printable-Cards-4-x-6",	"/images/t_medium,f_auto/products/916585/Avery-Printable-Cards-4-x-6", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_328(this, false, "A1ECF7ADF6866B46C9BBE33261613362", true, true,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_325(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF685A7C4C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_325 = new DataSub();
	reqAction.addDataSub(subContainer_325);

		ISubRule sub_825 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_48", null, 0, false);
	subContainer_325.addSubInstruction(sub_825);
		ISubRule sub_826 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_48", null, 0, false);
	subContainer_325.addSubInstruction(sub_826);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF685A7C7C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_326(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF685F5E3C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_326 = new DataSub();
	reqAction.addDataSub(subContainer_326);

		ISubRule sub_827 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_47", null, 0, false);
	subContainer_326.addSubInstruction(sub_827);
		ISubRule sub_828 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_47", null, 0, false);
	subContainer_326.addSubInstruction(sub_828);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF685F5E6C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_327(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF6861D3BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_327 = new DataSub();
	reqAction.addDataSub(subContainer_327);

		ISubRule sub_829 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_46", null, 0, false);
	subContainer_327.addSubInstruction(sub_829);
		ISubRule sub_830 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_46", null, 0, false);
	subContainer_327.addSubInstruction(sub_830);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF6861D3EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_328(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF6866B54C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "2310", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-a285a46c4e3e0ed3----1656508556272", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-cec93941ee523adbe50d6994dd4c2020-a285a46c4e3e0ed3-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiYTI4NWE0NmM0ZTNlMGVkMyIsInRyIjoiY2VjOTM5NDFlZTUyM2FkYmU1MGQ2OTk0ZGQ0YzIwMjAiLCJ0aSI6MTY1NjUwODU1NjI3MiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_26(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_328 = new DataSub();
	reqAction.addDataSub(subContainer_328);

		ISubRule sub_831 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_45", null, 0, false);
	subContainer_328.addSubInstruction(sub_831);
		ISubRule sub_832 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_45", null, 0, false);
	subContainer_328.addSubInstruction(sub_832);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF6866B57C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_26(HTTPPostData postData) {
				StringBuffer strBuf_25 = new StringBuffer();
strBuf_25.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_25.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_25.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_25.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8551218,1920,1040,19");
strBuf_25.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_25.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.86196220");
strBuf_25.append("3430,828254275608.5,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows");
strBuf_25.append(";10.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chro");
strBuf_25.append("me/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en");
strBuf_25.append("-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1");
strBuf_25.append(",310,0;0,-1,0,0,1036,-1,1;0,-1,0,0,1036,-1,1;-1,2,-94,-102,0");
strBuf_25.append(",0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,310,0;0,-1,0,0");
strBuf_25.append(",1036,-1,1;-1,2,-94,-108,-1,2,-94,-110,0,1,471,779,500;1,1,2");
strBuf_25.append("215,818,495;2,1,2318,880,477;3,1,2427,923,465;4,1,2506,957,4");
strBuf_25.append("50;5,1,2784,1021,402;6,1,3305,1059,303;7,1,3364,1064,291;8,1");
strBuf_25.append(",3472,1066,287;9,3,3830,1066,287,-1;10,1,3846,1066,287;11,1,");
strBuf_25.append("3895,1066,287;12,4,4231,1066,287,-1;13,2,4529,1066,287,-1;14");
strBuf_25.append(",1,4541,1062,324;15,1,4592,1061,327;16,1,4752,1061,333;17,3,");
strBuf_25.append("5051,1061,333,-1;-1,2,-94,-117,-1,2,-94,-111,0,1579,-1,-1,-1");
strBuf_25.append(";-1,2,-94,-109,0,1579,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-1");
strBuf_25.append("14,-1,2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/a");
strBuf_25.append("/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/");
strBuf_25.append("-1,2,-94,-115,1,86904,32,1579,1579,0,90030,5051,0,1656508551");
strBuf_25.append("217,20,17720,0,18,2953,3,0,5052,65287,0,7475C20621AC05998EB5");
strBuf_25.append("C2E913770E6D~-1~YAAQP8jZFwiwBq2BAQAALaGarwiJh3VhX+QJqb/2EQJg");
strBuf_25.append("WdY2wA6fyJGiKdr18yJyU5LiFcqFYyQKdWK9faEOzucW+DDie+PcB+8xl1aS");
strBuf_25.append("G93JMVsxjzRd24n0Z7urOzotXhJVSIhjhMrbA42a2xh8nY0gar34ftr6y9DG");
strBuf_25.append("KYS0PWnWOuP2kiyJSR0VBiUnfUtnHqb540nuNhrtA+uw9+Vn3slEu0uRMm/3");
strBuf_25.append("n78TrXslrilQ6PemUuhBO+bK3uoZ8H1QhmgfvF+F7wofrO3J9qPVLFeSq7tm");
strBuf_25.append("CKuli2oDX4czoPzWYqmXasXu2JACxRQ56Isl8EfNC1bn29ryiZDv4JU8aw94");
strBuf_25.append("n9h+x58TUcmsvhjlOKD8/tgSHNtQ1nYCvIyzVaRpnnYeRpvsEuNq0UCbs6/6");
strBuf_25.append("~-1~-1~-1,37710,978,1318081180,30261693,PiZtE,68284,94,14,tr");
strBuf_25.append("ue-1,2,-94,-106,1,3-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0");
strBuf_25.append(",0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,21");
strBuf_25.append("321144241322243122-1,2,-94,-70,273720021;-851345892;dis;,7;t");
strBuf_25.append("rue;true;true;-60;true;24;24;true;false;-1-1,2,-94,-80,5372-");
strBuf_25.append("1,2,-94,-116,230882907-1,2,-94,-118,127824-1,2,-94,-129,,,76");
strBuf_25.append("9baa1e58c97f68e09ccec638eeebbd00639644b5049f8a3ec95a8672a5b0");
strBuf_25.append("cb,,,,0-1,2,-94,-121,;3;10;0\"}");
String requestData_26 = strBuf_25.toString();
			
	HTTPPostDataChunk pdc_25 = new HTTPPostDataChunk("A1ECF7ADF686B930C9BBE33261613362", postData, requestData_26, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_25);

	}
private HTTPPage page_11(final IContainer parent) {
			HTTPThink think = new HTTPThink(100, 1, parent, parent, "A1ECF7ADF7169D2EC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Office Supplies, Furniture, Technology at Office Depot", "A1ECF7ADF7169D2EC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(14, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_329(this, true, "A1ECF7ADF7169D20C9BBE33261613362", true, false,
						"Config_4", "/ajaxhtml/addSkuToCartByButton.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart",	"/ajaxhtml/addSkuToCartByButton.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_330(this, false, "A1ECF7ADF72A7340C9BBE33261613362", true, true,
						"Config_4", "/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1",	"/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", true, false), 416, 69, "A1ECF7ADF7169D32C9BBE33261613362", 3);
				httpParallel.addRequest(2, request_331(this, false, "A1ECF7ADF72BF9E0C9BBE33261613362", true, false,
						"Config_4", "/styles/od/cart.min.8ca0c81049.css",	"/styles/od/cart.min.8ca0c81049.css", true, false), 991, 69, "A1ECF7ADF7169D32C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_332(this, false, "A1ECF7ADF73A51C0C9BBE33261613362", false, false,
						"Config_4", "/js/od/alternates.min.b9da65b3ba.js",	"/js/od/alternates.min.b9da65b3ba.js", true, false), 18, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
				httpParallel.addRequest(4, request_333(this, false, "A1ECF7ADF74219F0C9BBE33261613362", false, false,
						"Config_6", "/images/t_small,f_auto/products/305706/Office-Depot-Brand-Perforated-Writing-Pads",	"/images/t_small,f_auto/products/305706/Office-Depot-Brand-Perforated-Writing-Pads", true, false), 102, 69, "A1ECF7ADF72A734EC9BBE33261613362", 3);
				httpParallel.addRequest(5, request_334(this, false, "A1ECF7ADF7568C50C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 108, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
				httpParallel.addRequest(3, request_335(this, false, "A1ECF7ADF73A51C0C9BBE33261613362", false, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=7&cachebuster=1493243188",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=7&cachebuster=1493243188", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_336(this, false, "A1ECF7ADF7572890C9BBE33261613362", true, false,
						"Config_6", "/images/t_small,f_auto/products/305466/Office-Depot-Brand-Perforated-Writing-Pads",	"/images/t_small,f_auto/products/305466/Office-Depot-Brand-Perforated-Writing-Pads", true, false), 70, 69, "A1ECF7ADF72BF9EEC9BBE33261613362", 3);
				httpParallel.addRequest(4, request_337(this, false, "A1ECF7ADF74219F0C9BBE33261613362", true, false,
						"Config_6", "/images/t_small,f_auto/products/963447/TOPS-Docket-Writing-Pads-8-12",	"/images/t_small,f_auto/products/963447/TOPS-Docket-Writing-Pads-8-12", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_338(this, false, "A1ECF7ADF75776FBC9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/bg_warning_small.png",	"/image/upload/f_auto,q_auto/gtools/images/od/new/bg_warning_small.png", true, false), 70, 69, "A1ECF7ADF72BF9EEC9BBE33261613362", 3);
				httpParallel.addRequest(3, request_339(this, false, "A1ECF7ADF73A51C0C9BBE33261613362", false, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do?items=305706&mapBySkuId=true&includeOos=true&noSession=true",	"/mobile/getAjaxPriceListFromService.do?items=305706&mapBySkuId=true&includeOos=true&noSession=true", true, false), 910, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
				httpParallel.addRequest(8, request_340(this, false, "A1ECF7ADF7917270C9BBE33261613362", false, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 618, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
				httpParallel.addRequest(3, request_341(this, false, "A1ECF7ADF73A51C0C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 1258, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
				httpParallel.addRequest(9, request_342(this, false, "A1ECF7ADF791E7F3C9BBE33261613362", true, false,
						"Config_6", "/image/upload/f_auto,q_auto/gtools/images/od/new/iss_table_head.jpg",	"/image/upload/f_auto,q_auto/gtools/images/od/new/iss_table_head.jpg", true, false), 226, 69, "A1ECF7ADF7579E0BC9BBE33261613362", 3);
				httpParallel.addRequest(10, request_343(this, false, "A1ECF7ADF79235C1C9BBE33261613362", true, false,
						"Config_5", "/products-rail/static/css/main.css",	"/products-rail/static/css/main.css", true, false), 133, 69, "A1ECF7ADF791E801C9BBE33261613362", 3);
				httpParallel.addRequest(11, request_344(this, false, "A1ECF7ADF792AB3BC9BBE33261613362", true, false,
						"Config_5", "/products-rail/static/css/global.css",	"/products-rail/static/css/global.css", true, false), 134, 69, "A1ECF7ADF791E801C9BBE33261613362", 3);
				httpParallel.addRequest(12, request_345(this, false, "A1ECF7ADF792D247C9BBE33261613362", true, false,
						"Config_5", "/products-rail/static/js/main.js",	"/products-rail/static/js/main.js", true, false), 134, 69, "A1ECF7ADF791E801C9BBE33261613362", 3);
				httpParallel.addRequest(5, request_346(this, false, "A1ECF7ADF7568C50C9BBE33261613362", true, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 2215, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
				httpParallel.addRequest(13, request_347(this, false, "A1ECF7ADF79654C9C9BBE33261613362", true, false,
						"Config_4", "/akam-sw.js",	"/akam-sw.js", true, false), 527, 69, "A1ECF7ADF72A734EC9BBE33261613362", 2);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_329(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7169D32C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "161", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-32b2085b43174fb1----1656508556592", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-8a4c37471333e4a45d83473bcfbd9b80-32b2085b43174fb1-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiMzJiMjA4NWI0MzE3NGZiMSIsInRyIjoiOGE0YzM3NDcxMzMzZTRhNDVkODM0NzNiY2ZiZDliODAiLCJ0aSI6MTY1NjUwODU1NjU5MiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "application/x-www-form-urlencoded;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;kampyleSessionPageCounter=3;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=4&tt=meo&obo=1&rl=1\";salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508553.17;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;BVBRANDID=2f8c5adf-a63b-46c8-8432-7d17ff819068;BVBRANDSID=1945454d-d495-4a8e-96da-694135158083;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_27(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_330 = new DataSub();
	reqAction.addDataSub(subContainer_330);

		ISubRule sub_835 = new SubRule("req_uri", 110, 19, false, (IDCCoreVar)dcVars[188], false, "cmd_addSKU.button.INDEX[0]", null, 0, false);
	subContainer_330.addSubInstruction(sub_835);
		ISubRule sub_836 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_44", null, 0, false);
	subContainer_330.addSubInstruction(sub_836);
		ISubRule sub_837 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_44", null, 0, false);
	subContainer_330.addSubInstruction(sub_837);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF7169D35C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_27(HTTPPostData postData) {
				StringBuffer strBuf_26 = new StringBuffer();
strBuf_26.append("cmATCSourcePage=Product Details Page&trackingCategoryId=5498");
strBuf_26.append("29&entryFormList[0].cmMessage=Product Details Page&entryForm");
strBuf_26.append("List[0].sku=305706&entryFormList[0].qty=1");
String requestData_27 = strBuf_26.toString();
			
	HTTPPostDataChunk pdc_26 = new HTTPPostDataChunk("A1ECF7ADF716C43AC9BBE33261613362", postData, requestData_27, "UTF-8", 7, 161);
	postData.addDataChunk(pdc_26);

	IDataSub subContainer_329 = new DataSub();
	pdc_26.addDataSub(subContainer_329);

		ISubRule sub_833 = new SubRule("req_content", 160, 1, true, (IDCCoreVar)dcVars[134], false, "entryFormList[0].qty", null, 0, false);
	subContainer_329.addSubInstruction(sub_833);
		ISubRule sub_834 = new SubRule("req_content", 132, 6, true, (IDCCoreVar)dcVars[143], false, "entryFormList[0].sku", null, 0, false);
	subContainer_329.addSubInstruction(sub_834);
	



	}

	public HTTPAction request_330(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF72A734EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(16);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/a/products/305706/Office-Depot-Brand-Perforated-Writing-Pads/", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "ISO-8859-1", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508557.13;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811\"", "ISO-8859-1", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_16 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_16);

	harvestContainer_16.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[190], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_8", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[191], " href=\"(.*?)\"", 21, 21, 0, 0, false, "href_21", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[192], "<[[^>].]*?name=\"validationForm\\.capacity\"(([[^>].]*?value=\"(.*?)\")|(?:[[^>].]*?>))", 1, 1, 0, 0, false, "value_3", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[193], "/media\\.officedepot\\.com(.*?)\"", 22, 1, 0, 0, false, "media.officedepot.com_115", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[194], "/media\\.officedepot\\.com(.*?)\"", 23, 1, 0, 0, false, "media.officedepot.com_114", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[195], "/media\\.officedepot\\.com(.*?)\"", 24, 1, 0, 0, false, "media.officedepot.com_113", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[196], "<[[^>].]*?name=\"iref2\"(([[^>].]*?value=\"(.*?)\")|(?:[[^>].]*?>))", 1, 1, 0, 0, false, "value_4", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[197], "<(([^>]*value=\"([^>]*?)\"[^>]*)|(?:[^>]*?))name=\"updateAll\"[^>]*>", 1, 1, 0, 0, false, "value_5", null, 0, false);
	harvestContainer_16.addHarvestInstruction ("resp_content", dcVars[198], " src=\"(.*?)\"", 48, 7, 0, 0, false, "src_32", null, 0, false);
	IDataSub subContainer_331 = new DataSub();
	reqAction.addDataSub(subContainer_331);

		ISubRule sub_838 = new SubRule("req_uri", 298, 1, true, (IDCCoreVar)dcVars[134], false, "entryFormList%5B0%5D.qty", null, 0, false);
	subContainer_331.addSubInstruction(sub_838);
		ISubRule sub_839 = new SubRule("req_uri", 98, 19, false, (IDCCoreVar)dcVars[188], false, "cmd_addSKU.button.INDEX[0]", null, 0, false);
	subContainer_331.addSubInstruction(sub_839);
		ISubRule sub_840 = new SubRule("req_hdr_Referer_1", 0, 89, false, (IDCCoreVar)dcVars[178], false, "Referer_43", null, 0, false);
	subContainer_331.addSubInstruction(sub_840);
		ISubRule sub_841 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_43", null, 0, false);
	subContainer_331.addSubInstruction(sub_841);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"ISO-8859-1",
			"UTF-8",
			"A1ECF7ADF72A7351C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_331(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF72BF9EEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_332 = new DataSub();
	reqAction.addDataSub(subContainer_332);

		ISubRule sub_842 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_42", null, 0, false);
	subContainer_332.addSubInstruction(sub_842);
		ISubRule sub_843 = new SubRule("req_uri", 0, 34, false, (IDCCoreVar)dcVars[191], false, "Office Supplies, Fur_url_5", null, 0, false);
	subContainer_332.addSubInstruction(sub_843);
		ISubRule sub_844 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_42", null, 0, false);
	subContainer_332.addSubInstruction(sub_844);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF72BF9F1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_332(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF73A51CEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_333 = new DataSub();
	reqAction.addDataSub(subContainer_333);

		ISubRule sub_845 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_41", null, 0, false);
	subContainer_333.addSubInstruction(sub_845);
		ISubRule sub_846 = new SubRule("req_uri", 0, 35, false, (IDCCoreVar)dcVars[198], false, "Office Supplies, Fur_url_4", null, 0, false);
	subContainer_333.addSubInstruction(sub_846);
		ISubRule sub_847 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_41", null, 0, false);
	subContainer_333.addSubInstruction(sub_847);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF73A51D1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_333(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF74219FEC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_334 = new DataSub();
	reqAction.addDataSub(subContainer_334);

		ISubRule sub_848 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_40", null, 0, false);
	subContainer_334.addSubInstruction(sub_848);
		ISubRule sub_849 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[193], false, "Office Supplies, Fur_url_3", null, 0, false);
	subContainer_334.addSubInstruction(sub_849);
		ISubRule sub_850 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_40", null, 0, false);
	subContainer_334.addSubInstruction(sub_850);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7421A01C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_334(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7568C5EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_335 = new DataSub();
	reqAction.addDataSub(subContainer_335);

		ISubRule sub_851 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_39", null, 0, false);
	subContainer_335.addSubInstruction(sub_851);
		ISubRule sub_852 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_39", null, 0, false);
	subContainer_335.addSubInstruction(sub_852);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7568C61C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_335(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7570180C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_336 = new DataSub();
	reqAction.addDataSub(subContainer_336);

		ISubRule sub_853 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_38", null, 0, false);
	subContainer_336.addSubInstruction(sub_853);
		ISubRule sub_854 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_38", null, 0, false);
	subContainer_336.addSubInstruction(sub_854);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7570183C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_336(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF757289EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_337 = new DataSub();
	reqAction.addDataSub(subContainer_337);

		ISubRule sub_855 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_37", null, 0, false);
	subContainer_337.addSubInstruction(sub_855);
		ISubRule sub_856 = new SubRule("req_uri", 0, 81, false, (IDCCoreVar)dcVars[194], false, "Office Supplies, Fur_url_2", null, 0, false);
	subContainer_337.addSubInstruction(sub_856);
		ISubRule sub_857 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_37", null, 0, false);
	subContainer_337.addSubInstruction(sub_857);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF75728A1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_337(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7574FEBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=03s49xecehwy&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1&ld=1810&r=969155ab6fbc8a7a4606b9084541f398&ul=1811&hd=18pb\";_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_338 = new DataSub();
	reqAction.addDataSub(subContainer_338);

		ISubRule sub_858 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_36", null, 0, false);
	subContainer_338.addSubInstruction(sub_858);
		ISubRule sub_859 = new SubRule("req_uri", 0, 68, false, (IDCCoreVar)dcVars[195], false, "Office Supplies, Fur_url", null, 0, false);
	subContainer_338.addSubInstruction(sub_859);
		ISubRule sub_860 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_36", null, 0, false);
	subContainer_338.addSubInstruction(sub_860);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7574FEEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_338(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7577709C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_339 = new DataSub();
	reqAction.addDataSub(subContainer_339);

		ISubRule sub_861 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_35", null, 0, false);
	subContainer_339.addSubInstruction(sub_861);
		ISubRule sub_862 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_35", null, 0, false);
	subContainer_339.addSubInstruction(sub_862);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF757770CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_339(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7579E0BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;mt.mbsh=%7B%221656508553112%22%3A%7B%22ODNA114130TEST%22%3A1%2C%22AC6860TEST%22%3A1%2C%22AC7364TEST%22%3A1%7D%7D;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_340 = new DataSub();
	reqAction.addDataSub(subContainer_340);

		ISubRule sub_863 = new SubRule("req_uri", 94, 4, true, (IDCCoreVar)dcVars[189], false, "noSession", null, 0, false);
	subContainer_340.addSubInstruction(sub_863);
		ISubRule sub_864 = new SubRule("req_uri", 79, 4, true, (IDCCoreVar)dcVars[177], false, "includeOos", null, 0, false);
	subContainer_340.addSubInstruction(sub_864);
		ISubRule sub_865 = new SubRule("req_uri", 63, 4, true, (IDCCoreVar)dcVars[176], false, "mapBySkuId", null, 0, false);
	subContainer_340.addSubInstruction(sub_865);
		ISubRule sub_866 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_34", null, 0, false);
	subContainer_340.addSubInstruction(sub_866);
		ISubRule sub_867 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_34", null, 0, false);
	subContainer_340.addSubInstruction(sub_867);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF7579E0EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_340(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF791727EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "850", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_28(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_341 = new DataSub();
	reqAction.addDataSub(subContainer_341);

		ISubRule sub_868 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_33", null, 0, false);
	subContainer_341.addSubInstruction(sub_868);
		ISubRule sub_869 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_33", null, 0, false);
	subContainer_341.addSubInstruction(sub_869);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7917281C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_28(HTTPPostData postData) {
				StringBuffer strBuf_27 = new StringBuffer();
strBuf_27.append("id=bdb3e653-6426-49a2-b457-a23d70ff4de7&tagId=11024&fullRefe");
strBuf_27.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2Fcatalog%2FskuRou");
strBuf_27.append("ter.do%3Bjsessionid%3D0000v_sngHaRfvnckZCGeof-vkF%3A17h4h7ad");
strBuf_27.append("o%3Fcmd_addSKU.button.INDEX%5B0%5D%3DAdd%252520to%252520Cart");
strBuf_27.append("%26cmATCSourcePage%3DProduct%2520Details%2520Page%26tracking");
strBuf_27.append("CategoryId%3D549829%26entryFormList%255B0%255D.cmMessage%3DP");
strBuf_27.append("roduct%2520Details%2520Page%26entryFormList%255B0%255D.sku%3");
strBuf_27.append("D305706%26entryFormList%255B0%255D.qty%3D1&payload=%7B%22sit");
strBuf_27.append("ePage%22%3A%7B%22enterpriseId%22%3A%221523082%22%2C%22cartSu");
strBuf_27.append("btotal%22%3A%220%22%2C%22trackingSource%22%3A%22gtm%22%2C%22");
strBuf_27.append("pageType%22%3A%22N%2FA%22%2C%22%22%3A%7B%22userId%22%3A%22%2");
strBuf_27.append("2%2C%22emailHash%22%3A%22%22%2C%22marketing_channel%22%3A%22");
strBuf_27.append("In%20Progress%22%7D%7D%7D&isDeviceAccessGranted=false&cjUser");
strBuf_27.append("=00000000-0000-0000-0000-000000000000&cookies=cjConsent%3DMH");
strBuf_27.append("xZfDB8Tnww");
String requestData_28 = strBuf_27.toString();
			
	HTTPPostDataChunk pdc_27 = new HTTPPostDataChunk("A1ECF7ADF7919980C9BBE33261613362", postData, requestData_28, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_27);

	}

	public HTTPAction request_341(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF79199DDC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3242", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_29(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_342 = new DataSub();
	reqAction.addDataSub(subContainer_342);

		ISubRule sub_870 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_32", null, 0, false);
	subContainer_342.addSubInstruction(sub_870);
		ISubRule sub_871 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_32", null, 0, false);
	subContainer_342.addSubInstruction(sub_871);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF79199E0C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_29(HTTPPostData postData) {
				StringBuffer strBuf_28 = new StringBuffer();
strBuf_28.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_28.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_28.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_28.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8559825,1920,1040,19");
strBuf_28.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_28.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.65091338");
strBuf_28.append("6325,828254279912,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,dm");
strBuf_28.append("_en,t_en-1,2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,");
strBuf_28.append("0,0,0,-1,310,0;0,2,0,0,-1,2006,0;0,2,0,0,-1,2007,0;-1,-1,1,0");
strBuf_28.append(",-1,317,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1");
strBuf_28.append(",706,0;-1,-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,22");
strBuf_28.append("0,0;-1,-1,1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0");
strBuf_28.append(";-1,-1,1,0,-1,214,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1");
strBuf_28.append(",-1,1,0,-1,632,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1");
strBuf_28.append(",1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-1,-1,1,");
strBuf_28.append("0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-1,1,0,-");
strBuf_28.append("1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1,0,-1,2");
strBuf_28.append("14,0;-1,-1,1,0,-1,526,0;-1,-1,1,0,-1,422,0;-1,-1,1,0,-1,621,");
strBuf_28.append("0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1,632,0;-");
strBuf_28.append("1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,629,0;-1,-");
strBuf_28.append("1,1,0,-1,622,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,");
strBuf_28.append("-1,0;0,0,0,0,-1,310,0;0,2,0,0,-1,2006,0;0,2,0,0,-1,2007,0;-1");
strBuf_28.append(",-1,1,0,-1,317,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1");
strBuf_28.append(",1,0,-1,706,0;-1,-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,");
strBuf_28.append("0,-1,220,0;-1,-1,1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-");
strBuf_28.append("1,118,0;-1,-1,1,0,-1,214,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,4");
strBuf_28.append("18,0;-1,-1,1,0,-1,632,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,");
strBuf_28.append("0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-");
strBuf_28.append("1,-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-");
strBuf_28.append("1,1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1");
strBuf_28.append(",0,-1,214,0;-1,-1,1,0,-1,526,0;-1,-1,1,0,-1,422,0;-1,-1,1,0,");
strBuf_28.append("-1,621,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1,");
strBuf_28.append("632,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,629");
strBuf_28.append(",0;-1,-1,1,0,-1,622,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-");
strBuf_28.append("117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,");
strBuf_28.append("-1,2,-94,-112,https://www.officedepot.com/catalog/skuRouter.");
strBuf_28.append("do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addS");
strBuf_28.append("KU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Produ");
strBuf_28.append("ct%20Details%20Page&trackingCategoryId=549829&entryFormList%");
strBuf_28.append("5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%");
strBuf_28.append("5D.sku=305706&entryFormList%5B0%5D.qty=1-1,2,-94,-115,1,32,3");
strBuf_28.append("2,0,0,0,0,2,0,1656508559824,-999999,17720,0,0,2953,0,0,5,0,0");
strBuf_28.append(",7475C20621AC05998EB5C2E913770E6D~-1~YAAQP8jZFyuwBq2BAQAAqKS");
strBuf_28.append("arwivCZGT2Kl0+QzdzwAoV3tjrPrhl1rQHsEqzmrYu3HkTqHW0Ea/VXYUhzL");
strBuf_28.append("evPzyk0KE2TfYeHx+oUounurV+VIAjlBO0HJlzebzNHqFdAKLSoYkxnFoodi");
strBuf_28.append("YB7zX/pry2O6PXFQRz9YTr5Z4Gyhuc7G0YG5E/P2cuFcYmbVzp3w32a5eYv9");
strBuf_28.append("G3d/4/RT9LY86Xdh59yUqizdkREiWzqU2LDDaRMOcKUjR2GWXmc498WWvOUN");
strBuf_28.append("ZdjlhktXtuMdY84ffVOpTbRP22eEpRrNHVbMAbA7VKnqp9HElr0xwcX1HnxU");
strBuf_28.append("HpE2SUq+bM/wERi7FpovECIIv/RuMwL7g7AIPb6pw0j7JqGKzD8WHcnARw9L");
strBuf_28.append("ROhVvRSmJWJZm3WtbMSh9~-1~-1~-1,37760,-1,-1,30261693,PiZtE,55");
strBuf_28.append("829,51,14,true-1,2,-94,-106,0,0-1,2,-94,-119,-1-1,2,-94,-122");
strBuf_28.append(",0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2");
strBuf_28.append(",-94,-127,8-1,2,-94,-70,-1-1,2,-94,-80,94-1,2,-94,-116,23111");
strBuf_28.append("5404-1,2,-94,-118,184318-1,2,-94,-129,-1,2,-94,-121,;12;-1;0");
strBuf_28.append("\"}");
String requestData_29 = strBuf_28.toString();
			
	HTTPPostDataChunk pdc_28 = new HTTPPostDataChunk("A1ECF7ADF791C0DAC9BBE33261613362", postData, requestData_29, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_28);

	}

	public HTTPAction request_342(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF791E801C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_343 = new DataSub();
	reqAction.addDataSub(subContainer_343);

		ISubRule sub_872 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_31", null, 0, false);
	subContainer_343.addSubInstruction(sub_872);
		ISubRule sub_873 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_31", null, 0, false);
	subContainer_343.addSubInstruction(sub_873);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF791E804C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_343(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF79235CFC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_344 = new DataSub();
	reqAction.addDataSub(subContainer_344);

		ISubRule sub_874 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_30", null, 0, false);
	subContainer_344.addSubInstruction(sub_874);
		ISubRule sub_875 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_30", null, 0, false);
	subContainer_344.addSubInstruction(sub_875);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF79199DDC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF79235D2C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_344(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF792AB49C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_345 = new DataSub();
	reqAction.addDataSub(subContainer_345);

		ISubRule sub_876 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_29", null, 0, false);
	subContainer_345.addSubInstruction(sub_876);
		ISubRule sub_877 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_29", null, 0, false);
	subContainer_345.addSubInstruction(sub_877);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF79199DDC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF792AB4CC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(404);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("https//");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_345(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF792D255C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_ga=GA1.2.565524517.1656508508;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508558.12;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_346 = new DataSub();
	reqAction.addDataSub(subContainer_346);

		ISubRule sub_878 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_28", null, 0, false);
	subContainer_346.addSubInstruction(sub_878);
		ISubRule sub_879 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_28", null, 0, false);
	subContainer_346.addSubInstruction(sub_879);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF79199DDC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF792D258C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_346(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7962D60C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3458", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;BVBRANDID=cd1c6fc5-b7d9-401c-bbd7-2c917fe142d0;BVBRANDSID=b3b672a1-1e1d-4f0c-b5ab-88c0b7dbf938;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508560.10;_ga=GA1.1.565524517.1656508508", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_30(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_347 = new DataSub();
	reqAction.addDataSub(subContainer_347);

		ISubRule sub_880 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_27", null, 0, false);
	subContainer_347.addSubInstruction(sub_880);
		ISubRule sub_881 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_27", null, 0, false);
	subContainer_347.addSubInstruction(sub_881);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF79199DDC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7962D63C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_30(HTTPPostData postData) {
				StringBuffer strBuf_29 = new StringBuffer();
strBuf_29.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_29.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_29.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_29.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8559825,1920,1040,19");
strBuf_29.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_29.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.60098348");
strBuf_29.append("2300,828254279912,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_29.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_29.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_29.append(",2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_29.append("10,0;0,2,0,0,-1,2006,0;0,2,0,0,-1,2007,0;-1,-1,1,0,-1,317,0;");
strBuf_29.append("-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-1,");
strBuf_29.append("-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-1,");
strBuf_29.append("1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1,0");
strBuf_29.append(",-1,214,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1");
strBuf_29.append(",632,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,62");
strBuf_29.append("9,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-1,-1,1,0,-1,317,0");
strBuf_29.append(";-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-1,1,0,-1,231,0;-1");
strBuf_29.append(",-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1,0,-1,214,0;-1,-1");
strBuf_29.append(",1,0,-1,526,0;-1,-1,1,0,-1,422,0;-1,-1,1,0,-1,621,0;-1,-1,1,");
strBuf_29.append("0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1,632,0;-1,-1,1,0,-");
strBuf_29.append("1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,6");
strBuf_29.append("22,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0");
strBuf_29.append(",0,-1,310,0;0,2,0,0,-1,2006,0;0,2,0,0,-1,2007,0;-1,-1,1,0,-1");
strBuf_29.append(",317,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,70");
strBuf_29.append("6,0;-1,-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0");
strBuf_29.append(";-1,-1,1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1");
strBuf_29.append(",-1,1,0,-1,214,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1");
strBuf_29.append(",1,0,-1,632,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,");
strBuf_29.append("0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-1,-1,1,0,-");
strBuf_29.append("1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-1,1,0,-1,2");
strBuf_29.append("31,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1,0,-1,214,");
strBuf_29.append("0;-1,-1,1,0,-1,526,0;-1,-1,1,0,-1,422,0;-1,-1,1,0,-1,621,0;-");
strBuf_29.append("1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1,632,0;-1,-");
strBuf_29.append("1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,629,0;-1,-1,1");
strBuf_29.append(",0,-1,622,0;-1,2,-94,-108,-1,2,-94,-110,-1,2,-94,-117,-1,2,-");
strBuf_29.append("94,-111,-1,2,-94,-109,-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,-");
strBuf_29.append("112,https://www.officedepot.com/catalog/skuRouter.do;jsessio");
strBuf_29.append("nid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.");
strBuf_29.append("INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Detai");
strBuf_29.append("ls%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmM");
strBuf_29.append("essage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305");
strBuf_29.append("706&entryFormList%5B0%5D.qty=1-1,2,-94,-115,1,32,32,0,0,0,0,");
strBuf_29.append("968,0,1656508559824,40,17720,0,0,2953,0,0,971,0,0,7475C20621");
strBuf_29.append("AC05998EB5C2E913770E6D~-1~YAAQP8jZF9SwBq2BAQAArrKarwh24Wb18L");
strBuf_29.append("susN3v06zft1Y5EuAwOEAZtdyrrfLSuef4RGv1ALOcvaCxzt45ULDrHVk7ky");
strBuf_29.append("sPbz8YqP7Sg6AdcTpe6ZqMIf3byLWTCHSXL+iBq39hEpDvsghTY4XV/kEK7f");
strBuf_29.append("sm5mvIZTj4ryFU3PRPTm2tCHGXvBerezp1p1zBGlxtPPTSlCf7i9Qbw1ldIp");
strBuf_29.append("V9PQRETOtAhwhvD4/WjGDBh0Ywi+0q33NiLF7Wsuyef0Uba/bWAwJFn5OC8P");
strBuf_29.append("7NyIzA0vNmMCuc0s4cI9cqP3q9QnU2V06/cUwva1c6f8O+tatVnqKsHhESN4");
strBuf_29.append("GsroANkWWp+d8cWfm/ZEEjnJortGMOF4YjIj/XhrxTC0NqJcLqkwE0pTHIiB");
strBuf_29.append("vO+X73qyAb~-1~-1~-1,37446,647,-769701020,30261693,PiZtE,1040");
strBuf_29.append("75,35,14,true-1,2,-94,-106,9,1-1,2,-94,-119,-1-1,2,-94,-122,");
strBuf_29.append("0,0,1,0,1,0,0-1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,");
strBuf_29.append("-94,-127,21321144241322243122-1,2,-94,-70,273720021;-8513458");
strBuf_29.append("92;dis;,7;true;true;true;-60;true;24;24;true;false;-1-1,2,-9");
strBuf_29.append("4,-80,5372-1,2,-94,-116,231115404-1,2,-94,-118,193334-1,2,-9");
strBuf_29.append("4,-129,,,0,,,,0-1,2,-94,-121,;7;16;0\"}");
String requestData_30 = strBuf_29.toString();
			
	HTTPPostDataChunk pdc_29 = new HTTPPostDataChunk("A1ECF7ADF7962DC0C9BBE33261613362", postData, requestData_30, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_29);

	}

	public HTTPAction request_347(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF79654D7C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(15);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Service-Worker", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "serviceworker", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;kampyleSessionPageCounter=3;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;_clsk=e2zmnj|1656508555785|5|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508560.10;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508", "UTF-8", 1));			
		headers.add(new RequestHeaderData("If-None-Match", "\"0bd9e9e6c2e9ce340e6e1c7754b228ce5bb931351fb503a6d95b245f121c9540\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("If-Modified-Since", "Sat, 23 Oct 2021 01:47:33 GMT", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_348 = new DataSub();
	reqAction.addDataSub(subContainer_348);

		ISubRule sub_882 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_26", null, 0, false);
	subContainer_348.addSubInstruction(sub_882);
		ISubRule sub_883 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_26", null, 0, false);
	subContainer_348.addSubInstruction(sub_883);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF7962D60C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF72A734EC9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7967B80C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(304);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
private HTTPPage page_12(final IContainer parent) {
			HTTPThink think = new HTTPThink(5103, 1, parent, parent, "A1ECF7ADF79717CEC9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "Shopping Cart | Office Supplies: Office Products and Office Furniture: Office Depot", "A1ECF7ADF79717CEC9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(2, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_348(this, true, "A1ECF7ADF79717C0C9BBE33261613362", true, true,
						"Config_4", "/cart/backorderAction.do",	"/cart/backorderAction.do", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_349(this, false, "A1ECF7ADF797B400C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_348(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF79717D2C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "329", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Upgrade-Insecure-Requests", "1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "navigate", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-User", "?1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "document", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;_ga=GA1.2.565524517.1656508508;kampyleSessionPageCounter=4;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508562.8;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt\"", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_31(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_17 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_17);

	harvestContainer_17.addHarvestInstruction ("resp_hdr_Referer-RPT-Generated (read-only)_1", dcVars[199], ".*", 1, 0, 0, 0, false, "Referer-RPT-Generated (read-only)_10", null, 0, false);
	harvestContainer_17.addHarvestInstruction ("resp_content", dcVars[200], " href=\"(.*?)\"", 25, 25, 0, 0, false, "href_22", null, 0, false);
	IDataSub subContainer_350 = new DataSub();
	reqAction.addDataSub(subContainer_350);

		ISubRule sub_887 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_25", null, 0, false);
	subContainer_350.addSubInstruction(sub_887);
		ISubRule sub_888 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_25", null, 0, false);
	subContainer_350.addSubInstruction(sub_888);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF79717D5C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html; charset=UTF-8");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_31(HTTPPostData postData) {
				StringBuffer strBuf_30 = new StringBuffer();
strBuf_30.append("validationForm.capacity=1&validationForm.uniqueId%5B0%5D=1&v");
strBuf_30.append("alidationForm.sku%5B0%5D=305706&validationForm.quantity%5B0%");
strBuf_30.append("5D=0&validationForm.selection%5B0%5D=confirm.quantity%5B1%5D");
strBuf_30.append("&entryFormList%5B0%5D.sku=305466&entryFormList%5B0%5D.qty=&e");
strBuf_30.append("ntryFormList%5B1%5D.sku=963447&entryFormList%5B1%5D.qty=&ire");
strBuf_30.append("f2=0010&updateAll=Add+to+Cart");
String requestData_31 = strBuf_30.toString();
			
	HTTPPostDataChunk pdc_30 = new HTTPPostDataChunk("A1ECF7ADF7973F30C9BBE33261613362", postData, requestData_31, "UTF-8", 16, 329);
	postData.addDataChunk(pdc_30);

	IDataSub subContainer_349 = new DataSub();
	pdc_30.addDataSub(subContainer_349);

		ISubRule sub_884 = new SubRule("req_content", 318, 11, true, (IDCCoreVar)dcVars[197], false, "updateAll", null, 0, false);
	subContainer_349.addSubInstruction(sub_884);
		ISubRule sub_885 = new SubRule("req_content", 303, 4, true, (IDCCoreVar)dcVars[196], false, "iref2", null, 0, false);
	subContainer_349.addSubInstruction(sub_885);
		ISubRule sub_886 = new SubRule("req_content", 24, 1, true, (IDCCoreVar)dcVars[192], false, "validationForm.capacity", null, 0, false);
	subContainer_349.addSubInstruction(sub_886);
	



	}

	public HTTPAction request_349(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF797B40EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "3908", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/catalog/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSourcePage=Product%20Details%20Page&trackingCategoryId=549829&entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entryFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=5&tt=tvr&obo=1&rl=1\";mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;kampyleSessionPageCounter=4;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508562.8;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_32(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_351 = new DataSub();
	reqAction.addDataSub(subContainer_351);

		ISubRule sub_889 = new SubRule("req_hdr_Referer_1", 0, 326, false, (IDCCoreVar)dcVars[190], false, "Referer_24", null, 0, false);
	subContainer_351.addSubInstruction(sub_889);
		ISubRule sub_890 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_24", null, 0, false);
	subContainer_351.addSubInstruction(sub_890);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF79717D2C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF79717D2C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF797B411C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_32(HTTPPostData postData) {
				StringBuffer strBuf_31 = new StringBuffer();
strBuf_31.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_31.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_31.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_31.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8559825,1920,1040,19");
strBuf_31.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_31.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.44133991");
strBuf_31.append("4220,828254279912,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;1");
strBuf_31.append("0.0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome");
strBuf_31.append("/102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1");
strBuf_31.append(",2,-94,-105,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0,0,-1,3");
strBuf_31.append("10,0;0,2,0,0,-1,2006,0;0,2,0,0,-1,2007,0;-1,-1,1,0,-1,317,0;");
strBuf_31.append("-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-1,");
strBuf_31.append("-1,1,0,-1,317,0;-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-1,");
strBuf_31.append("1,0,-1,231,0;-1,-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1,0");
strBuf_31.append(",-1,214,0;-1,-1,1,0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1");
strBuf_31.append(",632,0;-1,-1,1,0,-1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,62");
strBuf_31.append("9,0;-1,-1,1,0,-1,622,0;-1,-1,1,0,-1,706,0;-1,-1,1,0,-1,317,0");
strBuf_31.append(";-1,-1,1,0,-1,219,0;-1,-1,1,0,-1,220,0;-1,-1,1,0,-1,231,0;-1");
strBuf_31.append(",-1,1,0,-1,216,0;-1,-1,1,0,-1,118,0;-1,-1,1,0,-1,214,0;-1,-1");
strBuf_31.append(",1,0,-1,526,0;-1,-1,1,0,-1,422,0;-1,-1,1,0,-1,621,0;-1,-1,1,");
strBuf_31.append("0,-1,427,0;-1,-1,1,0,-1,418,0;-1,-1,1,0,-1,632,0;-1,-1,1,0,-");
strBuf_31.append("1,434,0;-1,-1,1,0,-1,360,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,6");
strBuf_31.append("22,0;-1,2,-94,-102,0,0,0,0,-1,310,0;0,-1,0,0,5101,-1,0;0,0,0");
strBuf_31.append(",0,-1,310,0;0,2,0,0,-1,2006,0;0,2,0,0,-1,2007,0;-1,-1,1,0,-1");
strBuf_31.append(",317,0;-1,-1,1,0,-1,629,0;-1,-1,1,0,-1,622,0;-1,2,-94,-108,-");
strBuf_31.append("1,2,-94,-110,0,1,4691,1090,345;1,1,4699,1087,347;2,1,4716,10");
strBuf_31.append("79,352;3,1,4733,1067,359;4,1,4749,1048,372;5,1,4766,1027,389");
strBuf_31.append(";6,1,4783,1003,410;7,1,4799,982,425;8,1,4816,961,442;9,1,483");
strBuf_31.append("3,934,467;10,1,4849,914,488;11,1,4866,898,504;12,1,4887,887,");
strBuf_31.append("517;13,1,4899,881,524;14,1,4921,876,532;15,1,4933,871,538;16");
strBuf_31.append(",1,4953,865,545;17,1,4970,858,554;18,1,5007,843,575;19,1,501");
strBuf_31.append("2,841,579;20,1,5033,836,589;21,1,5049,832,596;22,1,5066,830,");
strBuf_31.append("599;23,1,5087,829,603;24,1,5099,828,605;25,1,5116,828,609;26");
strBuf_31.append(",1,5135,827,612;27,1,5149,826,616;28,1,5166,825,622;29,1,518");
strBuf_31.append("5,824,626;30,1,5199,824,632;31,1,5218,824,636;32,1,5232,824,");
strBuf_31.append("640;33,1,5249,824,643;34,1,5266,824,650;35,1,5282,824,653;36");
strBuf_31.append(",1,5299,824,655;37,1,5324,824,656;38,1,5333,824,657;39,3,758");
strBuf_31.append("5,824,657,924;-1,2,-94,-117,-1,2,-94,-111,0,1011,-1,-1,-1;-1");
strBuf_31.append(",2,-94,-109,0,1011,-1,-1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,");
strBuf_31.append("-1,2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/cata");
strBuf_31.append("log/skuRouter.do;jsessionid=0000v_sngHaRfvnckZCGeof-vkF:17h4");
strBuf_31.append("h7ado?cmd_addSKU.button.INDEX[0]=Add%2520to%2520Cart&cmATCSo");
strBuf_31.append("urcePage=Product%20Details%20Page&trackingCategoryId=549829&");
strBuf_31.append("entryFormList%5B0%5D.cmMessage=Product%20Details%20Page&entr");
strBuf_31.append("yFormList%5B0%5D.sku=305706&entryFormList%5B0%5D.qty=1-1,2,-");
strBuf_31.append("94,-115,1,261165,32,1011,1011,0,263155,7585,0,1656508559824,");
strBuf_31.append("40,17720,0,40,2953,1,0,7587,204976,0,7475C20621AC05998EB5C2E");
strBuf_31.append("913770E6D~-1~YAAQP8jZF/WwBq2BAQAAz7aarwiqRj12NhHVU/19qXgPgAt");
strBuf_31.append("fXRgUcPAAvWNHXOW9RfCAirWh7mLbIO0axp9dk1/DcjGz3e2/2qXhJuxe80e");
strBuf_31.append("NaUkhi1/BO2lELpnmKjnf404wbrF5ung9yX921MaNqFqqzOZYXWNdn0Ug+PI");
strBuf_31.append("/ufpUwkKMcIeCIMc8LJ/whXbVEvYXBzgvwY5aXLQsHcizGSyBTR42MAvrLqd");
strBuf_31.append("iicTfyRb2epk29hlzgu7m+Myw6UeKb9IOFFHpnoMQsUWk9WqLkeE/E45kjKb");
strBuf_31.append("vXc79PDUr0l00HRec91CkLcyqbqWlbqi8cilF5ohslT2+ILyfZspkwTNAfIO");
strBuf_31.append("RwlNX/SF/gUqvGg33EvvkHLVLSl0HJgP6nItX9YURx0KdKxS+P3ihWpgz~-1");
strBuf_31.append("~-1~-1,37714,647,-769701020,30261693,PiZtE,57827,45,14,true-");
strBuf_31.append("1,2,-94,-106,1,2-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-");
strBuf_31.append("1,2,-94,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,21321");
strBuf_31.append("144241322243122-1,2,-94,-70,273720021;-851345892;dis;,7;true");
strBuf_31.append(";true;true;-60;true;24;24;true;false;-1-1,2,-94,-80,5372-1,2");
strBuf_31.append(",-94,-116,231115404-1,2,-94,-118,203928-1,2,-94,-129,33c6f54");
strBuf_31.append("e72ed2196a148f981eb3a5bd51bb6639069e41454a91411e89e70f64e,1,");
strBuf_31.append("769baa1e58c97f68e09ccec638eeebbd00639644b5049f8a3ec95a8672a5");
strBuf_31.append("b0cb,Google Inc. (Intel),ANGLE (Intel, Intel(R) UHD Graphics");
strBuf_31.append(" 630 Direct3D11 vs_5_0 ps_5_0, D3D11),95f5b71fe531f867faa814");
strBuf_31.append("bdd4050dd8057206d53ecec1163523560525884870,33-1,2,-94,-121,;");
strBuf_31.append("4;16;0\"}");
String requestData_32 = strBuf_31.toString();
			
	HTTPPostDataChunk pdc_31 = new HTTPPostDataChunk("A1ECF7ADF797DB10C9BBE33261613362", postData, requestData_32, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_31);

	}
private HTTPPage page_13(final IContainer parent) {
			HTTPThink think = new HTTPThink(2, 1, parent, parent, "A1ECF7ADF7E5FB10C9BBE33261613362");
	parent.add(think);
	
		HTTPPage page = new HTTPPage(parent, "HQFje_jFRalo {4}", "A1ECF7ADF7E5FB10C9BBE33261613362") {
			
			public void execute() {   
				
	
	
	
	
			             
			{ // Parallal Block Start
				HTTPParallel httpParallel = new HTTPParallel(9, this);
				this.add(httpParallel);

				// httpParallel.addRequest(int serial, HTTPAction action, int actionDelay, String firstCharSemID) 
				httpParallel.addRequest(0, request_350(this, true, "A1ECF7ADF797B400C9BBE33261613362", false, false,
						"Config_4", "/akam-sw-policy.json",	"/akam-sw-policy.json", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(0, request_351(this, false, "A1ECF7ADF797B400C9BBE33261613362", true, false,
						"Config_4", "/styles/cart_react.min.1b55cc581bebefa9aba6.css",	"/styles/cart_react.min.1b55cc581bebefa9aba6.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_352(this, false, "A1ECF7ADF7E6705AC9BBE33261613362", false, false,
						"Config_5", "/checkout-header/static/css/main.css",	"/checkout-header/static/css/main.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(2, request_353(this, false, "A1ECF7ADF7F36890C9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_354(this, false, "A1ECF7ADF7E6705AC9BBE33261613362", false, false,
						"Config_5", "/od-cart/static/css/main.css",	"/od-cart/static/css/main.css", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_355(this, false, "A1ECF7ADF7F47A03C9BBE33261613362", false, false,
						"Config_4", "/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=7&cachebuster=1195957489",	"/tag_path/profile/visit/js/1_0?dtm_cid=2206&dtm_cmagic=fea9c1&dtm_fid=101&dtm_promo_id=7&cachebuster=1195957489", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(1, request_356(this, false, "A1ECF7ADF7E6705AC9BBE33261613362", true, false,
						"Config_5", "/checkout-header/static/js/main.js",	"/checkout-header/static/js/main.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(4, request_357(this, false, "A1ECF7ADF7F600A3C9BBE33261613362", true, false,
						"Config_5", "/od-cart/static/js/main.js",	"/od-cart/static/js/main.js", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(5, request_358(this, false, "A1ECF7ADF7917270C9BBE33261613362", true, false,
						"Config_4", "/proxy/mczbf/11024/pageInfo",	"/proxy/mczbf/11024/pageInfo", true, false), 110, 69, "A1ECF7ADF7F47A11C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_359(this, false, "A1ECF7ADF7F47A03C9BBE33261613362", false, true,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 97, 69, "A1ECF7ADF83A5CA0C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_360(this, false, "A1ECF7ADF7F47A03C9BBE33261613362", false, false,
						"Config_4", "/async/cart/getCartInfo.do",	"/async/cart/getCartInfo.do", true, false), 495, 69, "A1ECF7ADF83AAAC1C9BBE33261613362", 3);
				httpParallel.addRequest(2, request_361(this, false, "A1ECF7ADF7F36890C9BBE33261613362", true, false,
						"Config_4", "/async/cart/getCartOrderSummary.do",	"/async/cart/getCartOrderSummary.do", true, false), 498, 69, "A1ECF7ADF83AAAC1C9BBE33261613362", 3);
				httpParallel.addRequest(6, request_362(this, false, "A1ECF7ADF83AF99FC9BBE33261613362", false, false,
						"Config_4", "/async/cart/saveForLater/getSkus.do",	"/async/cart/saveForLater/getSkus.do", true, false), 7, 69, "A1ECF7ADF7E64930C9BBE33261613362", 3);
				httpParallel.addRequest(6, request_363(this, false, "A1ECF7ADF83AF99FC9BBE33261613362", false, false,
						"Config_4", "/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo",	"/7X4EJMz7xK38/0gNY2M/VA1ygN/uOuapwGt/NF0eYBMRMgs/HQFje/jFRalo", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(6, request_364(this, false, "A1ECF7ADF83AF99FC9BBE33261613362", false, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do?items=332063&mapBySkuId=true",	"/mobile/getAjaxPriceListFromService.do?items=332063&mapBySkuId=true", true, false), 84, 69, "A1ECF7ADF83B4700C9BBE33261613362", 3);
				httpParallel.addRequest(3, request_365(this, false, "A1ECF7ADF7F47A03C9BBE33261613362", false, false,
						"Config_4", "/async/cart/getCartSavingsMessages.do",	"/async/cart/getCartSavingsMessages.do", true, false), 96, 69, "A1ECF7ADF83B4700C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_366(this, false, "A1ECF7ADF83BE340C9BBE33261613362", false, false,
						"Config_6", "/w_300,f_auto/assets/ODCard.jpg",	"/w_300,f_auto/assets/ODCard.jpg", true, false), 172, 69, "A1ECF7ADF83B1FF6C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_367(this, false, "A1ECF7ADF83BE340C9BBE33261613362", false, false,
						"Config_6", "/images/f_auto,q_auto,e_sharpen,h_450/products/9924357/9924357_o01_rgb_110421/9924357_o01_rgb_110421",	"/images/f_auto,q_auto,e_sharpen,h_450/products/9924357/9924357_o01_rgb_110421/9924357_o01_rgb_110421", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(3, request_368(this, false, "A1ECF7ADF7F47A03C9BBE33261613362", true, false,
						"Config_4", "/async/cart/getCartCoupons.do",	"/async/cart/getCartCoupons.do", true, false), 0, 69, "null", 3);
				httpParallel.addRequest(7, request_369(this, false, "A1ECF7ADF83BE340C9BBE33261613362", false, false,
						"Config_6", "/images/t_medium,f_auto/products/332063/Boise-X-9-Multi-Use-Print",	"/images/t_medium,f_auto/products/332063/Boise-X-9-Multi-Use-Print", true, false), 410, 69, "A1ECF7ADF83C7F80C9BBE33261613362", 3);
				httpParallel.addRequest(6, request_370(this, false, "A1ECF7ADF83AF99FC9BBE33261613362", true, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do?items=305706&mapBySkuId=true&noSession=true",	"/mobile/getAjaxPriceListFromService.do?items=305706&mapBySkuId=true&noSession=true", true, false), 93, 69, "A1ECF7ADF83CA691C9BBE33261613362", 3);
				httpParallel.addRequest(8, request_371(this, false, "A1ECF7ADF83CF523C9BBE33261613362", true, false,
						"Config_4", "/mobile/getAjaxPriceListFromService.do?items=801187,348037&mapBySkuId=true&noSession=true",	"/mobile/getAjaxPriceListFromService.do?items=801187,348037&mapBySkuId=true&noSession=true", true, false), 84, 69, "A1ECF7ADF83B1FF6C9BBE33261613362", 3);
				httpParallel.addRequest(7, request_372(this, false, "A1ECF7ADF83BE340C9BBE33261613362", true, false,
						"Config_6", "/images/t_medium,f_auto/products/801187/SanDisk-Cruzer-Glide-USB-Flash-Drive",	"/images/t_medium,f_auto/products/801187/SanDisk-Cruzer-Glide-USB-Flash-Drive", true, false), 31, 69, "A1ECF7ADF83CF531C9BBE33261613362", 3);
			} // Parallal Block End 

			
				super.execute();
			}
		};
		
		
		page.setRemoveDelaysFromPageResponseTimes(false);
		page.setArmEnabled(false);  
		return page;
	}

	public HTTPAction request_350(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7E5FB14C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(12);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("If-Modified-Since", "Thu, 01 Jan 1970 00:00:00 GMT", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/akam-sw.js", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;_ga=GA1.2.565524517.1656508508;kampyleSessionPageCounter=4;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508562.8;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_352 = new DataSub();
	reqAction.addDataSub(subContainer_352);

		ISubRule sub_891 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_23", null, 0, false);
	subContainer_352.addSubInstruction(sub_891);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7E5FB17C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/html");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_351(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7E64930C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_353 = new DataSub();
	reqAction.addDataSub(subContainer_353);

		ISubRule sub_892 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_22", null, 0, false);
	subContainer_353.addSubInstruction(sub_892);
		ISubRule sub_893 = new SubRule("req_uri", 0, 47, false, (IDCCoreVar)dcVars[200], false, "HQFje_jFRalo {4}_url_2", null, 0, false);
	subContainer_353.addSubInstruction(sub_893);
		ISubRule sub_894 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_22", null, 0, false);
	subContainer_353.addSubInstruction(sub_894);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7E64933C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_352(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7E67068C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_354 = new DataSub();
	reqAction.addDataSub(subContainer_354);

		ISubRule sub_895 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_21", null, 0, false);
	subContainer_354.addSubInstruction(sub_895);
		ISubRule sub_896 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_21", null, 0, false);
	subContainer_354.addSubInstruction(sub_896);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7E6706BC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_353(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7F3689EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_355 = new DataSub();
	reqAction.addDataSub(subContainer_355);

		ISubRule sub_897 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_20", null, 0, false);
	subContainer_355.addSubInstruction(sub_897);
		ISubRule sub_898 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_20", null, 0, false);
	subContainer_355.addSubInstruction(sub_898);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7F368A1C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_354(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7F3B6F7C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "text/css,*/*;q=0.1", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "style", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_356 = new DataSub();
	reqAction.addDataSub(subContainer_356);

		ISubRule sub_899 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_19", null, 0, false);
	subContainer_356.addSubInstruction(sub_899);
		ISubRule sub_900 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_19", null, 0, false);
	subContainer_356.addSubInstruction(sub_900);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7F3B6FAC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("text/css");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_355(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7F47A11C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_357 = new DataSub();
	reqAction.addDataSub(subContainer_357);

		ISubRule sub_901 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_18", null, 0, false);
	subContainer_357.addSubInstruction(sub_901);
		ISubRule sub_902 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_18", null, 0, false);
	subContainer_357.addSubInstruction(sub_902);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7F47A14C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_356(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7F4A15BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_358 = new DataSub();
	reqAction.addDataSub(subContainer_358);

		ISubRule sub_903 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_17", null, 0, false);
	subContainer_358.addSubInstruction(sub_903);
		ISubRule sub_904 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_17", null, 0, false);
	subContainer_358.addSubInstruction(sub_904);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7F4A15EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_357(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF7F600B1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "ma.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "script", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;_ga=GA1.2.565524517.1656508508;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508567.3;RT=\"z=1&dm=officedepot.com&si=xkysaa93j9n&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1&ld=1fpr&r=92dc6d589b9ccb2b0e4b1b2ddc64760e&ul=1fpt&hd=1g5x\"", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataHarvester harvestContainer_18 = new DataHarvester();
	reqAction.addDataHarvester (harvestContainer_18);

	harvestContainer_18.addHarvestInstruction ("resp_content", dcVars[201], "&mapBySkuId=(.*?)\"", 1, 1, 0, 0, false, "mapBySkuId_10", null, 0, false);
	harvestContainer_18.addHarvestInstruction ("resp_content", dcVars[202], "&noSession=(.*?)\"", 1, 1, 0, 0, false, "noSession_7", null, 0, false);
	harvestContainer_18.addHarvestInstruction ("resp_content", dcVars[203], "/media\\.officedepot\\.com(.*?)\"", 2, 1, 0, 0, false, "media.officedepot.com_116", null, 0, false);
	IDataSub subContainer_359 = new DataSub();
	reqAction.addDataSub(subContainer_359);

		ISubRule sub_905 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_16", null, 0, false);
	subContainer_359.addSubInstruction(sub_905);
		ISubRule sub_906 = new SubRule("req_hdr_Host_1", 0, 18, false, (IDCCoreVar)vars[2], false, "Host_16", null, 0, false);
	subContainer_359.addSubInstruction(sub_906);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF7F600B4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/x-javascript");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(true);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_358(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83A5CA0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "522", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cache-Control", "max-age=0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-808b0c2e7258fc63----1656508569112", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-52b1af46671c5049df096599e9d8f0a0-808b0c2e7258fc63-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiODA4YjBjMmU3MjU4ZmM2MyIsInRyIjoiNTJiMWFmNDY2NzFjNTA0OWRmMDk2NTk5ZTlkOGYwYTAiLCJ0aSI6MTY1NjUwODU2OTExMiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("content-type", "application/x-www-form-urlencoded", "UTF-8", 1));			
		headers.add(new RequestHeaderData("accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_33(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_360 = new DataSub();
	reqAction.addDataSub(subContainer_360);

		ISubRule sub_907 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_15", null, 0, false);
	subContainer_360.addSubInstruction(sub_907);
		ISubRule sub_908 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_15", null, 0, false);
	subContainer_360.addSubInstruction(sub_908);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83A5CA3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/png");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_33(HTTPPostData postData) {
				StringBuffer strBuf_32 = new StringBuffer();
strBuf_32.append("id=ba283a30-7191-48ac-bb57-be81a6413b8f&tagId=11024&fullRefe");
strBuf_32.append("rrerUrl=https%3A%2F%2Fwww.officedepot.com%2Fcart%2Fbackorder");
strBuf_32.append("Action.do&payload=%7B%22sitePage%22%3A%7B%22enterpriseId%22%");
strBuf_32.append("3A%221523082%22%2C%22cartSubtotal%22%3A%2216.490%22%2C%22tra");
strBuf_32.append("ckingSource%22%3A%22gtm%22%2C%22pageType%22%3A%22N%2FA%22%2C");
strBuf_32.append("%22%22%3A%7B%22userId%22%3A%22%22%2C%22emailHash%22%3A%22%22");
strBuf_32.append("%2C%22marketing_channel%22%3A%22In%20Progress%22%7D%7D%7D&is");
strBuf_32.append("DeviceAccessGranted=false&cjUser=00000000-0000-0000-0000-000");
strBuf_32.append("000000000&cookies=cjConsent%3DMHxZfDB8Tnww");
String requestData_33 = strBuf_32.toString();
			
	HTTPPostDataChunk pdc_32 = new HTTPPostDataChunk("A1ECF7ADF83A83B0C9BBE33261613362", postData, requestData_33, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_32);

	}

	public HTTPAction request_359(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83AAAC1C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1420", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-765ff3acae7c6301----1656508569510", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-4cd940a74b662741f7cc7a8b8e5ba520-765ff3acae7c6301-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNzY1ZmYzYWNhZTdjNjMwMSIsInRyIjoiNGNkOTQwYTc0YjY2Mjc0MWY3Y2M3YThiOGU1YmE1MjAiLCJ0aSI6MTY1NjUwODU2OTUxMCwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_dc_gtm_UA-102713874-13=1;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_34(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_361 = new DataSub();
	reqAction.addDataSub(subContainer_361);

		ISubRule sub_909 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_14", null, 0, false);
	subContainer_361.addSubInstruction(sub_909);
		ISubRule sub_910 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_14", null, 0, false);
	subContainer_361.addSubInstruction(sub_910);
	


		
				
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83AAAC4C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_34(HTTPPostData postData) {
				StringBuffer strBuf_33 = new StringBuffer();
strBuf_33.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_33.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_33.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_33.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8569495,1920,1040,19");
strBuf_33.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_33.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.61420652");
strBuf_33.append("8307,828254284747,0,loc:-1,2,-94,-131,-1,2,-94,-101,do_en,dm");
strBuf_33.append("_en,t_en-1,2,-94,-105,-1,2,-94,-102,-1,2,-94,-108,-1,2,-94,-");
strBuf_33.append("110,-1,2,-94,-117,-1,2,-94,-111,-1,2,-94,-109,-1,2,-94,-114,");
strBuf_33.append("-1,2,-94,-103,-1,2,-94,-112,https://www.officedepot.com/cart");
strBuf_33.append("/backorderAction.do-1,2,-94,-115,1,32,32,0,0,0,0,2,0,1656508");
strBuf_33.append("569494,-999999,17720,0,0,2953,0,0,4,0,0,7475C20621AC05998EB5");
strBuf_33.append("C2E913770E6D~-1~YAAQP8jZF5iyBq2BAQAAuNKarwh7CFpN0rz1K10+fzbo");
strBuf_33.append("iBFIF2RILqByHW8lHmL8sjS4Nrhsx+PhtA6Krnn3FFIgeIfWyvINgRCMNgkw");
strBuf_33.append("nl1v9stZFrmOqkLBg2r5bCUmIbH+H5gK2CJThrJ8zW25CRD0U9rVt4Zi1/0E");
strBuf_33.append("QbFb8VRBReUtAaPX6ZUk20sMpMLBvhNyAQmq4cua7Jo+JGWy4aHiFrRuFBez");
strBuf_33.append("Y/nHz3S9taVyGMmyEYGXlosdlOBk8uiKsfAPAjFQx68DOwRFrjhkEZkHtJAp");
strBuf_33.append("zQ0aNWm+9e/bF9khtQcSj1TnShBHfZmk84vDfAQBtk9swuZb9zFoUQoL3hpC");
strBuf_33.append("kEANnpLeAG6TMHRZPDdE2uRLdDt4DXm1BNbzuM1uxsG+jT5j+mJNVN4GIX0x");
strBuf_33.append("~-1~-1~-1,37254,-1,-1,30261693,PiZtE,47389,94,14,true-1,2,-9");
strBuf_33.append("4,-106,0,0-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-9");
strBuf_33.append("4,-123,-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,8-1,2,-94,-");
strBuf_33.append("70,-1-1,2,-94,-80,94-1,2,-94,-116,128542674-1,2,-94,-118,866");
strBuf_33.append("84-1,2,-94,-129,-1,2,-94,-121,;12;-1;0\"}");
String requestData_34 = strBuf_33.toString();
			
	HTTPPostDataChunk pdc_33 = new HTTPPostDataChunk("A1ECF7ADF83AD1D0C9BBE33261613362", postData, requestData_34, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_33);

	}

	public HTTPAction request_360(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83AD22FC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-ffe348673d8b5634----1656508570200", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-6cc70015ef57a9ba04ccc06a159170e0-ffe348673d8b5634-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZmZlMzQ4NjczZDhiNTYzNCIsInRyIjoiNmNjNzAwMTVlZjU3YTliYTA0Y2NjMDZhMTU5MTcwZTAiLCJ0aSI6MTY1NjUwODU3MDIwMCwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_362 = new DataSub();
	reqAction.addDataSub(subContainer_362);

		ISubRule sub_911 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_13", null, 0, false);
	subContainer_362.addSubInstruction(sub_911);
		ISubRule sub_912 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_13", null, 0, false);
	subContainer_362.addSubInstruction(sub_912);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83AD232C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_361(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83AF8E0C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-e534652aa2bdca06----1656508570202", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-efde4fbc55cddf25ee160a918adb24d0-e534652aa2bdca06-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZTUzNDY1MmFhMmJkY2EwNiIsInRyIjoiZWZkZTRmYmM1NWNkZGYyNWVlMTYwYTkxOGFkYjI0ZDAiLCJ0aSI6MTY1NjUwODU3MDIwMiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_363 = new DataSub();
	reqAction.addDataSub(subContainer_363);

		ISubRule sub_913 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_12", null, 0, false);
	subContainer_363.addSubInstruction(sub_913);
		ISubRule sub_914 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_12", null, 0, false);
	subContainer_363.addSubInstruction(sub_914);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83AF8E3C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_362(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83B1FF6C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-ffd1a06a10efca49----1656508570204", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-1120ca8819b0e36a5f362b884c4f4430-ffd1a06a10efca49-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZmZkMWEwNmExMGVmY2E0OSIsInRyIjoiMTEyMGNhODgxOWIwZTM2YTVmMzYyYjg4NGM0ZjQ0MzAiLCJ0aSI6MTY1NjUwODU3MDIwNCwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_364 = new DataSub();
	reqAction.addDataSub(subContainer_364);

		ISubRule sub_915 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_11", null, 0, false);
	subContainer_364.addSubInstruction(sub_915);
		ISubRule sub_916 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_11", null, 0, false);
	subContainer_364.addSubInstruction(sub_916);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83B1FF9C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_363(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83B4700C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(20);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Length", "1690", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-2d22fe5f123db983----1656508570375", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-d9c31d2124df12ef6c0f374273528ca0-2d22fe5f123db983-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiMmQyMmZlNWYxMjNkYjk4MyIsInRyIjoiZDljMzFkMjEyNGRmMTJlZjZjMGYzNzQyNzM1MjhjYTAiLCJ0aSI6MTY1NjUwODU3MDM3NSwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Content-Type", "text/plain;charset=UTF-8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Origin", "https://www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSessionsCount=1;kampyleUserSession=1656508516830;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			HTTPPostData postData = new HTTPPostData(reqAction, 0);
	
			postDataClass_35(postData);
				
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_365 = new DataSub();
	reqAction.addDataSub(subContainer_365);

		ISubRule sub_917 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_10", null, 0, false);
	subContainer_365.addSubInstruction(sub_917);
		ISubRule sub_918 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_10", null, 0, false);
	subContainer_365.addSubInstruction(sub_918);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"POST",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			postData,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83B4703C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(201);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
	private void postDataClass_35(HTTPPostData postData) {
				StringBuffer strBuf_34 = new StringBuffer();
strBuf_34.append("{\"sensor_data\":\"7a74G7m23Vrp0o5c9353561.75-1,2,-94,-100,Mozi");
strBuf_34.append("lla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KH");
strBuf_34.append("TML, like Gecko) Chrome/102.0.5005.63 Safari/537.36,uaend,12");
strBuf_34.append("147,20030107,en-GB,Gecko,5,0,0,0,407579,8569495,1920,1040,19");
strBuf_34.append("20,1080,1238,889,1254,,cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,f");
strBuf_34.append("c:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1,8311,0.15070448");
strBuf_34.append("675,828254284747,0,loc:-1,2,-94,-131,Mozilla/5.0 (Windows;10");
strBuf_34.append(".0.0;x86;64;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/");
strBuf_34.append("102.0.5005.63 Safari/537.36-1,2,-94,-101,do_en,dm_en,t_en-1,");
strBuf_34.append("2,-94,-105,-1,2,-94,-102,-1,2,-94,-108,-1,2,-94,-110,-1,2,-9");
strBuf_34.append("4,-117,-1,2,-94,-111,0,487,-1,-1,-1;-1,2,-94,-109,0,487,-1,-");
strBuf_34.append("1,-1,-1,-1,-1,-1,-1,-1;-1,2,-94,-114,-1,2,-94,-103,-1,2,-94,");
strBuf_34.append("-112,https://www.officedepot.com/cart/backorderAction.do-1,2");
strBuf_34.append(",-94,-115,1,32,32,487,487,0,974,876,0,1656508569494,14,17720");
strBuf_34.append(",0,0,2953,0,0,877,974,0,7475C20621AC05998EB5C2E913770E6D~-1~");
strBuf_34.append("YAAQP8jZFwCzBq2BAQAAQtiarwipS07p2uQffYyTH1sCenPfJ4aoBN/FhSX0");
strBuf_34.append("FdV3AyKXKFBbElodLzAPg410ZV6/OgScfY5DFFNwokuQa7GaXAKFsbVeBLgP");
strBuf_34.append("v09wLXFzOuJIt2+TEoQpM5IjgomKG1TrgOlUZfvY2PvfuDOlneTWyiIxJekj");
strBuf_34.append("YSBLvBqr8lWIB05b7YqiiHTl7AjGiHb5KynEowigtQZ7ziD0xiGbRbUWEFDN");
strBuf_34.append("CXdnT2MuBezFTdt4WnV4xu1cZEPN6QqftEL+memkwmya2Y5aU5DG17OLgOOV");
strBuf_34.append("YMWH4REkqCaQOaASvlt1JNs8KPejJtuBWcFIvZCocdIW6mjry3J9PkVi1tkW");
strBuf_34.append("0txTP9E5cNUJbU+H+w/+4sfxvJnVWtvEUE+69B952PJO~-1~-1~-1,37372,");
strBuf_34.append("103,-727874207,30261693,PiZtE,83021,70,14,true-1,2,-94,-106,");
strBuf_34.append("9,1-1,2,-94,-119,-1-1,2,-94,-122,0,0,1,0,1,0,0-1,2,-94,-123,");
strBuf_34.append("-1,2,-94,-124,-1,2,-94,-126,-1,2,-94,-127,213211442413222431");
strBuf_34.append("22-1,2,-94,-70,273720021;-851345892;dis;,7;true;true;true;-6");
strBuf_34.append("0;true;24;24;true;false;-1-1,2,-94,-80,5372-1,2,-94,-116,128");
strBuf_34.append("542674-1,2,-94,-118,98752-1,2,-94,-129,,,0,,,,0-1,2,-94,-121");
strBuf_34.append(",;4;16;0\"}");
String requestData_35 = strBuf_34.toString();
			
	HTTPPostDataChunk pdc_34 = new HTTPPostDataChunk("A1ECF7ADF83B476CC9BBE33261613362", postData, requestData_35, "UTF-8", 0, 0);
	postData.addDataChunk(pdc_34);

	}

	public HTTPAction request_364(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83B6E67C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-d0b61e765b0cd7c6----1656508570678", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-a7344841edf0ad0ccc8d7485ee206380-d0b61e765b0cd7c6-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZDBiNjFlNzY1YjBjZDdjNiIsInRyIjoiYTczNDQ4NDFlZGYwYWQwY2NjOGQ3NDg1ZWUyMDYzODAiLCJ0aSI6MTY1NjUwODU3MDY3OCwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_366 = new DataSub();
	reqAction.addDataSub(subContainer_366);

		ISubRule sub_919 = new SubRule("req_uri", 63, 4, true, (IDCCoreVar)dcVars[201], false, "mapBySkuId", null, 0, false);
	subContainer_366.addSubInstruction(sub_919);
		ISubRule sub_920 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_9", null, 0, false);
	subContainer_366.addSubInstruction(sub_920);
		ISubRule sub_921 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_9", null, 0, false);
	subContainer_366.addSubInstruction(sub_921);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF7F600B1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83B6E6AC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_365(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83BBC30C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-e4f14dc4c55f68a2----1656508570692", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-c25ee08aaa765dd1e4a317f696b47400-e4f14dc4c55f68a2-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiZTRmMTRkYzRjNTVmNjhhMiIsInRyIjoiYzI1ZWUwOGFhYTc2NWRkMWU0YTMxN2Y2OTZiNDc0MDAiLCJ0aSI6MTY1NjUwODU3MDY5MiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_367 = new DataSub();
	reqAction.addDataSub(subContainer_367);

		ISubRule sub_922 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_8", null, 0, false);
	subContainer_367.addSubInstruction(sub_922);
		ISubRule sub_923 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_8", null, 0, false);
	subContainer_367.addSubInstruction(sub_923);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83BBC33C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_366(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83BE34EC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_368 = new DataSub();
	reqAction.addDataSub(subContainer_368);

		ISubRule sub_924 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_7", null, 0, false);
	subContainer_368.addSubInstruction(sub_924);
		ISubRule sub_925 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_7", null, 0, false);
	subContainer_368.addSubInstruction(sub_925);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83BE351C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_367(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83C0A9BC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_369 = new DataSub();
	reqAction.addDataSub(subContainer_369);

		ISubRule sub_926 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_6", null, 0, false);
	subContainer_369.addSubInstruction(sub_926);
		ISubRule sub_927 = new SubRule("req_uri", 0, 100, false, (IDCCoreVar)dcVars[203], false, "HQFje_jFRalo {4}_url", null, 0, false);
	subContainer_369.addSubInstruction(sub_927);
		ISubRule sub_928 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_6", null, 0, false);
	subContainer_369.addSubInstruction(sub_928);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF7F600B1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83C0A9EC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_368(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83C7F80C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-7297f1b945b801e9----1656508570692", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-7f5383f81d7453abf2d80d1852d647f0-7297f1b945b801e9-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNzI5N2YxYjk0NWI4MDFlOSIsInRyIjoiN2Y1MzgzZjgxZDc0NTNhYmYyZDgwZDE4NTJkNjQ3ZjAiLCJ0aSI6MTY1NjUwODU3MDY5MiwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;mt.mbsh=%7B%221656508559630%22%3A%7B%7D%7D;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;_clsk=e2zmnj|1656508563258|6|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508569.1;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_370 = new DataSub();
	reqAction.addDataSub(subContainer_370);

		ISubRule sub_929 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_5", null, 0, false);
	subContainer_370.addSubInstruction(sub_929);
		ISubRule sub_930 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_5", null, 0, false);
	subContainer_370.addSubInstruction(sub_930);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83AAAC1C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83C7F83C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_369(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83CA691C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;returnsResponsive=true;subscriptionAIService=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1;mt.mbsh=%7B%221656508570770%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508570.60;_clsk=e2zmnj|1656508571366|7|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_371 = new DataSub();
	reqAction.addDataSub(subContainer_371);

		ISubRule sub_931 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer_4", null, 0, false);
	subContainer_371.addSubInstruction(sub_931);
		ISubRule sub_932 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host_4", null, 0, false);
	subContainer_371.addSubInstruction(sub_932);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83CA694C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_370(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83CCDEBC9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-19734070be52c676----1656508571573", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-1c95999b1580b7ecbdece03fe1aaf0f0-19734070be52c676-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiMTk3MzQwNzBiZTUyYzY3NiIsInRyIjoiMWM5NTk5OWIxNTgwYjdlY2JkZWNlMDNmZTFhYWYwZjAiLCJ0aSI6MTY1NjUwODU3MTU3MywidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1;mt.mbsh=%7B%221656508570770%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508570.60;_clsk=e2zmnj|1656508571366|7|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_372 = new DataSub();
	reqAction.addDataSub(subContainer_372);

		ISubRule sub_933 = new SubRule("req_uri", 78, 4, true, (IDCCoreVar)dcVars[202], false, "noSession", null, 0, false);
	subContainer_372.addSubInstruction(sub_933);
		ISubRule sub_934 = new SubRule("req_uri", 63, 4, true, (IDCCoreVar)dcVars[201], false, "mapBySkuId", null, 0, false);
	subContainer_372.addSubInstruction(sub_934);
		ISubRule sub_935 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_3", null, 0, false);
	subContainer_372.addSubInstruction(sub_935);
		ISubRule sub_936 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_3", null, 0, false);
	subContainer_372.addSubInstruction(sub_936);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF7F600B1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83CCDEEC9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_371(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83CF531C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(17);
					
		headers.add(new RequestHeaderData("Host", "www.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("tracestate", "2457565@nr=0-1-2687855-515667111-43f6955eacefc38f----1656508571589", "UTF-8", 1));			
		headers.add(new RequestHeaderData("traceparent", "00-2706a401131823d3f64ba120f5427100-43f6955eacefc38f-01", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("newrelic", "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI2ODc4NTUiLCJhcCI6IjUxNTY2NzExMSIsImlkIjoiNDNmNjk1NWVhY2VmYzM4ZiIsInRyIjoiMjcwNmE0MDExMzE4MjNkM2Y2NGJhMTIwZjU0MjcxMDAiLCJ0aSI6MTY1NjUwODU3MTU4OSwidGsiOiIyNDU3NTY1In19", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "*/*", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-origin", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "empty", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/cart/backorderAction.do", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;FINID=5b641b2f0d2db4279c1878be9114d90e;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;_mibhv=anon-1656508510268-7729214690_5124;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mdLogger=false;kampyle_userid=531e-ba5d-a55b-3abd-f494-0ea8-75a2-7248;kampyleUserSession=1656508516830;kampyleUserSessionsCount=1;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_aeaid=89695d51-3264-4d1b-a432-b2fccc4f378f;aelreadersettings=%7B%22c_big%22%3A0%2C%22rg%22%3A0%2C%22memph%22%3A0%2C%22contrast_setting%22%3A0%2C%22colorshift_setting%22%3A0%2C%22text_size_setting%22%3A0%2C%22space_setting%22%3A0%2C%22font_setting%22%3A0%2C%22k%22%3A0%2C%22k_disable_default%22%3A0%2C%22hlt%22%3A0%2C%22disable_animations%22%3A0%2C%22display_alt_desc%22%3A0%7D;aelastsite=wEOeRi5JsNLJ8fGoDSrBTk3q8T4OUtKc8d9SEhtkc1noNoQ0WzUPPaLijCdPhmbw;aeatstartmessage=true;salsify_session_id=36894318-a0e9-4f0d-9768-4bcd3449ea83;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVImplmain_site=2563;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;kampyleSessionPageCounter=4;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1;mt.mbsh=%7B%221656508570770%22%3A%7B%7D%7D;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508570.60;_clsk=e2zmnj|1656508571366|7|1|l.clarity.ms/collect", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_373 = new DataSub();
	reqAction.addDataSub(subContainer_373);

		ISubRule sub_937 = new SubRule("req_uri", 85, 4, true, (IDCCoreVar)dcVars[202], false, "noSession", null, 0, false);
	subContainer_373.addSubInstruction(sub_937);
		ISubRule sub_938 = new SubRule("req_uri", 70, 4, true, (IDCCoreVar)dcVars[201], false, "mapBySkuId", null, 0, false);
	subContainer_373.addSubInstruction(sub_938);
		ISubRule sub_939 = new SubRule("req_hdr_Referer_1", 0, 51, false, (IDCCoreVar)dcVars[199], false, "Referer_2", null, 0, false);
	subContainer_373.addSubInstruction(sub_939);
		ISubRule sub_940 = new SubRule("req_hdr_Host_1", 0, 19, false, (IDCCoreVar)vars[1], false, "Host_2", null, 0, false);
	subContainer_373.addSubInstruction(sub_940);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);
		// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF7F600B1C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"ISO-8859-1",
			"A1ECF7ADF83CF534C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("application/json;charset=ISO-8859-1");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}

	public HTTPAction request_372(IContainer parent, boolean isFirstInParallelGroup, String parallelGroup, 
					boolean connectionClose, boolean isPrimary, String connConfigName, String actionName, String url, boolean isURLRelative, boolean useSubstitutedUriInReports) 
	{	
		
		HTTPAction reqAction = new HTTPAction(parent, actionName, "A1ECF7ADF83D1C33C9BBE33261613362", getHTTPTest());
		HTTPPage myPage = reqAction.getPage();
		
		// add the action to the page-global action map for possible semaphore use
		myPage.getActionMap().put(reqAction.getId(), reqAction);
				
			
	
	
	
	
		
		ArrayList<RequestHeaderData> headers = new ArrayList<RequestHeaderData>(14);
					
		headers.add(new RequestHeaderData("Host", "media.officedepot.com", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Connection", "keep-alive", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua", "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-mobile", "?0", "UTF-8", 1));			
		headers.add(new RequestHeaderData("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36", "UTF-8", 1));			
		headers.add(new RequestHeaderData("sec-ch-ua-platform", "\"Windows\"", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept", "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Site", "same-site", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Mode", "no-cors", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Sec-Fetch-Dest", "image", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Referer", "https://www.officedepot.com/", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Encoding", "gzip, deflate, br", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Accept-Language", "en-GB,en-US;q=0.9,en;q=0.8", "UTF-8", 1));			
		headers.add(new RequestHeaderData("Cookie", "mt.v=5.1444192317.1656508501726;_gcl_au=1.1.1104239976.1656508506;cspAdPlacement=true;subscriptionAIService=true;returnsResponsive=true;newMyFilesExperienceIsActive=true;_gid=GA1.2.643794249.1656508508;xdVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;atgRecVisitorId=1319n0hy7vAgPqKhBUHJADtfuOcOfsAhtn8hfbLX_jHdkTwEE2E;NoCookie=true;_rdt_uuid=1656508510754.66d6889a-bd4a-4b98-a5f5-bf5babf42c3e;_cls_v=72509979-ca6c-4d0e-b477-58d41715033e;_cls_s=5eb4d051-a492-45a1-a5b8-310866ec3c26:0;atgRecSessionId=RuSvmfEfZu1Uu5bJ-7uxdly_TDQthWuqc_cf1DCu9ulDIYan_Dl4!-654053371!967628917;_scid=f79d6c90-86db-4067-9059-906343e1f734;_fbp=fb.1.1656508511965.1558560696;cjConsent=MHxZfDB8Tnww;_clck=oob24f|1|f2q|0;__gads=ID=93036d529c8b9a51:T=1656508515:S=ALNI_Mb7RXpQ_AhSsAEH6af3P0fe6Yjqfw;mt.sac_1=t;_pin_unauth=dWlkPU56ZG1ZekExTVRZdE9UZ3hNQzAwWldFNExUZzVZemt0TnpWa1pETmtOR1EyTldVMg;_tt_enable_cookie=1;_ttp=7379546b-0ccf-4f1a-93fd-f6e078f8b8e8;BVBRANDSID=2d09bfa4-25c6-462b-b5cf-7d382bf0a03b;BVBRANDID=ef919888-99f2-465c-a014-ce653a3a434d;RT=\"z=1&dm=officedepot.com&si=o6sxbadeg4j&ss=l4zme3eb&sl=6&tt=xj9&obo=1&rl=1\";_ga=GA1.2.565524517.1656508508;_uetsid=815801c0f7ad11ec97da0da31825eaf3;_uetvid=81586500f7ad11ecbcc74f9f48f02e46;_dc_gtm_UA-102713874-13=1;eeStep=1;mt.mbsh=%7B%221656508570770%22%3A%7B%7D%7D;_clsk=e2zmnj|1656508571366|7|1|l.clarity.ms/collect;_ga_MZ424N4G1Y=GS1.1.1656508510.1.1.1656508571.59", "UTF-8", 1));

				
			
					
		IBasicAuthentication basicAuth = null;
			IDataSub subContainer_374 = new DataSub();
	reqAction.addDataSub(subContainer_374);

		ISubRule sub_941 = new SubRule("req_hdr_Referer_1", 0, 28, false, (IDCCoreVar)dcVars[3], false, "Referer", null, 0, false);
	subContainer_374.addSubInstruction(sub_941);
		ISubRule sub_942 = new SubRule("req_hdr_Host_1", 0, 21, false, (IDCCoreVar)vars[0], false, "Host", null, 0, false);
	subContainer_374.addSubInstruction(sub_942);
	


		
				// wait on another action
		reqAction.addSemaphoreWait((IKAction)myPage.getActionMap().get("A1ECF7ADF83B4700C9BBE33261613362"), 3);		
		IConnectionRecord serverConnection = ConnectionRecordFactory.find(parent, 
				parallelGroup, connConfigName,
				true, // close connection at test boundary,
				null, 0, 1); // error behavior
		reqAction.io2=serverConnection.getHttp2ioConnector();
		IHTTPRequest req = new HTTPRequest(
			"GET",	// method
			"https",  // protocol - http or https
			url, isURLRelative,
			"1.1",	// version
			headers,
			IHTTPSessionTypes.STANDARD,
			0, // delay
			isPrimary,
			null,// post data
			basicAuth,
			serverConnection,
			reqAction,
			"UTF-8",
			"UTF-8",
			"A1ECF7ADF83D1C36C9BBE33261613362",
			true,
			false
		);
		
		req.setExpectedResponseCode(200);
		req.setConnectionClose(connectionClose);
		

		reqAction.setFirstRequestInParallel(isFirstInParallelGroup);
		reqAction.setRequest(req);
		reqAction.setArmEnabled(false);
		reqAction.setResponseContentType("image/webp");
		reqAction.setConnectionGroup(parallelGroup);
		reqAction.setDoesHarvesterRequireContent(false);
		reqAction.setUseSubstitutedUriInReports(useSubstitutedUriInReports);
		
		
		return reqAction;
	}
}
